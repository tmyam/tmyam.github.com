<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | tmyam's blog]]></title>
  <link href="https://tmyam.github.io/blog/categories/web/atom.xml" rel="self"/>
  <link href="https://tmyam.github.io/"/>
  <updated>2017-06-10T14:53:21+08:00</updated>
  <id>https://tmyam.github.io/</id>
  <author>
    <name><![CDATA[tmyam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javaweb学习：创建Maven项目]]></title>
    <link href="https://tmyam.github.io/blog/2017/06/10/javawebxue-xi-:chuang-jian-mavenxiang-mu/"/>
    <updated>2017-06-10T14:12:17+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/06/10/javawebxue-xi-:chuang-jian-mavenxiang-mu</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>做项目开发，前期最重要的就是规范和整体架构，<strong>Maven</strong>正好可以规范这些方面，它是一个项目管理工具，是做java开发的不二之选。</p>

<!--more-->


<h3>Maven的作用</h3>

<ol>
<li>在开发中，为了保证编译通过，我们会到处去寻找jar包，当编译通过了，运行的时候，却发现"ClassNotFoundException"，我们想到的是，难道还差jar包？</li>
<li>每个Java项目的目录结构都没有一个统一的标准，配置文件到处都是，单元测试代码到底应该放在那里也没有一个权威的规范。</li>
<li>Maven主要做了两件事：

<ul>
<li>统一开发规范与工具</li>
<li>统一管理jar包</li>
</ul>
</li>
</ol>


<h3>搭建项目</h3>

<p>Maven的具体目录结构，不是本文的重点，这里就不做介绍了。可以 <a href="http://www.cnblogs.com/hongwz/p/5456578.html">参考链接</a></p>

<p>这里介绍如何搭建项目：</p>

<p>1、 配置Maven，参考下图：
<img src="/images/2017/06/10/01.jpg" alt="" /></p>

<ul>
<li>如上图标注 1 所示，Import Maven projects automatically 表示 IntelliJ IDEA 会实时监控项目的 pom.xml 文件，进行项目变动设置。</li>
<li>如上图标注2 所示，在 Maven 导入依赖包的时候是否自动下载源码和文档。默认是没有勾选的，也不建议勾选，原因是这样可以加快项目从外网导入依赖包的速度，如果我们需要源码和文档的时候我们到时候再针对某个依赖包进行联网下载即可。IntelliJ IDEA 支持直接从公网下载源码和文档的。</li>
</ul>


<p>2、 创建java web项目</p>

<p>创建<strong>Project</strong>，如下图：
<img src="/images/2017/06/10/02.jpg" alt="" /></p>

<p><img src="/images/2017/06/10/03.jpg" alt="" />
<strong>GroupId</strong> 是项目组织唯一的标识符，实际对应JAVA的包的结构，是main目录里java的目录结构。</p>

<p><strong>ArtifactId</strong> 就是项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。一般GroupId就是填com.zhl.hellotest这样子。</p>

<p><strong>Version</strong> 1.0.0-SNAPSHOT 表示还在开发中。</p>

<p>一步一步创建完成之后，会创建成功，如果缺少jar包则会去自动下载。</p>

<blockquote><p>[INFO] BUILD SUCCESS
[INFO] &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
[INFO] Total time: 9.553 s
[INFO] Finished at: 2017-06-05T10:10:35+08:00
[INFO] Final Memory: 12M/126M
[INFO] &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
[INFO] Maven execution finished</p></blockquote>

<p>创建成功的项目目录如下：
<img src="/images/2017/06/10/04.jpg" alt="" /></p>

<h3>Java web 启动配置</h3>

<p>1、 配置 Facets</p>

<p><img src="/images/2017/06/10/05.jpg" alt="" /></p>

<p><img src="/images/2017/06/10/06.jpg" alt="" /></p>

<p>2、 配置 Artifacts</p>

<p><img src="/images/2017/06/10/07.jpg" alt="" /></p>

<p><img src="/images/2017/06/10/08.jpg" alt="" /></p>

<p>3、 配置 Edit Configurations</p>

<p><img src="/images/2017/06/10/09.jpg" alt="" /></p>

<p><img src="/images/2017/06/10/10.jpg" alt="" /></p>

<p><img src="/images/2017/06/10/11.jpg" alt="" /></p>

<h3>运行项目</h3>

<p><img src="/images/2017/06/10/12.jpg" alt="" />
之后会自动打开浏览器的 <a href="http://localhost:8080">http://localhost:8080</a> 看到 <strong>Hello World!</strong>。</p>

<h3>创建java war发布包</h3>

<p>war包放入Tomcat后会自动解压部署，非常适合于线上环境的部署。</p>

<p>1、 配置 war包的Artifacts</p>

<p>选择从已经存在的项目打包。
<img src="/images/2017/06/10/13.jpg" alt="" /></p>

<p>单独为war包配置Tomcat也是可以的，这里配置在已经存在的运行环境里。
在运行 <strong>hellotest:war exploded</strong>里，配置build <strong>hellotest:war</strong>。
<img src="/images/2017/06/10/14.jpg" alt="" /></p>

<p>这样在运行Tomcat之后，会在 <strong>out</strong> 目录内生成 <strong>hellotest_war.war</strong> 的发布包。</p>

<h4>参考</h4>

<p><a href="http://www.cnblogs.com/hongwz/p/5456578.html">http://www.cnblogs.com/hongwz/p/5456578.html</a>
<a href="http://blog.csdn.net/myarrow/article/details/50824793">http://blog.csdn.net/myarrow/article/details/50824793</a></p>
]]></content>
  </entry>
  
</feed>
