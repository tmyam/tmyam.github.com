<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: objective-c | tmyam's blog]]></title>
  <link href="https://tmyam.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="https://tmyam.github.io/"/>
  <updated>2017-03-28T09:27:48+08:00</updated>
  <id>https://tmyam.github.io/</id>
  <author>
    <name><![CDATA[tmyam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C遍历数组]]></title>
    <link href="https://tmyam.github.io/blog/2014/02/28/objective-cbian-li-shu-zu/"/>
    <updated>2014-02-28T11:46:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/02/28/objective-cbian-li-shu-zu</id>
    <content type="html"><![CDATA[<p>数组的遍历有多种方式，这里介绍一下常见的方式，使用以及注意事项。</p>

<h2>常用写法简介</h2>

<h3>1. 经典写法</h3>

<pre><code class="objc">- (void) test:(NSArray*)array
{
    NSInteger count = array.count;
    for (NSInteger i = 0 ; i &lt; count ; i ++ )
    {
        NSLog(@"%@",array[i]);
    }
    NSLog(@"end");
}
</code></pre>

<p>之所以使用count来存储数组总数，而不是写成 <strong>i &lt; array.count</strong> ,是因为循环每进行一次都会调用数组的计数方法，这将导致性能变得很差。</p>

<!-- more -->


<h3>2. NSEnumerator</h3>

<pre><code class="objc">- (void) test:(NSArray*)array
{
    id test = nil;
    NSEnumerator* enumerator = [array objectEnumerator];
    while (test = [enumerator nextObject])
    {
        NSLog(@"%@",test);
    }
    NSLog(@"end");
}
</code></pre>

<p>NSEnumerator的优势在于不需要知道数据总数，所以它适合应用在结构化数据上，比如链表，数据流等。</p>

<h3>3. 快速枚举</h3>

<pre><code class="objc">- (void) test:(NSArray*)array
{
    for (NSString* test in array )
    {
        NSLog(@"%@",test);
    }
    NSLog(@"end");
}
</code></pre>

<p>快速枚举是apple推荐的方式，在使用上比经典的写法性能上更快。 <br/>
使用上如果需要反向枚举，只需要将<strong>array</strong>改成<strong>array.reverseObjectEnumerator</strong>就可以了。</p>

<h3>4. 枚举块</h3>

<pre><code class="objc">- (void) test:(NSArray*)array
{
    [array enumerateObjectsUsingBlock:^(NSString* obj, NSUInteger idx, BOOL *stop) {

         NSLog(@"%@",obj);
    }];
    NSLog(@"end");
}
</code></pre>

<p>枚举块的优势在于它会返回对象和索引, 而其他的枚举方法只会返回对象.</p>

<h2>并发执行</h2>

<p>现在是多核的时代，为了发挥多核的优势，在有些时候并发执行就非常具有优势。如果在枚举中有许多事要做，但并不关心枚举顺序的情况下，使用并发就很合适。 <br/>
但是对于数组总量小一些的数组，并发执行不一定会带来性能提升，反而开销可能远多于其带来的好处。<br/>
所以具体的使用需要自己进行权衡。</p>

<h3>1. 基本的并发枚举块</h3>

<pre><code class="objc">- (void) test:(NSArray*)array
{
    [array enumerateObjectsWithOptions:NSEnumerationConcurrent usingBlock:^(NSString* obj, NSUInteger idx, BOOL *stop) {

        NSLog(@"%@",obj);

    }];
    NSLog(@"end");
}
</code></pre>

<p>这种方式会为每一个枚举创建一个线程，等到所有的枚举都执行完毕才会进行下一步。</p>

<h3>2. 异步GCD并发</h3>

<pre><code class="objc">- (void) test:(NSArray*)array
{
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    for(NSString* test in array)
    {
        dispatch_async(queue, ^{

            NSLog(@"%@",test);
        });
    }
    NSLog(@"end");
}
</code></pre>

<p>这种方式会为每一个枚举创建一个线程，但是不会等待所有枚举执行完成，而是for循环完成后就会进行下一步了，是一种异步执行的方式。</p>

<h3>3. 等待GCD并发</h3>

<pre><code class="objc">- (void) test:(NSArray*)array
{
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    dispatch_group_t group = dispatch_group_create();
    for(NSString* test in array)
    {
        dispatch_group_async(group, queue, ^{

            NSLog(@"%@",test);
        });
    }
    dispatch_group_wait(group, DISPATCH_TIME_FOREVER);
    dispatch_release(group);
    NSLog(@"end");
}
</code></pre>

<p>这种方式使用group将多个block组成一组以监测这些Block全部完成或者等待全部完成。这种方式的效果类似于<code>1.基本的并发枚举块</code>。</p>

<h3>4. dispatch_apply</h3>

<pre><code class="objc">- (void) test:(NSArray*)array
{
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    dispatch_apply(array.count, queue, ^(size_t index){

        NSLog(@"%@",array[index]);

    });
    NSLog(@"end");
}
</code></pre>

<p>这是系统提供的一种并发执行方式，这种方式的效果同样类似于<code>1.基本的并发枚举块</code>。</p>

<p><br/></p>

<h3>参考</h3>

<p>本文只是粗略的介绍，如果想了解更详细的使用，建议阅读下面的链接。
<a href="http://www.oschina.net/translate/high-performance-collection-looping-objective-c">http://www.oschina.net/translate/high-performance-collection-looping-objective-c</a></p>

<p><a href="http://www.dreamingwish.com/dream-2012/gcd%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%A4%9A%E6%A0%B8%E5%BF%83%E7%9A%84%E6%80%A7%E8%83%BD.html">http://www.dreamingwish.com/dream-2012/gcd%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%A4%9A%E6%A0%B8%E5%BF%83%E7%9A%84%E6%80%A7%E8%83%BD.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C枚举介绍]]></title>
    <link href="https://tmyam.github.io/blog/2014/02/24/mei-ju-jie-shao/"/>
    <updated>2014-02-24T15:39:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/02/24/mei-ju-jie-shao</id>
    <content type="html"><![CDATA[<p>Objective-C枚举的使用，常见的方式总结，以便自己使用时方便查阅。</p>

<h2>1. 枚举介绍</h2>

<h3>enum only</h3>

<pre><code class="objc">enum
{
    TMEnumTestOne,
    TMEnumTestTwo,
};
</code></pre>

<ul>
<li>这种枚举<strong>不推荐</strong>使用，因为不能用一种类型的方式表示枚举。</li>
</ul>


<!-- more -->


<h3>enum 类型</h3>

<pre><code class="objc">typedef enum
{
    TMEnumTestOne,
    TMEnumTestTwo,

} TMEnumTest;
</code></pre>

<pre><code class="objc">enum TMEnumTest
{
    TMEnumTestOne,
    TMEnumTestTwo,
};
typedef enum TMEnumTest TMEnumTest;
</code></pre>

<ul>
<li>这两种写法，将枚举描述为一个类型<em>TMEnumTest</em>。 <br/>
但是这种写法也有局限性，在作为函数参数时，如果传入NSInteger类型的数据，则需要强制转换，否则会有类型不匹配的警告，所以这种方式也<strong>不推荐</strong>。如下图，
<img src="/images/2014/02/24/enum_warn.png" alt="temp" /></li>
</ul>


<h3>老式enum写法</h3>

<pre><code class="objc">enum
{
    TMEnumTestOne,
    TMEnumTestTwo,
};
typedef NSUInteger TMEnumTest;
</code></pre>

<ul>
<li>这种写法可以指定<em>TMEnumTest</em>的类型，并且作为函数参数时，传入的值不需要进行强制类型转换。 <br/>
但是这种写法不会检查枚举的正确性，是好是坏需要自己判断，如下图。本人<strong>推荐</strong>这种写法。
<img src="/images/2014/02/24/enum_no_check.png" alt="temp" /></li>
</ul>


<h3>新式enum写法</h3>

<pre><code class="objc">typedef NS_ENUM(NSUInteger, TMEnumTest)
{
    TMEnumTestOne,
    TMEnumTestTwo,
};
</code></pre>

<pre><code class="objc">typedef NS_OPTIONS(NSUInteger, TMEnumTest)
{
    TMEnumTestOne  = 0,
    TMEnumTestTwo  = 1 &lt;&lt; 0,
};
</code></pre>

<ul>
<li><strong>NS_ENUM</strong>和<strong>NS_OPTIONS</strong>本质是一样的，仅仅从字面上来区分用途。<strong>NS_ENUM</strong>是通用情况，<strong>NS_OPTIONS</strong>一般用来定义位枚举。
<a href="http://blog.csdn.net/annkie/article/details/9877643">参考链接</a></li>
<li>这种写法同样作为函数参数时，传入的值不需要进行强制类型转换。但是也同样不会检查枚举的正确性，和 <strong>老式enum写法</strong> 一样，如下图。
<img src="/images/2014/02/24/enum_no_check.png" alt="temp" /></li>
<li>但是不同的是，<strong>新式enum写法</strong> 在使用<em>switch</em>时，会进行值的检测，如果枚举中无此值，则会弹出警告，如下图。这种方式见仁见智了。本人<strong>推荐</strong>这种写法。
<img src="/images/2014/02/24/enum_switch.png" alt="temp" /></li>
</ul>


<h2>2. 枚举最大值</h2>

<p>对于一般的枚举，要获取枚举的最大值是很难的，因为随着枚举的扩充，最大值在不断变化，这时推荐使用一个固定的枚举表示最大值，例如：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">NS_ENUM</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">,</span> <span class="n">TMEnumTest</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">TMEnumTestMax</span><span class="p">,</span>  <span class="c1">// 表示最大值</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>
这样就可以使用<em>TMEnumTestMax</em>表示枚举<em>TMEnumTest</em>的最大值了。</p>

<h2>3. 位枚举</h2>

<p>位枚举是一种特殊的枚举，在apple的类中使用的很多，例如<code>NSStringCompareOptions</code>等。
<code>objc
typedef NS_OPTIONS(NSUInteger, TMEnumTest)
{
    TMEnumTestOne     = 0,         // 0
    TMEnumTestTwo     = 1 &lt;&lt; 0,     // 1
    TMEnumTestThree   = 1 &lt;&lt; 1,     // 2
    TMEnumTestFour    = 1 &lt;&lt; 2,     // 4
};
</code></p>

<ul>
<li>位枚举的特点是可以使用位运算来处理枚举值，实际使用中可以用一个变量存储多个枚举值，表示互不影响的多个设置。</li>
</ul>


<pre><code class="objc ">- (void) test
{
    TMEnumTest test = TMEnumTestTwo|TMEnumTestThree;  // 3

    /* 添加TMEnumTestFour到test中（如test已经包含TMEnumTestFour，则test值不变）

       当然这里也可以使用test += TMEnumTestFour,
       但是注意 + 不能在test中已经包含TMEnumTestFour的情况下使用。
    */
    test |= TMEnumTestFour;  // 7


    /* 将TMEnumTestThree从test中去除（如test不包含TMEnumTestThree，则test值不变）

       当然这里也可以使用test -= TMEnumTestThree，
       但是注意 - 不能在test中不包含TMEnumTestThree的情况下使用。
    */    
    test &amp;= ~TMEnumTestThree; // 5


    // 判断 TMEnumTestFour枚举 是否被包含
    if ((test &amp; TMEnumTestFour) == TMEnumTestFour)
    {
        NSLog(@"YES");
    }


    /* 判断 TMEnumTestFour枚举 是否被包含

     因为 (test &amp; TMEnumTestFour) 的结果不是 0，就是TMEnumTestFour本身，
     而 TMEnumTestFour &gt; 0 ，所以可以使用简易的判断
     */
    if (test &amp; TMEnumTestFour)
    {
        NSLog(@"YES");
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
