<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mac_develop | tmyam's blog]]></title>
  <link href="http://tmyam.github.io/blog/categories/mac-develop/atom.xml" rel="self"/>
  <link href="http://tmyam.github.io/"/>
  <updated>2014-05-20T21:40:47+08:00</updated>
  <id>http://tmyam.github.io/</id>
  <author>
    <name><![CDATA[tmyam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac app，创建基于文档的app]]></title>
    <link href="http://tmyam.github.io/blog/2014/02/20/chuang-jian-wen-dang-xing-ying-yong/"/>
    <updated>2014-02-20T14:24:00+08:00</updated>
    <id>http://tmyam.github.io/blog/2014/02/20/chuang-jian-wen-dang-xing-ying-yong</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>基于文档的app在mac下又是比较常见的形式，但是介绍的文章比较少。为了避免少走弯路，在此进行一些简单的介绍。</p>

<!-- more -->


<p></p>

<h2>创建</h2>

<p>创建一个mac app，在下图这个界面，勾选<strong>Create Document-Based Application</strong> <br/>
<img src="/images/2014/02/20/create.png" alt="temp" /></p>

<p>其中继承自<strong>NSDocument</strong>的<strong>Document</strong>就是文档类，区别于<strong>AppDelegate</strong>，<strong>Document</strong>不是单例，而是对应一个个文档实例。</p>

<h2>自建文档文件图标</h2>

<p>这里省略，格式为icns&hellip;</p>

<h2>关联文件类型</h2>

<ul>
<li>导入文档图标（上步创建的图标）</li>
<li>在工程的<em>Info</em>里进行设置，如下图。 <br/>
<img src="/images/2014/02/20/info.png" alt="temp" /> <br/>
<strong>Document Types</strong>设置文档关联的文件，<em>Identifier</em>为文档标示。 <br/>
<strong>Exported UTIs</strong>为具体的文档设置，<em>Identifier</em>必须和<strong>Document Types</strong>的一致，这里面可以设置图标，扩展名等等。 <br/>
注意图标必须设置在<strong>Document Types</strong>里面，运行之后就会立即生效。 <br/>
而且这两项都是可以设置多个关联的，关联多个文档类，关联多种格式。</li>
</ul>


<h2>运行</h2>

<p>这时，运行工程，文件关联就已经完成了。可以创建一个指定的扩展名文件，看看是不是已经变成了指定的图标样式。如果没有改变，可以重启电脑之后看看。</p>

<h2>编码</h2>

<p>在<strong>Document.m</strong>文件里已经有两个函数。</p>

<p>``` objective-c
&ndash; (NSData <em>)dataOfType:(NSString </em>)typeName error:(NSError **)outError
{</p>

<pre><code>if ([typeName isEqualToString:@"com.tmyam.TestDocument.document"])
{
    // TODO: 这里是具体的存储文件数据
    return [@"test" dataUsingEncoding:4];
}
else
{
    if (outError)
    {
        *outError = [NSError errorWithDomain:@"TestDocumentErrorDomain"
                                        code:-1
                                    userInfo:@{NSLocalizedFailureReasonErrorKey:[NSString stringWithFormat:@"Unsupported data type: %@", typeName]}];
    }
}
return nil;
</code></pre>

<p>}</p>

<ul>
<li><p>(BOOL)readFromData:(NSData <em>)data ofType:(NSString </em>)typeName error:(NSError **)outError
{
  assert([typeName isEqualToString:@&ldquo;com.tmyam.TestDocument.document&rdquo;]);</p>

<p>  // TODO: 这里是具体的读取文件数据</p>

<p>  return YES;
}
```</p>

<h2>示例</h2>

<p><a href="/files/TestDocument.zip">TestDocument示例下载</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac app开发中添加第三方framework]]></title>
    <link href="http://tmyam.github.io/blog/2013/11/05/mac-develop-add-framework/"/>
    <updated>2013-11-05T15:23:00+08:00</updated>
    <id>http://tmyam.github.io/blog/2013/11/05/mac-develop-add-framework</id>
    <content type="html"><![CDATA[<p>环境: <code>(mac 版本 10.9 ) ( Xcode 5.0 )</code></p>

<hr />

<br/>


<h4>步骤很简单，但是总是忘记，所以在这里做个记录。</h4>

<ul>
<li>在工程目录中建个文件夹，存放将要添加的第三方framework</li>
</ul>


<!-- more -->


<ul>
<li><p>在工程的 <em>Build Phases</em> 栏点击菜单，如下图，添加 <em>Copy Files</em><br/>
<img src="/images/2013/11/05/add_copy_files.png" alt="temp" /></p></li>
<li><p>选择<code>Frameworks</code>,点击<code>+</code>号，然后找到存放第三方framework的文件夹，选择要添加的framework，如下图<br/>
<img src="/images/2013/11/05/add_framework.png" alt="temp" /></p></li>
<li><p>展开<em>Link Binary With Libraries</em> 点击<code>+</code>号，同上一步一样，找到找到存放第三方framework的文件夹，选择要使用的framework，如下图<br/>
<img src="/images/2013/11/05/use_framework.png" alt="temp" /></p></li>
</ul>


<p>右侧的文件管理里，刚添加的framework会位于顶端，可以稍作整理，移动到Frameworks组里，这时添加就完成了可以随意使用了。</p>

<h4>修改关联路径</h4>

<p>一般情况下，如果将framework文件放到了工程文件夹的里面，那么在移动工程文件夹后，编译工程会出现无法找到framework头文件的错误，这是因为工程默认添加的路径使用了绝对路径的关系。</p>

<ul>
<li>修改 <br/>
在Xcode的 <em>Build Settings</em> 里找到 <em>Framework Search Paths</em> 栏，修改参数为 <br/>
$(SRCROOT)/<code>当前工程名</code>/<code>第三方framework所在的文件夹</code> <br/>
例如：
<img src="/images/2013/11/05/change_path_framework.png" alt="temp" />
这样就算移动工程文件夹，也不会报错了。</li>
</ul>


<h4>清除冗余文件</h4>

<p>对于已经添加的第三方framework，在生成的app中可以查看到framework的头文件，出于两个目的的考虑。<br/>
1. 由于程序中已经引入了这些头文件，所以重复添加浪费了空间。<br/>
2. 出于安全性的考虑，防止被别人使用或者破解。</p>

<p><strong>清除方法：</strong></p>

<ul>
<li><p>在工程的 <em>Build Phases</em> 栏点击菜单，入最上面的图里，这次添加 <em>Run Script</em><br/>
<img src="/images/2013/11/05/add_copy_files.png" alt="temp" /></p></li>
<li><p>贴入如下代码</p></li>
</ul>


<p><code>sh
echo "build path ${TARGET_BUILD_DIR}"  
cd ${TARGET_BUILD_DIR}/${FULL_PRODUCT_NAME}/Contents/Frameworks   
rm -rf */Headers   
rm -rf */Versions/*/Headers
rm -rf */Versions/*/Resources/*/Contents/Headers
rm -rf */PrivateHeaders
rm -rf */Versions/*/PrivateHeaders
rm -rf */Versions/*/Resources/*/Contents/PrivateHeaders
</code><br/>
如下图 <br/>
<img src="/images/2013/11/05/clean_framework.png" alt="temp" /></p>

<h4>编译问题</h4>

<p>对于编译出现签名错误的问题，可以查看<a href="http://tmyam.github.io/blog/2013/11/05/xcode5-mac-app-running-on-lion/">链接</a>。</p>

<blockquote><p>/Users/…/xxx.app: code object is not signed at all In subcomponent: /Users/…/xxx.app/Contents/Frameworks/xxx.framework Command /usr/bin/codesign failed with exit code 1</p></blockquote>

<hr />

<br/>


<p><strong>另外，由于framework中含有文件夹的快捷方式，在使用svn等版本管理软件时，新checkout的framework中的快捷方式会丢失，虽然编译运行没有问题，但是提交到mac appstore时无法通过，所以需要注意做压缩备份。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 5.0在Mavericks下创建的mac app在Lion下无法运行的问题]]></title>
    <link href="http://tmyam.github.io/blog/2013/11/05/xcode5-mac-app-running-on-lion/"/>
    <updated>2013-11-05T10:05:00+08:00</updated>
    <id>http://tmyam.github.io/blog/2013/11/05/xcode5-mac-app-running-on-lion</id>
    <content type="html"><![CDATA[<h2>前因</h2>

<p>最近mac操作系统升级到了Mavericks(10.9)，编程工具Xcode也升级到了5.0，但是升级之后问题多多。
先是以前创建的mac app工程使用到第三方framework的地方，无法编译通过了，其次就是编译出的程序在Lion(10.7)系统下无法运行了，要做兼容的话，真是让人头疼。</p>

<!-- more -->


<h2>解决</h2>

<h3>引用第三方framework</h3>

<p>原本mac app开发使用的第三方framework是不需要签名的，但是系统升级到Mavericks，Xcode升级到5.0后，再引用无签名的第三方framework时就无法编译通过了，这对于使用资源是很不利的。</p>

<blockquote><p>/Users/&hellip;/xxx.app: code object is not signed at all
In subcomponent: /Users/&hellip;/xxx.app/Contents/Frameworks/xxx.framework
Command /usr/bin/codesign failed with exit code 1</p></blockquote>

<p>解决方案：</p>

<ul>
<li><p>方案1: 这个问题只出现在Mavericks + Xcode5.0下面，可能是一个系统bug，所以可以选择降系统。（比较麻烦）</p></li>
<li><p>方案2: 可以找到第三方framework的开源文件，自己使用签名进行编译。（不够通用）</p></li>
<li><p>方案3: 在工程的 <code>Other Code Signing Flags</code> 栏加入 <code>--deep</code> 给第三方framework签名。<a href="http://support.hockeyapp.net/discussions/problems/14709-code-sign-error-in-xcode-501-for-os-x-target">参考链接</a></p></li>
</ul>


<h3>Lion(10.7)的兼容</h3>

<p>Mavericks(10.9) + Xcode5.0创建的mac app程序无法在Lion(10.7)上面运行，就算选择了tag为10.7也不行。<br/>
究其原因发现，新创建的程序下面多了个 <em>Base.lproj</em> 文件夹，<em>MainMenu.xib</em> 文件就在里面，而在以前，<em>MainMenu.xib</em> 文件是在 <em>en.lproj</em> 文件夹下的。</p>

<p>而且系统也有相应的提示</p>

<blockquote><p>warning: Internationalization of /Users/&hellip;/Base.lproj/MainMenu.xib is not available when compiling for targets before Mac OS X 10.8</p></blockquote>

<ul>
<li>修改很简单，点击<em>MainMenu.xib</em>，找到如下图的位置，点击 <code>Base</code><br/>
<img src="/images/2013/11/05/xib_change.png" alt="temp" /><br/>
之后弹出对话框，如下图，点击 <code>Move</code>
<img src="/images/2013/11/05/xib_move.png" alt="temp" /> <br/>
工程中的<code>Base.lproj</code>文件夹已经没有用了，可以选择删除。</li>
</ul>


<p>这样编译出的app就可以兼容Lion(10.7)了。</p>
]]></content>
  </entry>
  
</feed>
