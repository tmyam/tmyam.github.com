<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 树莓派 | tmyam's blog]]></title>
  <link href="https://tmyam.github.io/blog/categories/shu-mei-pai/atom.xml" rel="self"/>
  <link href="https://tmyam.github.io/"/>
  <updated>2017-03-28T16:14:51+08:00</updated>
  <id>https://tmyam.github.io/</id>
  <author>
    <name><![CDATA[tmyam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SVN仓库备份和迁移]]></title>
    <link href="https://tmyam.github.io/blog/2017/03/28/svncang-ku-qian-yi-he-he-bing/"/>
    <updated>2017-03-28T15:09:11+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/03/28/svncang-ku-qian-yi-he-he-bing</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>本文主要是讲如何将多个不同地址的SVN仓库进行备份，和根据需要进行合并。</p>

<h2>仓库备份</h2>

<ul>
<li><strong>svnadmin dump</strong></li>
</ul>


<p>1、备份方式多样
2、如果版本数过多，dump的过程将非常慢
3、备份耗时，恢复更耗时
4、备份时数据变大，恢复后数据可能会变小
5、库下的<code>passwd</code>和<code>authz</code>不会备份</p>

<!--more-->


<p>在需要备份SVN仓库的服务器上，</p>

<pre><code class="sh"># 压缩备份
sudo svnadmin dump /path/repository | sudo gzip &gt; /path/repository-backup.gz.2017-03-28
# 不压缩备份
sudo svnadmin dump /path/repository &gt; /path/repository-backup.2017-03-28
</code></pre>

<h2>仓库迁移</h2>

<ul>
<li>使用FTP等工具，将备份的文件传输到目的服务器上，例如 <code>/home</code>目录下</li>
</ul>


<h2>仓库合并</h2>

<ul>
<li>在目的服务器上创建一个主仓库 <code>/path/main_repository</code></li>
<li><p>在本地checkout目的服务器的主仓库</p></li>
<li><p>如果需要将迁移的仓库存储到SVN中指定的目录 <code>A</code> 下，则在本地创建这个指定的目录 <code>A</code>，并用svn工具提交到目的服务器。然后登录目的服务器：</p></li>
</ul>


<pre><code class="sh"># 解压缩合并
sudo zcat /home/repository-backup.gz.2017-03-28 | sudo svnadmin load /path/main_repository --parent-dir A

# 不解压缩合并
sudo svnadmin load /path/main_repository --parent-dir A  &lt; /home/repository-backup.2017-03-28
</code></pre>

<p>参数 <code>--parent-dir</code> 是指定版本库<code>main_repository</code>下的具体路径，这里是第一级目录<code>A</code>.</p>

<ul>
<li>如果不用迁移到指定目录下，只需要迁移到根目录下，则登录目的服务器：</li>
</ul>


<pre><code class="sh"># 解压缩合并
sudo zcat /home/repository-backup.gz.2017-03-28 | sudo svnadmin load /path/main_repository

# 不解压缩合并
sudo svnadmin load /path/main_repository &lt; /home/repository-backup.2017-03-28
</code></pre>

<p>这样就可以将多个仓库合并成一个仓库了。</p>

<h2>仓库恢复</h2>

<ul>
<li>如果仓库遇到不可修复的问题或者内容够乱，需要恢复到以前备份的仓库。</li>
<li>使用FTP等工具，将备份的文件传输到需要恢复的服务器上，例如 <code>/home</code>目录下</li>
<li>登录需要恢复的服务器</li>
</ul>


<pre><code class="sh"># 建立新的svn仓库
sudo svnadmin create /path/new_repository
# check
ls -l /path/new_repository
# 赋予组成员对所有新加入文件仓库的文件拥有相应的权限
sudo chmod -R g+rws /path/new_repository
# 导入没压缩数据
sudo svnadmin load /path/new_repository &lt; /home/repository-backup.2017-03-28
# 导入被压缩数据
sudo zcat /home/repository-backup.gz.2017-03-28 | sudo svnadmin load /path/new_repository
# 删除旧仓库
sudo rm -r /path/main_repository
# 修改新仓库名
sudo mv /path/new_repository /path/main_repository
# 修改权限
sudo chown -R www-data:subversion /path/main_repository
</code></pre>

<p><br/></p>

<h3>参考</h3>

<p><a href="http://www.jianshu.com/p/295b423d50ad">http://www.jianshu.com/p/295b423d50ad</a>
<a href="http://blog.chinaunix.net/uid-10449864-id-3048714.html">http://blog.chinaunix.net/uid-10449864-id-3048714.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下搭建SVN服务]]></title>
    <link href="https://tmyam.github.io/blog/2017/03/28/linuxxia-da-jian-svnfu-wu/"/>
    <updated>2017-03-28T11:40:39+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/03/28/linuxxia-da-jian-svnfu-wu</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>最近打算迁移自己项目的SVN代码，这里对搭建SVN服务进行一下回顾。</p>

<h2>相关软件安装</h2>

<ul>
<li>使用SSH远程登录服务器</li>
</ul>


<pre><code class="sh">ssh pi@192.168.1.201 # 例如
</code></pre>

<!-- more -->


<ul>
<li>安装软件</li>
</ul>


<pre><code class="sh">sudo apt-get install subversion
sudo apt-get install apache2
sudo apt-get install libapache2-svn
</code></pre>

<p>其中subversion是SVN必须的，apache2和libapache2-svn是为了配置SVN服务器支持通过HTTP访问</p>

<h2>配置</h2>

<h3>相关用户、组的设定</h3>

<pre><code class="sh">sudo addgroup subversion
sudo usermod -G subversion -a www-data
</code></pre>

<h3>创建项目的目录</h3>

<pre><code class="sh">sudo mkdir /home/svn
</code></pre>

<h3>配置 Subversion</h3>

<ul>
<li>配置dav_svn.conf文件</li>
</ul>


<pre><code class="sh">sudo nano /etc/apache2/mods-available/dav_svn.conf
</code></pre>

<p>按照下面的步骤进行配置即可</p>

<p>1、删除<Location /svn>和DAV svn这两行前面的注释
<img src="/images/2017/03/28/svn_01.png" alt="temp" /></p>

<p>2、删除<code>SVNParentPath ...</code>前面的注释，并且把后面的路径替换成创建的SVN的项目路径<code>/home/svn</code>
<img src="/images/2017/03/28/svn_02.png" alt="temp" /></p>

<p>3、删除AuthType Basic、AuthName “Subversion Repository”前面的注释，去掉AuthUserFile所在行前面的注释，并且修改后面的路径为<code>/etc/subversion/dav_svn.passwd</code>，去掉AuthzSVNAccessFile所在行前面的注释，并且修改后面的路径为<code>/etc/subversion/dav_svn.authz</code>,删除Require valid-user和</Location>前面的注释，具体如下所示：
<img src="/images/2017/03/28/svn_03.png" alt="temp" /></p>

<p>其中：</p>

<p><code>/etc/subversion/dav_svn.passwd</code>文件是SVN用户名和密码的配置，指定基本用户验证的密码文件存放的位置</p>

<p><code>/etc/subversion/dav_svn.authz</code>文件是访问权限配置</p>

<ul>
<li>重启Apache2 WEB服务器</li>
</ul>


<pre><code class="sh">sudo /etc/init.d/apache2 restart
</code></pre>

<h3>创建SVN文件仓库</h3>

<p>1、创建指定的项目存放路径</p>

<pre><code class="sh">cd /home/svn
mkdir projects
</code></pre>

<p>2、更改版本库所示的用户、组</p>

<pre><code class="sh">sudo chown -R www-data:subversion projects
</code></pre>

<p>3、创建SVN仓库</p>

<pre><code class="sh">sudo svnadmin create /home/svn/projects
</code></pre>

<p>4、赋予组成员对所有新加入文件仓库的文件拥有相应的权限</p>

<pre><code class="sh">sudo chmod -R g+rws projects
</code></pre>

<h3>用户和权限配置</h3>

<p>1、创建dav_svn.passwd文件并添加用户admin001，执行命令后会提示要输入密码</p>

<pre><code class="sh">sudo htpasswd -c /etc/subversion/dav_svn.passwd admin001
</code></pre>

<p>继续添加新用户，去掉-c，否则会覆盖本文件</p>

<pre><code class="sh">sudo htpasswd /etc/subversion/dav_svn.passwd admin002
</code></pre>

<p>2、创建授权文件</p>

<pre><code class="sh">sudo nano /etc/subversion/dav_svn.authz
</code></pre>

<p>里面加入projects的权限配置，如</p>

<pre><code class="text">[groups]
administrator=admin001,admin002

[projects:/]
@administrator=rw
</code></pre>

<h3>重启SVN服务器</h3>

<pre><code class="sh">killall svnserve
svnserve -d -r /home/svn/
</code></pre>

<p>至此SVN服务器搭建完成，可以在终端执行来下面代码checkout项目了</p>

<pre><code class="sh">svn checkout http://hostname/svn/projects projects --username 用户名 --password 密码
</code></pre>

<h3>参考</h3>

<p><a href="http://blog.devzeng.com/blog/aliyun-ubuntu-svn-server.html">http://blog.devzeng.com/blog/aliyun-ubuntu-svn-server.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apt-get小记]]></title>
    <link href="https://tmyam.github.io/blog/2017/03/27/apt-getxiao-ji/"/>
    <updated>2017-03-27T15:20:08+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/03/27/apt-getxiao-ji</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>&emsp;&emsp;入门Linux的同志，刚开始最迫切想知道的，大概一个是中文输入法，另一个就是怎么安装软件。</p>

<p>&emsp;&emsp;在Windows下安装软件，我们只需要有exe文件，然后双击，下一步直接OK就可以了。但在Linux下，不是这样的。每个Linux的发行版，比如Debian，都会维护一个自己的软件仓库，我们常用的几乎所有软件都在这里面。这里面的软件绝对安全，而且绝对的能正常安装。</p>

<p>&emsp;&emsp;那我们要怎么安装呢？在Debian下，我们维护一个源列表，源列表里面都是一些网址信息，这每一条网址就是一个源，这个地址指向的数据标识着这台源服务器上有哪些软件可以安装使用。</p>

<!-- more -->


<h2>更新软件源</h2>

<pre><code class="sh">sudo apt-get update
</code></pre>

<p>这个命令，会同步源服务器的源列表（APT服务器的RPM索引清单置于base资料夹内，使用者端电脑取得base资料夹内的bz2 RPM索引清单压缩档后，会将其解压置放于/var/state/apt/lists/）。</p>

<p>使用者使用apt-get install 或apt-get dist-upgrade 指令的时候，就会将这个资料夹内的资料和使用者端电脑内的RPM资料库比对，如此一来就可以知道那些RPM已安装、未安装、或是可以升级的。</p>

<h2>更新软件(upgrade)</h2>

<pre><code class="sh">sudo apt-get upgrade
</code></pre>

<p>这个命令，会把本地已安装的软件，与刚下载的软件源里对应软件的版本进行对比，如果发现已安装的软件版本太低，就会提示你更新。</p>

<h2>更新软件(dist-upgrade)</h2>

<pre><code class="sh">sudo apt-get dist-upgrade
</code></pre>

<p>如果这个包没有发布更新，就不管它；如果发布了更新，就把包下载到电脑上，并安装。</p>

<h2>upgrade与dist-upgrade的关系</h2>

<p>由于包与包之间存在各种依赖关系。upgrade只是简单的更新包，不管这些依赖，它不添加包，或是删除包。而dist-upgrade可以根据依赖关系的变化，添加包，删除包。</p>

<ul>
<li><p>upgrade:系统将现有的Package升级,如果有相依性的问题,而此相依性需要安装其它新的Package或影响到其它Package的相依性时,此Package就不会被升级,会保留下来。</p></li>
<li><p>dist-upgrade:可以聪明的解决相依性的问题,如果有相依性问题,需要安装/移除新的Package,就会试着去安装/移除它. (所以通常这个会被认为是有点风险的升级) 。</p></li>
</ul>


<p>例如软件包 a 原先依赖 b c d，但是在源里面可能已经升级了，现在是 a 依赖 b c e。这种情况下，dist-upgrade 会删除 d 安装 e，并把 a 软件包升级，而 upgrade 会认为依赖关系改变而拒绝升级 a 软件包。</p>

<h2>常用命令</h2>

<ul>
<li>安装软件</li>
</ul>


<pre><code class="sh">sudo apt-get install package1 package2 package3……
</code></pre>

<ul>
<li>卸载软件</li>
</ul>


<pre><code class="sh">sudo apt-get remove package1 package2 package3……
</code></pre>

<ul>
<li>卸载并清除配置</li>
</ul>


<pre><code class="sh">sudo apt-get remove --purge package1
</code></pre>

<ul>
<li>删除包及其依赖的软件包+配置文件等</li>
</ul>


<pre><code class="sh">sudo apt-get autoremove --purge package1
</code></pre>

<ul>
<li>搜索软件包</li>
</ul>


<pre><code class="sh">sudo apt-cache search package1 package2 package3……
</code></pre>

<ul>
<li>使用 dselect 升级</li>
</ul>


<pre><code class="sh">sudo apt-get dselect-upgrade 
</code></pre>

<ul>
<li>了解使用依赖</li>
</ul>


<pre><code class="sh">sudo apt-cache depends package1
</code></pre>

<ul>
<li>查看该包被哪些包依赖</li>
</ul>


<pre><code class="sh">sudo apt-cache rdepends package1
</code></pre>

<ul>
<li>下载该包的源代码</li>
</ul>


<pre><code class="sh">sudo apt-get source package1
</code></pre>

<ul>
<li>清理下载文件的存档</li>
</ul>


<pre><code class="sh">sudo apt-get clean 
</code></pre>

<ul>
<li>清理过时的包</li>
</ul>


<pre><code class="sh">sudo apt-get autoclean
</code></pre>

<ul>
<li>检查是否有损坏的依赖</li>
</ul>


<pre><code class="sh">sudo apt-get check
</code></pre>

<h2>更换软件源</h2>

<p>如果使用 apt-get 遇到速度慢或者源不存在等错误，可能需要更换源，<a href="http://shumeipai.nxez.com/2013/08/31/raspbian-chinese-software-source.html">参考</a>。</p>

<h2>树莓派命令</h2>

<ul>
<li><p>树莓派固件 <br/>
可以理解为树莓派的BIOS，引导程序之类的，这一部分博通不开源，给树莓派增加新功能主要通过固件来实现。</p></li>
<li><p>安装rpi-update</p></li>
</ul>


<pre><code class="sh">sudo curl -L --output /usr/bin/rpi-update https://raw.githubusercontent.com/Hexxeh/rpi-update/master/rpi-update\
 &amp;&amp; sudo chmod +x /usr/bin/rpi-update
</code></pre>

<ul>
<li>升级firmware</li>
</ul>


<pre><code class="sh">sudo rpi-update
</code></pre>

<h3>参考</h3>

<p><a href="http://www.baiyuxiong.com/?p=529">http://www.baiyuxiong.com/?p=529</a>
<a href="http://blog.csdn.net/tiankongtiankong01/article/details/53869975">http://blog.csdn.net/tiankongtiankong01/article/details/53869975</a>
<a href="http://blog.csdn.net/huayucong/article/details/54178049">http://blog.csdn.net/huayucong/article/details/54178049</a>
<a href="https://item.congci.com/-/content/shumeipai-raspbian-gujian-shengji-rpi-update">https://item.congci.com/-/content/shumeipai-raspbian-gujian-shengji-rpi-update</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识树莓派]]></title>
    <link href="https://tmyam.github.io/blog/2017/03/07/chu-shi-shu-mei-pai/"/>
    <updated>2017-03-07T20:39:37+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/03/07/chu-shi-shu-mei-pai</id>
    <content type="html"><![CDATA[<p>环境: <code>(Mac 版本 10.11 )</code></p>

<h2>前言</h2>

<p>&emsp;&emsp;现在的计算机硬件已经很发达了，成本也在不断的降低。树莓派就是一个价格低廉的单板计算机，它拥有计算机的功能，还有许多扩展接口，无论是学习还是DIY都是不错的选择。到了树莓派3b，性能也有了很大的提升。 <br/>
&emsp;&emsp;学习Linux有很多种方式，虚拟机无疑是一种简单的方式，使用树莓派是另外一种方式，而且可以任意折腾，还有许多虚拟机办不到的事（比如集群）。由于树莓派使用的是ARM架构的CPU，Windows系统是装不了（虽然有Win10 IOT，但是基本没啥用）。尽管可以安装Linux，但是和桌面版相比，系统的支持还是弱了点。 <br/>
&emsp;&emsp;我选择树莓派，一是看中了它可以安装完整的Linux系统，无论是学习还是教别人都说不错的选择，二是看中了它的低功耗，据网友估算树莓派3b的功耗不连屏幕，U盘大概在2.5w左右，三是看中了它的DIY功能，谁小时候没有想要动手DIY的心情，只是那时候没有这个条件，现在年龄大了又玩不动了，如果有好的想法还是可以玩玩，毕竟设备就在手上。</p>

<!-- more -->


<p> <img src="/images/2017/03/08/raspbianpi3b.jpg" alt="temp" /></p>

<h2>制作系统</h2>

<ul>
<li><p>下载系统包 <a href="https://www.raspberrypi.org/downloads/">(下载地址)</a>  ,下载完成后解压缩，得到 <code>2017-03-02-raspbian-jessie-lite.img</code>系统镜像文件。 <br/>
这里使用的镜像是 <code>2017-03-02-raspbian-jessie-lite</code>版本，lite是精简版，没有GUI图形界面，可以更省空间，也更省内存。</p></li>
<li><p>制作镜像 <br/>
以下步骤适用于Mac OS X: <br/>
1、打开终端 <code>cd</code> 到<code>2017-03-02-raspbian-jessie-lite.img</code>镜像所在目录  <br/>
2、插入你的TF卡，运行 <code>df –h</code> 会发现多了一个<strong>/dev/disk2s1</strong>的设备(disk2s1不同的机器名称可能不同) <br/>
3、卸载TF卡，输入<code>sudo diskutil unmount /dev/disk2s1</code> <br/>
4、写入镜像： <br/>
输入 <code>sudo dd bs=4m if=2017-03-02-raspbian-jessie-lite.img of=/dev/rdisk2</code> <br/>
这里的<strong>rdisk2</strong>是根据<strong>disk2s1</strong>来的，根据自己的数字修改。 <br/>
5、写入的过程需要一点时间，大概4分钟左右。当dd完成了它的工作以后，将TF卡安全移除。可以输入<code>diskutil unmountdisk /dev/disk2</code>来移除。</p></li>
</ul>


<h2>修改密码</h2>

<ul>
<li>经过上面的步骤系统已经写进了卡里，但是还无法直接应ssh登录。因为树莓派2016-11-25更新版本时，ssh默认关闭了。
要使用ssh，则需要在TF卡<strong>/root</strong>目录下新建一个ssh文件。
电脑上插上TF卡</li>
</ul>


<pre><code class="sh ">cd /volumes/boot
sudo touch ssh
</code></pre>

<p>这样，树莓派开机时默认启动ssh。</p>

<ul>
<li>准备路由器，网线，将树莓派接入路由器，查看路由器中树莓派的IP，然后使用</li>
</ul>


<pre><code class="sh ">ssh pi@192.168.1.111
</code></pre>

<p>登录，默认密码为<code>raspberry</code>。</p>

<ul>
<li>修改pi密码</li>
</ul>


<pre><code class="sh">sudo passwd pi
</code></pre>

<p>重新开启root账号，可由pi用户登录后，在终端执行</p>

<pre><code class="sh">sudo passwd root
</code></pre>

<p>执行此命令后系统会提示输入两遍的root密码，输入你想设的密码即可，然后在执行解锁root账户。</p>

<pre><code class="sh">sudo passwd --unlock root
</code></pre>

<ul>
<li>切换用户</li>
</ul>


<pre><code class="sh">su root
su pi
</code></pre>

<h2>配置网络</h2>

<ul>
<li>这里打算让树莓派作为服务器使用，所以要配置静态IP，为了携带方便，还要满足这些条件。 <br/>
1、没有WIFI时，插上网线可以连接，有线网卡地址为静态IP。 <br/>
2、没插网线，有WIFI时，连接WIFI，WIFI网卡地址为静态IP。 <br/>
3、多个WIFI信号时，优先连接优先级高的信号。</li>
<li>编辑网络配置文件</li>
</ul>


<pre><code class="sh">sudo nano /etc/network/interfaces
</code></pre>

<p>我的初始显示是这样的</p>

<pre><code class="text">auto lo
iface lo inet loopback

iface eth0 inet manual

allow-hotplug wlan0
iface wlan0 inet manual
    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf

allow-hotplug wlan1
iface wlan1 inet manual
    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
</code></pre>

<p>这里进行修改：</p>

<pre><code class="text">auto lo
iface lo inet loopback

#auto eth0
iface eth0 inet static      # 使用静态IP
address 192.168.1.200       # 有线网卡的静态IP
netmask 255.255.255.0       # 有线网卡的子网掩码
gateway 192.168.1.1         # 有线网卡的网关
#dns-nameservers 192.168.1.1

auto wlan0                  # 自动连接WIFI
allow-hotplug wlan0         # WIFI允许热插拔
iface wlan0 inet static     # 使用静态IP
address 192.168.1.201       # WIFI网卡的静态IP
netmask 255.255.255.0       # WIFI网卡的子网掩码
gateway 192.168.1.1         # WIFI网卡的网关
#dns-nameservers 192.168.1.1
#wap-essid not-telling-you
#wap-psk not telling-you-this-either
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
</code></pre>

<p>这里 注释掉auto eth0，是因为它会导致树莓派开机时等待有线网卡动态分配IP，但实际上你的有线网口并没有连接到路由器，这里会让内核等待更长的时间，从而拖慢开机速度。</p>

<ul>
<li>添加WIFI信息</li>
</ul>


<pre><code class="sh">sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
</code></pre>

<p>修改为</p>

<pre><code class="text">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
 ssid="TP-Link1234"     # 信号名
 psk="xxxx"             # 密码
 priority=5             # 优先级
}

network={
 ssid="Tenda_1234"
 psk="xxxx"
 priority=1
}
</code></pre>

<p>上面的信号名，密码，优先级均需要根据自己的情况进行更改。</p>

<ul>
<li>重启</li>
</ul>


<pre><code class="sh ">sudo reboot
</code></pre>

<p>ifconfig 查看各网卡信息
iwconfig 查看当前联网的信息
<strong>注意：</strong>每次切换网络（有线变无线，无线变有线）均需要重新启动。</p>

<h2>安装vim</h2>

<pre><code class="sh">sudo apt-get update             # 更新软件源列表
sudo apt-get upgrade            # 更新系统 
sudo apt-get remove vim-common  # 删除vim   
sudo apt-get install vim        #安装vim 
</code></pre>

<h2>安装中文字体</h2>

<p>树莓派系统默认不支持中文，需要自己安装</p>

<pre><code class="sh">sudo apt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy
</code></pre>

<h2>备份系统</h2>

<p>我想大部分人都不想折腾同样的东西吧，有备无患。</p>

<ul>
<li>Windows系统下官方推荐的工具 Win32DiskImager <a href="http://sqdownb.onlinedown.net/down/Win32DiskImager-0.9.5-binary.zip">下载地址</a></li>
<li>在Windows系统下插上你的TF卡，新建一个文本，文件扩展名改为<code>.img</code>。</li>
<li>打开win32Diskimager</li>
<li>Image File 选择刚才你创建的.img文件路径</li>
<li>Device 选择你的TF卡盘符</li>
<li>然后点Read</li>
</ul>


<h2>关机命令</h2>

<pre><code class="sh">sudo poweroff       #关机
</code></pre>

<h2>查看系统信息</h2>

<pre><code class="sh">hostnamectl
</code></pre>

<h2>测试TF卡速度</h2>

<ul>
<li>安装测试磁盘速度的软件</li>
</ul>


<pre><code class="sh">sudo apt-get install hdparm 
</code></pre>

<ul>
<li>测速（读）</li>
</ul>


<pre><code class="sh">sudo hdparm -Tt /dev/mmcblk0
</code></pre>

<p>显示结果</p>

<blockquote><p>/dev/mmcblk0: <br/>
 Timing cached reads:   1280 MB in  2.00 seconds = 640.05 MB/sec <br/>
 Timing buffered disk reads:  66 MB in  3.04 seconds =  21.70 MB/sec</p></blockquote>

<ul>
<li>测试（写）</li>
</ul>


<pre><code class="sh">time dd if=/dev/zero of=~/test.img bs=4k count=100000
rm ~/test.img
</code></pre>

<p>显示结果</p>

<blockquote><p>100000+0 records in <br/>
100000+0 records out <br/>
409600000 bytes (410 MB) copied, 23.1721 s, 17.7 MB/s</p></blockquote>

<p><br/></p>

<h3>参考</h3>

<p><a href="http://www.jianshu.com/p/c0b589b380a1">http://www.jianshu.com/p/c0b589b380a1</a>
<a href="http://blog.csdn.net/u014271612/article/details/53767669">http://blog.csdn.net/u014271612/article/details/53767669</a>
<a href="http://blog.csdn.net/shaopengf/article/details/52411926">http://blog.csdn.net/shaopengf/article/details/52411926</a>
<a href="http://blog.csdn.net/shooter32/article/details/45126525">http://blog.csdn.net/shooter32/article/details/45126525</a>
<a href="http://shumeipai.nxez.com/2014/03/31/raspberry-pi-disk-speed-problem-solving.html">http://shumeipai.nxez.com/2014/03/31/raspberry-pi-disk-speed-problem-solving.html</a></p>
]]></content>
  </entry>
  
</feed>
