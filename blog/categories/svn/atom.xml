<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: svn | tmyam's blog]]></title>
  <link href="https://tmyam.github.io/blog/categories/svn/atom.xml" rel="self"/>
  <link href="https://tmyam.github.io/"/>
  <updated>2017-06-10T14:25:09+08:00</updated>
  <id>https://tmyam.github.io/</id>
  <author>
    <name><![CDATA[tmyam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux安装SVN服务]]></title>
    <link href="https://tmyam.github.io/blog/2017/04/15/linuxan-zhuang-svnfu-wu/"/>
    <updated>2017-04-15T15:49:26+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/04/15/linuxan-zhuang-svnfu-wu</id>
    <content type="html"><![CDATA[<h2>安装SVN软件</h2>

<pre><code class="sh">sudo apt-get install subversion
</code></pre>

<h2>创建目录</h2>

<ul>
<li>新建仓库目录</li>
</ul>


<!--more-->


<pre><code class="sh">sudo mkdir -p /home/svn/projects
</code></pre>

<p>一般来说，可以创建在任何位置</p>

<ul>
<li>生成svn仓库</li>
</ul>


<pre><code class="sh">sudo svnadmin create /home/svn/projects
</code></pre>

<h2>配置</h2>

<ul>
<li>修改仓库配置</li>
</ul>


<pre><code class="sh">cd /home/svn/projects/conf/ # 进入配置文件夹
</code></pre>

<ul>
<li>svnserve.conf 配置服务器文件</li>
</ul>


<pre><code class="sh">sudo nano svnserve.conf
</code></pre>

<pre><code class="sh">[general]
# 匿名访问的权限，可以是read,write,none,默认为read
anon-access = none
# 认证用户的权限，可以是read,write,none,默认为write
auth-access = write
# 密码数据库的路径，去掉前面的#
password-db = passwd
# 配置权限文件
authz-db = authz
# 仓库名 - 根据自己情况修改
realm = projects
</code></pre>

<p><strong>注意</strong>：所有的行都必须顶格，否则报错。</p>

<ul>
<li>authz 配置权限</li>
</ul>


<pre><code class="sh">sudo nano authz
</code></pre>

<pre><code class="sh">[groups] 
# harry_and_sally = harry,sally
# harry_sally_and_joe = harry,sally,&amp;joe
admin = tmyam # admin是用户组，tmyam是用户
test = one，two

[projects:/]
@admin = rw  # admin用户组的所有用户，对仓库有读写权限
@test = r    # test 用户组的所有用户，对仓库有只读权限

[projects:/test]
one = rw    # one用户对仓库下的test文件夹有读写权限
</code></pre>

<ul>
<li>passwd 配置密码</li>
</ul>


<pre><code class="sh">sudo nano passwd
</code></pre>

<pre><code class="sh">[users]
# harry = harryssecret
# sally = sallyssecret
tmyam = 1234
one = 1234
two = 1234
</code></pre>

<h2>启动服务</h2>

<pre><code class="sh">killall svnserve
svnserve -d -r /home/svn
</code></pre>

<pre><code class="sh"># 查看启动情况
ps aux | grep svn

# 查看端口使用情况，SVN默认端口：3690
netstat -tln
</code></pre>

<h2>设置开机自启动</h2>

<ul>
<li>查看svnserve位置</li>
</ul>


<pre><code class="sh">whereis svnserve
</code></pre>

<p><strong>注意</strong>：我们用终端操作的时候，可以直接使用svnserve命令，
但是在/etc/rc.local 文件中必须写上完整的路径！</p>

<pre><code class="sh">sudo nano /etc/rc.local
</code></pre>

<p>在<code>exit 0</code>之前添加：</p>

<blockquote><p>/usr/bin/svnserve -d -r /home/svn</p></blockquote>

<h2>连接</h2>

<p>你的电脑使用 <code>svn://你的域名/projects</code> 进行连接。</p>

<h3>参考</h3>

<p><a href="http://shumeipai.nxez.com/2013/08/27/building-svn-come-in-raspberry.html">http://shumeipai.nxez.com/2013/08/27/building-svn-come-in-raspberry.html</a> <br/>
<a href="http://www.cnblogs.com/LusYoHo/p/6056377.html">http://www.cnblogs.com/LusYoHo/p/6056377.html</a> <br/>
<a href="http://blog.csdn.net/testcs_dn/article/details/45395645">http://blog.csdn.net/testcs_dn/article/details/45395645</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVN仓库备份和迁移]]></title>
    <link href="https://tmyam.github.io/blog/2017/03/28/svncang-ku-qian-yi-he-he-bing/"/>
    <updated>2017-03-28T15:09:11+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/03/28/svncang-ku-qian-yi-he-he-bing</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>本文主要是讲如何将多个不同地址的SVN仓库进行备份，和根据需要进行合并。</p>

<h2>仓库备份</h2>

<ul>
<li><strong>svnadmin dump</strong></li>
</ul>


<p>1、备份方式多样 <br/>
2、如果版本数过多，dump的过程将非常慢 <br/>
3、备份耗时，恢复更耗时 <br/>
4、备份时数据变大，恢复后数据可能会变小 <br/>
5、库下的<code>passwd</code>和<code>authz</code>不会备份</p>

<!--more-->


<ul>
<li>全备份</li>
</ul>


<p>在需要备份SVN仓库的服务器上，</p>

<pre><code class="sh"># 压缩备份
sudo svnadmin dump /path/repository | sudo gzip &gt; /path/repository-backup.gz.2017-03-28

# 不压缩备份
sudo svnadmin dump /path/repository &gt; /path/repository-backup.2017-03-28
</code></pre>

<ul>
<li>只备份指定的子目录</li>
</ul>


<p>1、导出整个库的内容</p>

<pre><code class="sh">svnadmin dump /path/repository &gt; /path/repository-backup.2017-03-28
</code></pre>

<p>2、从备份文件中过滤出要导出的目录(可以过滤多个目录)</p>

<pre><code class="sh">cat /path/repository-backup.2017-03-28 | svndumpfilter  include /projects &gt; /path/projects-backup.2017-03-28
</code></pre>

<p>3、选择是否压缩</p>

<pre><code class="sh">gzip /path/projects-backup.2017-03-28
</code></pre>

<p><strong>注意</strong>: <code>projects</code>目录必须是没有<strong>rename</strong>的目录，如果是<strong>rename</strong>后的目录，则导出的文件都是空记录，使用<strong>rename</strong>前的目录名导出的备份还是<strong>rename</strong>前的。 <br/>
为了正确导出<strong>rename</strong>后的文件，假如<strong>rename</strong>前的目录名为<code>apple</code>，步骤2改为<code>include /projects /apple</code>，这样就可以导出<strong>rename</strong>后的文件了。</p>

<h2>仓库迁移</h2>

<ul>
<li>使用FTP等工具，将备份的文件传输到目的服务器上，例如 <code>/home</code>目录下</li>
</ul>


<h2>仓库合并</h2>

<ul>
<li>在目的服务器上创建一个主仓库 <code>/path/main_repository</code></li>
<li><p>在本地checkout目的服务器的主仓库</p></li>
<li><p>如果需要将迁移的仓库存储到SVN中指定的目录 <code>A</code> 下，则在本地创建这个指定的目录 <code>A</code>，并用svn工具提交到目的服务器。然后登录目的服务器：</p></li>
</ul>


<pre><code class="sh"># 解压缩合并
sudo zcat /home/repository-backup.gz.2017-03-28 | sudo svnadmin load /path/main_repository --parent-dir A

# 不解压缩合并
sudo svnadmin load /path/main_repository --parent-dir A  &lt; /home/repository-backup.2017-03-28
</code></pre>

<p>参数 <code>--parent-dir</code> 是指定版本库<code>main_repository</code>下的具体路径，这里是第一级目录<code>A</code>.</p>

<ul>
<li>如果不用迁移到指定目录下，只需要迁移到根目录下，则登录目的服务器：</li>
</ul>


<pre><code class="sh"># 解压缩合并
sudo zcat /home/repository-backup.gz.2017-03-28 | sudo svnadmin load /path/main_repository

# 不解压缩合并
sudo svnadmin load /path/main_repository &lt; /home/repository-backup.2017-03-28
</code></pre>

<p>这样就可以将多个仓库合并成一个仓库了。</p>

<h2>仓库恢复</h2>

<ul>
<li>如果仓库遇到不可修复的问题或者内容够乱，需要恢复到以前备份的仓库。</li>
<li>使用FTP等工具，将备份的文件传输到需要恢复的服务器上，例如 <code>/home</code>目录下</li>
<li>登录需要恢复的服务器</li>
</ul>


<pre><code class="sh"># 建立新的svn仓库
sudo svnadmin create /path/new_repository

# check
ls -l /path/new_repository

# 赋予组成员对所有新加入文件仓库的文件拥有相应的权限
sudo chmod -R g+rws /path/new_repository

# 导入没压缩数据
sudo svnadmin load /path/new_repository &lt; /home/repository-backup.2017-03-28

# 导入被压缩数据
sudo zcat /home/repository-backup.gz.2017-03-28 | sudo svnadmin load /path/new_repository

# 删除旧仓库
sudo rm -r /path/main_repository

# 修改新仓库名
sudo mv /path/new_repository /path/main_repository

# 修改权限
sudo chown -R www-data:subversion /path/main_repository
</code></pre>

<p>如果是清空svn仓库，则只要去掉导入的步骤就可以了。</p>

<p><br/></p>

<h3>参考</h3>

<p><a href="http://www.jianshu.com/p/295b423d50ad">http://www.jianshu.com/p/295b423d50ad</a> <br/>
<a href="http://blog.chinaunix.net/uid-10449864-id-3048714.html">http://blog.chinaunix.net/uid-10449864-id-3048714.html</a> <br/>
<a href="http://blog.chinaunix.net/uid-725717-id-3147440.html">http://blog.chinaunix.net/uid-725717-id-3147440.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下搭建可以http访问的SVN服务]]></title>
    <link href="https://tmyam.github.io/blog/2017/03/28/linuxxia-da-jian-svnfu-wu/"/>
    <updated>2017-03-28T11:40:39+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/03/28/linuxxia-da-jian-svnfu-wu</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>最近打算迁移自己项目的SVN代码，这里对搭建SVN服务进行一下回顾。</p>

<h2>相关软件安装</h2>

<ul>
<li>使用SSH远程登录服务器</li>
</ul>


<pre><code class="sh">ssh pi@192.168.1.201 # 例如
</code></pre>

<!-- more -->


<ul>
<li>安装软件</li>
</ul>


<pre><code class="sh">sudo apt-get install subversion
sudo apt-get install apache2
sudo apt-get install libapache2-svn
</code></pre>

<p>其中subversion是SVN必须的，apache2和libapache2-svn是为了配置SVN服务器支持通过HTTP访问</p>

<h2>配置</h2>

<h3>相关用户、组的设定</h3>

<pre><code class="sh">sudo addgroup subversion
sudo usermod -G subversion -a www-data
</code></pre>

<h3>创建项目的目录</h3>

<pre><code class="sh">sudo mkdir /home/svn
</code></pre>

<h3>配置 Subversion</h3>

<ul>
<li>配置dav_svn.conf文件</li>
</ul>


<pre><code class="sh">sudo nano /etc/apache2/mods-available/dav_svn.conf
</code></pre>

<p>按照下面的步骤进行配置即可</p>

<p>1、删除<Location /svn>和DAV svn这两行前面的注释
<img src="/images/2017/03/28/svn_01.png" alt="temp" /></p>

<p>2、删除<code>SVNParentPath ...</code>前面的注释，并且把后面的路径替换成创建的SVN的项目路径<code>/home/svn</code>
<img src="/images/2017/03/28/svn_02.png" alt="temp" /></p>

<p>3、删除AuthType Basic、AuthName “Subversion Repository”前面的注释，去掉AuthUserFile所在行前面的注释，并且修改后面的路径为<code>/etc/subversion/dav_svn.passwd</code>，去掉AuthzSVNAccessFile所在行前面的注释，并且修改后面的路径为<code>/etc/subversion/dav_svn.authz</code>,删除Require valid-user和</Location>前面的注释，具体如下所示：
<img src="/images/2017/03/28/svn_03.png" alt="temp" /></p>

<p>其中：</p>

<p><code>/etc/subversion/dav_svn.passwd</code>文件是SVN用户名和密码的配置，指定基本用户验证的密码文件存放的位置</p>

<p><code>/etc/subversion/dav_svn.authz</code>文件是访问权限配置</p>

<ul>
<li>重启Apache2 WEB服务器</li>
</ul>


<pre><code class="sh">sudo /etc/init.d/apache2 restart
</code></pre>

<h3>创建SVN文件仓库</h3>

<p>1、创建指定的项目存放路径</p>

<pre><code class="sh">cd /home/svn
mkdir projects
</code></pre>

<p>2、更改版本库所示的用户、组</p>

<pre><code class="sh">sudo chown -R www-data:subversion projects
</code></pre>

<p>3、创建SVN仓库</p>

<pre><code class="sh">sudo svnadmin create /home/svn/projects
</code></pre>

<p>4、赋予组成员对所有新加入文件仓库的文件拥有相应的权限</p>

<pre><code class="sh">sudo chmod -R g+rws projects
</code></pre>

<h3>用户和权限配置</h3>

<p>1、创建dav_svn.passwd文件并添加用户admin001，执行命令后会提示要输入密码</p>

<pre><code class="sh">sudo htpasswd -c /etc/subversion/dav_svn.passwd admin001
</code></pre>

<p>继续添加新用户，去掉-c，否则会覆盖本文件</p>

<pre><code class="sh">sudo htpasswd /etc/subversion/dav_svn.passwd admin002
</code></pre>

<p>2、创建授权文件</p>

<pre><code class="sh">sudo nano /etc/subversion/dav_svn.authz
</code></pre>

<p>里面加入projects的权限配置，如</p>

<pre><code class="text">[groups]
administrator=admin001,admin002

[projects:/]
@administrator=rw
</code></pre>

<h3>重启SVN服务器</h3>

<pre><code class="sh">killall svnserve
svnserve -d -r /home/svn/
</code></pre>

<p>至此SVN服务器搭建完成，可以在终端执行来下面代码checkout项目了</p>

<pre><code class="sh">svn checkout http://hostname/svn/projects projects --username 用户名 --password 密码
</code></pre>

<h3>参考</h3>

<p><a href="http://blog.devzeng.com/blog/aliyun-ubuntu-svn-server.html">http://blog.devzeng.com/blog/aliyun-ubuntu-svn-server.html</a></p>
]]></content>
  </entry>
  
</feed>
