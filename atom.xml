<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tmyam's blog]]></title>
  <link href="https://tmyam.github.io/atom.xml" rel="self"/>
  <link href="https://tmyam.github.io/"/>
  <updated>2017-03-07T17:55:40+08:00</updated>
  <id>https://tmyam.github.io/</id>
  <author>
    <name><![CDATA[tmyam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cocoa binding]]></title>
    <link href="https://tmyam.github.io/blog/2016/04/08/cocoa-binding/"/>
    <updated>2016-04-08T10:17:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2016/04/08/cocoa-binding</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>cocoa binding一项可以让开发变得更加便捷的技能，网上的资料非常有限，所以在这里进行一下记录。概念约定:  <br/>
正向操作(转换) &mdash;> 代码控制的操作(转换)  <br/>
反向操作(转换) &mdash;> 用户界面操作控制(转换)</p>

<h2>简单的使用</h2>

<p>比如，有这样一个需求，监控 <strong>NSPopUpButton</strong> 的选择下标的变化：  <br/>
1. 可以用代码改变选择的下标  <br/>
2. 当用户在界面上选择改变下标时，可以监测到这种改变</p>

<!-- more -->  


<h4>1. 一般的做法</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 在xib中使用 IBOutlet 绑定控件，这样可以满足需求1</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span> <span class="p">,</span><span class="k">strong</span><span class="p">,</span><span class="n">nonnull</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">NSPopUpButton</span><span class="o">*</span>   <span class="n">popupButton</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 需求1</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">popupButton</span><span class="p">.</span><span class="n">indexOfSelectedItem</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用 IBAction 绑定action，可以满足需求2</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span> <span class="nf">popupButtonChangeIndex:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%ld&quot;</span><span class="p">,[</span><span class="n">sender</span> <span class="n">indexOfSelectedItem</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样虽然满足了需求，但是需要使用两个绑定，IBOutlet，IBAction，代码量较多。</p>

<h4>2. 使用bind</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">写法</span> <span class="mi">1</span> <span class="p">(</span><span class="err">定义属性</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 定义选择下标属性</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span> <span class="p">,</span><span class="k">assign</span><span class="p">)</span> <span class="bp">NSInteger</span>   <span class="n">index</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 主要是需要写这个set函数 // 需求2</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">setIndex:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">index</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">_Index</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%ld&quot;</span><span class="p">,</span><span class="n">index</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//需求1</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">写法</span> <span class="mi">2</span> <span class="p">(</span><span class="err">不定义属性</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 需求2 // 不定义属性，则需要一个值来保存选择的下标，并写出get方法</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">setIndex</span><span class="p">:(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="n">index</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">xx</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%ld&quot;</span><span class="p">,</span><span class="n">index</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span> <span class="n">index</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">xx</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//需求1</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">写法</span><span class="mi">1</span><span class="err">的好处是简便，写法</span><span class="mi">2</span><span class="err">的好处是不受限于属性的类型，比如</span><span class="n">xx</span><span class="err">可以自定义为</span><span class="bp">NSNumber</span><span class="err">类型。</span>
</span></code></pre></td></tr></table></div></figure>


<p>界面绑定，如下图  <br/>
<img src="https://tmyam.github.io/images/2016/04/08/bind_selectindex.png" alt="temp" />  <br/>
第一个红线标注的是选择绑定的对象，第二个标注的是绑定对象的属性，即<code>index</code>。
当然也可以不使用界面绑定，使用代码绑定。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">popupButton</span> <span class="nl">bind</span><span class="p">:</span><span class="s">@&quot;selectedIndex&quot;</span> <span class="nl">toObject</span><span class="p">:</span><span class="nb">self</span> <span class="nl">withKeyPath</span><span class="p">:</span><span class="s">@&quot;index&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">dealloc</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">unbind</span><span class="p">:</span><span class="s">@&quot;selectedIndex&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="s">@&quot;selectedIndex&quot;</span><span class="err">可以用</span><span class="n">NSSelectedIndexBinding</span><span class="err">代替</span>
</span></code></pre></td></tr></table></div></figure>


<h2>进阶</h2>

<h4>1. 绑定NSTextField</h4>

<p>输入变化是经常遇到的监测对象，绑定的方式可以实现限制输入内容的功能。</p>

<p>例如，下面是一个输入框，限定输入0~99。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 绑定的文本</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span> <span class="p">,</span><span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span><span class="o">*</span>     <span class="n">number</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 监听变化</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">setNumber:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">number</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">number</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">number</span> <span class="o">=</span> <span class="s">@&quot;0&quot;</span><span class="p">;</span> <span class="c1">//默认值</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">number</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_number</span> <span class="o">=</span> <span class="n">number</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在界面上绑定<strong>NSTextField</strong>的<strong>value</strong>。注意勾选红色标注      <br/>
<img src="https://tmyam.github.io/images/2016/04/08/bind_textfield.png" alt="temp" />   <br/>
当然，这样仅仅只是可以检测文本的输入变化，并不能限制输入的内容。还需要创建一个Formatter继承自系统的NSFormatter，并重写里面的函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">TMNumFormatter</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span> <span class="nf">stringForObjectValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">object</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">getObjectValue:</span><span class="p">(</span><span class="k">out</span> <span class="kt">id</span><span class="o">*</span><span class="p">)</span><span class="nv">object</span>
</span><span class='line'>              <span class="nf">forString:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">string</span>
</span><span class='line'>       <span class="nf">errorDescription:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">**</span><span class="p">)</span><span class="nv">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">object</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithString</span><span class="p">:</span><span class="n">string</span><span class="p">];</span><span class="c1">//必须这样写，否则bind会失效</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isPartialStringValid:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">partialString</span>
</span><span class='line'>            <span class="nf">newEditingString:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">**</span><span class="p">)</span><span class="nv">newString</span>
</span><span class='line'>            <span class="nf">errorDescription:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">**</span><span class="p">)</span><span class="nv">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">partialString</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="nb">self</span> <span class="nl">isInteger</span><span class="p">:</span><span class="n">partialString</span><span class="p">])</span> <span class="c1">// 判断是否为纯数字</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">partialString</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span>   <span class="c1">// 限制长度，最多两位</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="bp">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">partialString</span><span class="p">.</span><span class="n">length</span> <span class="p">;</span> <span class="n">i</span> <span class="o">++</span> <span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">unichar</span> <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="n">partialString</span> <span class="nl">characterAtIndex</span><span class="p">:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 限制大小</span>
</span><span class='line'>            <span class="bp">NSInteger</span> <span class="n">num</span> <span class="o">=</span> <span class="p">[</span><span class="n">partialString</span> <span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="mi">99</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 判断文本是否为数字</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> @param string 输入的文本</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> @return 是否是纯数字</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">isInteger:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">string</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSScanner</span><span class="o">*</span> <span class="n">scan</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSScanner</span> <span class="nl">scannerWithString</span><span class="p">:</span><span class="n">string</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">val</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">scan</span> <span class="nl">scanInteger</span><span class="p">:</span><span class="o">&amp;</span><span class="n">val</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">scan</span><span class="p">.</span><span class="n">isAtEnd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在xib中创建一个Formatter，并关联<strong>Outlets</strong>中的formatter，如下图：  <br/>
<img src="https://tmyam.github.io/images/2016/04/08/bind_formatter.png" alt="temp" /></p>

<h4>2. Value Transformer类型变换</h4>

<p>比如上边的例子，我想要的是一个数字类型，但是bind的默认类型却是NSString类型，这时就可以使用类型转换了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span> <span class="p">,</span><span class="k">strong</span><span class="p">)</span> <span class="bp">NSNumber</span><span class="o">*</span>     <span class="n">inter</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">setInter:</span><span class="p">(</span><span class="bp">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="nv">inter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_inter</span> <span class="o">=</span> <span class="n">inter</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">inter</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要创建一个继承自<strong>NSValueTransformer</strong>的类，重写里面的函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 正向：NSNumber --&gt; NSString</span>
</span><span class='line'><span class="c1">// 反向：NSString --&gt; NSNumber</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">TMValueTransformer</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 正向操作时，输出的类型（控件接收的类型）</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">Class</span><span class="p">)</span> <span class="nf">transformedValueClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="bp">NSString</span> <span class="k">class</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 是否允许反向操作，只有允许反向，reverseTransformedValue:函数才有用</span>
</span><span class='line'><span class="c1">// 如果为NO，则用户无法在界面上输入内容</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">allowsReverseTransformation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 正向输出，NSNumber --&gt; NSString</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">nullable</span> <span class="kt">id</span><span class="p">)</span><span class="nf">transformedValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">value</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">value</span> <span class="n">stringValue</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 反向输出，NSString --&gt; NSNumber</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">nullable</span> <span class="kt">id</span><span class="p">)</span><span class="nf">reverseTransformedValue:</span><span class="p">(</span><span class="n">nullable</span> <span class="kt">id</span><span class="p">)</span><span class="nv">value</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="l">@(</span><span class="p">[</span><span class="n">value</span> <span class="n">integerValue</span><span class="p">]</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>xib里面的绑定设置，如下图：  <br/>
<img src="https://tmyam.github.io/images/2016/04/08/bind_valuetransformer.png" alt="temp" /></p>

<h2>注意</h2>

<h4>1. Read-Only 的绑定</h4>

<p>有些bind类型，是Read-Only的，这时有些需求就无法满足了，需要注意。  <br/>
比如<strong>NSImageView</strong>的<strong>valuePath</strong>是Read-Only的，只满足正向的操作，即可以通过代码修改路径，显示不同的图片，但是界面操作拖入一张图片的时候，绑定的属性不能获取到这张图片的路径。  <br/>
所以对于Read-Only属性，只适合正向操作，即禁止用户进行修改的选项。  <br/>
对于哪些bind属性是Read-Only的，可以查询<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CocoaBindingsRef/CocoaBindingsRef.html">参考链接</a></p>

<p><br/></p>

<h3>参考</h3>

<p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CocoaBindingsRef/CocoaBindingsRef.html">https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CocoaBindingsRef/CocoaBindingsRef.html</a>
<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CocoaBindingsRef/Concepts/BindingTypes.html">https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CocoaBindingsRef/Concepts/BindingTypes.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac app的开机自启动]]></title>
    <link href="https://tmyam.github.io/blog/2014/06/10/sha-he-kai-ji-zi-qi-dong/"/>
    <updated>2014-06-10T14:15:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/06/10/sha-he-kai-ji-zi-qi-dong</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>在出现沙盒以前，mac下设置开机自启动是很容易的，使用 LSSharedFileListRef 很容易做到开机自启动。但自从沙盒出现之后，就变得麻烦了点，这里进行一下详细的使用描述。</p>

<h2>非沙盒下的开机自启动</h2>

<p>简单的说只需要两个函数就可以了。而且这种开机自启动和app所在的文件夹无关，并且可以在"系统偏好设置"->&ldquo;用户与群组&rdquo;->&ldquo;登录项"里面看到，并进行设置。</p>

<!-- more -->  




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">isStartAtLogin</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">BOOL</span>  <span class="n">isHaveAdd</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSString</span><span class="o">*</span> <span class="n">appPath</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">bundlePath</span><span class="p">];</span>
</span><span class='line'>    <span class="n">LSSharedFileListRef</span> <span class="n">loginItems</span> <span class="o">=</span> <span class="n">LSSharedFileListCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kLSSharedFileListSessionLoginItems</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">UInt32</span> <span class="n">seedValue</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSArray</span><span class="o">*</span> <span class="n">loginItemsArray</span> <span class="o">=</span> <span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="n">LSSharedFileListCopySnapshot</span><span class="p">(</span><span class="n">loginItems</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">seedValue</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFURLRef</span> <span class="n">tempUrl</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFURLRef</span><span class="p">)[</span><span class="bp">NSURL</span> <span class="nl">fileURLWithPath</span><span class="p">:</span><span class="n">appPath</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="bp">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="p">[</span><span class="n">loginItemsArray</span> <span class="n">count</span><span class="p">];</span> <span class="n">i</span> <span class="o">++</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">LSSharedFileListItemRef</span> <span class="n">itemRef</span> <span class="o">=</span> <span class="p">(</span><span class="n">LSSharedFileListItemRef</span><span class="p">)[</span><span class="n">loginItemsArray</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">LSSharedFileListItemResolve</span><span class="p">(</span><span class="n">itemRef</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tempUrl</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="n">noErr</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="bp">NSString</span> <span class="o">*</span> <span class="n">urlPath</span> <span class="o">=</span> <span class="p">[(</span><span class="bp">NSURL</span><span class="o">*</span><span class="p">)</span><span class="n">tempUrl</span> <span class="n">path</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">([</span><span class="n">urlPath</span> <span class="nl">compare</span><span class="p">:</span><span class="n">appPath</span><span class="p">]</span> <span class="o">==</span> <span class="n">NSOrderedSame</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">isHaveAdd</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">loginItemsArray</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">loginItems</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">isHaveAdd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">setStartAtLogin:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">startAtLogin</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSString</span><span class="o">*</span> <span class="n">appPath</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">bundlePath</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">result</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">startAtLogin</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="nb">self</span> <span class="n">isStartAtLogin</span><span class="p">])</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">CFURLRef</span> <span class="n">url</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFURLRef</span><span class="p">)[</span><span class="bp">NSURL</span> <span class="nl">fileURLWithPath</span><span class="p">:</span><span class="n">appPath</span><span class="p">];</span>
</span><span class='line'>            <span class="n">LSSharedFileListRef</span> <span class="n">newloginItems</span> <span class="o">=</span> <span class="n">LSSharedFileListCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kLSSharedFileListSessionLoginItems</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>            <span class="n">LSSharedFileListItemRef</span> <span class="n">item</span> <span class="o">=</span> <span class="n">LSSharedFileListInsertItemURL</span><span class="p">(</span><span class="n">newloginItems</span><span class="p">,</span> <span class="n">kLSSharedFileListItemLast</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">result</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>                <span class="n">CFRelease</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">newloginItems</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">CFRelease</span><span class="p">(</span><span class="n">newloginItems</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">LSSharedFileListRef</span> <span class="n">loginItems</span> <span class="o">=</span> <span class="n">LSSharedFileListCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">kLSSharedFileListSessionLoginItems</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">UInt32</span> <span class="n">seedValue</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="bp">NSArray</span><span class="o">*</span> <span class="n">loginItemsArray</span> <span class="o">=</span> <span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="n">LSSharedFileListCopySnapshot</span><span class="p">(</span><span class="n">loginItems</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">seedValue</span><span class="p">);</span>
</span><span class='line'>        <span class="n">CFURLRef</span> <span class="n">tempUrl</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFURLRef</span><span class="p">)[</span><span class="bp">NSURL</span> <span class="nl">fileURLWithPath</span><span class="p">:</span><span class="n">appPath</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="bp">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">[</span><span class="n">loginItemsArray</span> <span class="n">count</span><span class="p">];</span> <span class="n">i</span> <span class="o">++</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">LSSharedFileListItemRef</span> <span class="n">itemRef</span> <span class="o">=</span> <span class="p">(</span><span class="n">LSSharedFileListItemRef</span><span class="p">)[</span><span class="n">loginItemsArray</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">LSSharedFileListItemResolve</span><span class="p">(</span><span class="n">itemRef</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tempUrl</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="n">noErr</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="bp">NSString</span> <span class="o">*</span> <span class="n">urlPath</span> <span class="o">=</span> <span class="p">[(</span><span class="bp">NSURL</span><span class="o">*</span><span class="p">)</span><span class="n">tempUrl</span> <span class="n">path</span><span class="p">];</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">([</span><span class="n">urlPath</span> <span class="nl">compare</span><span class="p">:</span><span class="n">appPath</span><span class="p">]</span> <span class="o">==</span> <span class="n">NSOrderedSame</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">OSStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">LSSharedFileListItemRemove</span><span class="p">(</span><span class="n">loginItems</span><span class="p">,</span><span class="n">itemRef</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">noErr</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="n">loginItemsArray</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'>        <span class="n">CFRelease</span><span class="p">(</span><span class="n">loginItems</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>沙盒下的开机自启动</h2>

<p>沙盒下的自启动会比较麻烦，步骤比较多。这里以程序 test 为例，进行详细阐述。</p>

<h3>1. 添加Helper程序</h3>

<p>沙盒下，app是无法自己做到开机自启动的，需要另外一个app协助才行。这里就创建这样一个app，为了便于区分起名testHelper。
<img src="https://tmyam.github.io/images/2014/06/10/01.jpg" alt="temp" /></p>

<h3>2. 设置Helper</h3>

<p>test和testHelper都需要设置，这里先进行testHelper的设置.</p>

<ul>
<li>修改build Configuration 为 Release 。
<img src="https://tmyam.github.io/images/2014/06/10/02.jpg" alt="temp" /></li>
<li>修改Info.plist文件，使app在运行时不显示到前端。
<img src="https://tmyam.github.io/images/2014/06/10/03.jpg" alt="temp" /></li>
<li>删除MainMenu.xib中的window窗口，  <br/>
并且删除 AppDelegate.h 中的<code>@property (assign) IBOutlet NSWindow *window;</code>。  <br/>
这些都是确保app在运行时不显示到前端。
<img src="https://tmyam.github.io/images/2014/06/10/04.jpg" alt="temp" /></li>
<li>修改 Build Settings 的 <strong>Skip Install</strong> 为 YES。
<img src="https://tmyam.github.io/images/2014/06/10/05.jpg" alt="temp" /></li>
<li>设置沙盒环境，证书，描述文件。  <br/>
这里设置的发布证书，如果需要测试，可以设置开发者证书进行测试。
<img src="https://tmyam.github.io/images/2014/06/10/06.jpg" alt="temp" /></li>
</ul>


<h3>3. 添加Helper的代码</h3>

<p>参照下面的函数，复制到testHelper的AppDelegate中，注意修改identifier和appName为自己主app的信息。这段代码的意义是启动主app。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">applicationDidFinishLaunching:</span><span class="p">(</span><span class="bp">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">aNotification</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">runMainApp</span><span class="p">:</span><span class="s">@&quot;com.tmyam.test&quot;</span> <span class="nl">appName</span><span class="p">:</span><span class="s">@&quot;test&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 运行开机自启动的app</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> @param identifier 主app的标识符</span>
</span><span class='line'><span class="cm"> @param appName 主app的名称（在MacOS文件夹下的名称）</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">runMainApp:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">identifier</span> <span class="nf">appName:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">appName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Check if main app is already running; if yes, do nothing and terminate helper app</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">alreadyRunning</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">running</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSWorkspace</span> <span class="n">sharedWorkspace</span><span class="p">]</span> <span class="n">runningApplications</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSRunningApplication</span> <span class="o">*</span><span class="n">app</span> <span class="k">in</span> <span class="n">running</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([[</span><span class="n">app</span> <span class="n">bundleIdentifier</span><span class="p">]</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">identifier</span><span class="p">])</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">alreadyRunning</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">alreadyRunning</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSString</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">bundlePath</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSArray</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">path</span> <span class="n">pathComponents</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">pathComponents</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="nl">arrayWithArray</span><span class="p">:</span><span class="n">p</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">pathComponents</span> <span class="n">removeLastObject</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">pathComponents</span> <span class="n">removeLastObject</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">pathComponents</span> <span class="n">removeLastObject</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">pathComponents</span> <span class="nl">addObject</span><span class="p">:</span><span class="s">@&quot;MacOS&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">pathComponents</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">appName</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSString</span> <span class="o">*</span><span class="n">newPath</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">pathWithComponents</span><span class="p">:</span><span class="n">pathComponents</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">NSWorkspace</span> <span class="n">sharedWorkspace</span><span class="p">]</span> <span class="nl">launchApplication</span><span class="p">:</span><span class="n">newPath</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">NSApp</span> <span class="nl">terminate</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. 设置主程序</h3>

<ul>
<li>test添加Copy Files 。
<img src="https://tmyam.github.io/images/2014/06/10/07.jpg" alt="temp" /></li>
<li>设置 Copy Files 。Destination为"Wrapper"，Subpath为"Contents/Library/LoginItems"，添加"testHelper.app"如下图。 <br/>
<img src="https://tmyam.github.io/images/2014/06/10/08.jpg" alt="temp" /></li>
<li>设置依赖，如下图。<br/>
<img src="https://tmyam.github.io/images/2014/06/10/09.jpg" alt="temp" /></li>
<li>设置 Build Settings -> &ldquo;Strip Debug Symbols During Copy&rdquo; 为 NO 。
<img src="https://tmyam.github.io/images/2014/06/10/10.jpg" alt="temp" /></li>
<li>设置沙盒环境，证书，描述文件。  <br/>
这里设置的发布证书，如果需要测试，可以设置开发者证书进行测试。
<img src="https://tmyam.github.io/images/2014/06/10/11.jpg" alt="temp" /></li>
</ul>


<h3>5. 主程序添加代码</h3>

<ul>
<li><p>test首先导入两个文件，StartAtLoginController.h和StartAtLoginController.m，<a href="https://tmyam.github.io/files/StartAtLoginController.zip">StartAtLoginController下载</a></p></li>
<li><p>添加 ServiceManagement.framework
<img src="https://tmyam.github.io/images/2014/06/10/12.jpg" alt="temp" /></p></li>
<li><p>创建一个管理文件例如 TMStartAtLogin，负责管理开机自启动状态，并在里面粘贴以下代码。   <br/>
别忘了 #import &ldquo;StartAtLoginController.h&rdquo;  <br/>
这里的 Identifier是testHelper的标识符。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">isStartAtLogin</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">StartAtLoginController</span><span class="o">*</span> <span class="n">loginController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">StartAtLoginController</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithIdentifier</span><span class="p">:</span><span class="s">@&quot;com.tmyam.testHelper&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">startedAtLogin</span> <span class="o">=</span> <span class="p">[</span><span class="n">loginController</span> <span class="n">startAtLogin</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">loginController</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">startedAtLogin</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">setStartAtLogin:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">isStartLogin</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">StartAtLoginController</span><span class="o">*</span> <span class="n">loginController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">StartAtLoginController</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithIdentifier</span><span class="p">:</span><span class="s">@&quot;com.tmyam.testHelper&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">loginController</span><span class="p">.</span><span class="n">startAtLogin</span> <span class="o">=</span> <span class="n">isStartLogin</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">result</span> <span class="o">=</span> <span class="n">loginController</span><span class="p">.</span><span class="n">enabled</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">loginController</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>结尾</h3>

<p>至此，所有的设置已经完成，可以通过主程序的 TMStartAtLogin 管理自启动的状态。
还有要注意的地方，如果要测试沙盒下的开机自启动，<em>需要将编译出的app放入系统的应用程序目录下</em>，否则不会生效。</p>

<p>另外，在发布app时，会遇到因为使用了testHelper证书而导致上传到app store时的错误，这时需要深入到<em>&ldquo;&hellip;/Products/Applications/test.app/Contents/Library/LoginItems/testHelper.app/Contents&rdquo;</em>目录下，删除embedded.provisionprofile文件，就可以正确上传了。</p>

<h2>示例</h2>

<p><a href="https://tmyam.github.io/files/StartAtLoginController.zip">StartAtLoginController下载</a> <br/>
<a href="https://tmyam.github.io/files/test-startatlogin.zip">test示例下载</a></p>

<h3>参考</h3>

<p><a href="http://blog.timschroeder.net/2012/07/03/the-launch-at-login-sandbox-project/">http://blog.timschroeder.net/2012/07/03/the-launch-at-login-sandbox-project/</a>
<a href="http://stackoverflow.com/questions/11230168/submit-an-osx-app-with-helper-app-in-its-bundle">http://stackoverflow.com/questions/11230168/submit-an-osx-app-with-helper-app-in-its-bundle</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个客户端设置多个github账号]]></title>
    <link href="https://tmyam.github.io/blog/2014/05/07/duo-githubzhang-hu-she-zhi/"/>
    <updated>2014-05-07T21:48:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/05/07/duo-githubzhang-hu-she-zhi</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>最近遇到了这样的需求，需要在一台电脑上同时使用两个github账号，负责不同的用途，所以搜索了一些文章，进行了一下实践。</p>

<h2>1.前期工作</h2>

<ul>
<li>至少有两个<a href="https://github.com">github</a>账号 (假设有两个账号 一个为 <em>one</em> ，另一个为 <em>two</em>)</li>
<li>取消git全局设置</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git config --global --unset user.name
</span><span class='line'>git config --global --unset user.email
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h2>2.SSH配置</h2>

<ul>
<li>生成 id_rsa 私钥 , id_rsa.pub 公钥    <br/>
one可以直接回车，默认生成id_rsa和id_rsa.pub。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh-keygen -t rsa -C <span class="s2">&quot;one@126.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是two会出现提示输入文件名，输入与默认配置不一样的文件名，比如: id_rsa_two。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> ~/.ssh
</span><span class='line'>ssh-keygen -t rsa -C <span class="s2">&quot;two@126.com&quot;</span>  <span class="c"># 之后会提示输入文件名</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><a href="https://github.com">github</a>添加公钥 id_rsa.pub , id_rsa_two.pub <br/>
分别登陆<em>one</em>,<em>two</em>的账号，在 <code>Account Settings</code> 的 <code>SSH Keys</code> 里，点 <code>Add SSH Keys</code> ，将公钥(.pub文件)中的内容粘贴到”Key”中，并输入”Title”.</p></li>
<li><p>添加 ssh key</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh-add ~/.ssh/id_rsa
</span><span class='line'>ssh-add ~/.ssh/id_rsa_two
</span></code></pre></td></tr></table></div></figure>


<p>可以在添加前使用下面命令删除所有的key</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh-add -D
</span></code></pre></td></tr></table></div></figure>


<p>最后可以通过下面命令，查看key的设置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh-add -l
</span></code></pre></td></tr></table></div></figure>


<h2>修改ssh config文件</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> ~/.ssh/
</span><span class='line'>touch config
</span></code></pre></td></tr></table></div></figure>


<p>打开.ssh文件夹下的config文件，进行配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># default</span>
</span><span class='line'>Host github.com
</span><span class='line'>HostName github.com
</span><span class='line'>User git
</span><span class='line'>IdentityFile ~/.ssh/id_rsa
</span><span class='line'>
</span><span class='line'><span class="c"># two</span>
</span><span class='line'>Host two.github.com  <span class="c"># 前缀名可以任意设置</span>
</span><span class='line'>HostName github.com
</span><span class='line'>User git
</span><span class='line'>IdentityFile ~/.ssh/id_rsa_two
</span></code></pre></td></tr></table></div></figure>


<p>这里必须采用这样的方式设置，否则push时会出现以下错误:</p>

<blockquote><p>ERROR: Permission to two/two.github.com.git denied to one.</p></blockquote>

<p>简单分析下原因，我们可以发现 ssh 客户端是通过类似:  <br/>
<strong>git@github.com:one/one.github.com.git</strong> <br/>
这样的 git 地址中的 User 和 Host 来识别使用哪个本地私钥的。 <br/>
很明显，如果 User 和 Host 始终为 git 和 github.com，那么就只能使用一个私钥。 <br/>
所以需要上面的方式配置，每个账号使用了自己的 Host，每个 Host 的域名做 CNAME 解析到 github.com，这样 ssh 在连接时就可以区别不同的账号了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh -T git@github.com        <span class="c"># 测试one ssh连接</span>
</span><span class='line'><span class="c">#Hi ***! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span>
</span><span class='line'>ssh -T git@two.github.com    <span class="c"># 测试two ssh连接</span>
</span><span class='line'><span class="c">#Hi ***! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这样还没有完，下面还有关联的设置。</p>

<h2>新建git项目或者clone已有的项目</h2>

<ul>
<li>可以用 git init 或者 git clone 创建本地项目</li>
<li>分别在<em>one</em>和<em>two</em>的git项目目录下，使用下面的命令设置账号关联</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git config user.name <span class="s2">&quot;__name__&quot;</span>            <span class="c"># __name__ 例如 one</span>
</span><span class='line'>git config user.email <span class="s2">&quot;__email__&quot;</span>          <span class="c"># __email__ 例如 one@126.com</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看git项目的配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git config --list
</span></code></pre></td></tr></table></div></figure>


<p>查看<em>one</em>的remote.origin.url=git@github.com:one/one.github.com.git <br/>
查看<em>two</em>的remote.origin.url=git@github.com:two/two.github.com.git <br/>
由于<em>one</em>使用的是默认的Host，所以不需要修改，但是two使用的是<em>two.github.com</em>，则需要进行修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git remote rm origin
</span><span class='line'>git remote add origin git@two.github.com:two/two.github.com.git
</span></code></pre></td></tr></table></div></figure>


<h2>上传更改</h2>

<ul>
<li>上面所有的设置无误后，可以修改代码，然后上传了。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git add -A
</span><span class='line'>git commit -m <span class="s2">&quot;your comments&quot;</span>
</span><span class='line'>git push
</span></code></pre></td></tr></table></div></figure>


<p>如果遇到warning</p>

<blockquote><p>warning: push.default is unset; its implicit value is changing in Git 2.0 from ‘matching’ to ‘simple’. To squelch this messageand maintain the current behavior after the default changes, use&hellip;</p></blockquote>

<p>推荐使用下面命令设置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git config --global push.default simple
</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<p><a href="http://blog.csdn.net/wzy_1988/article/details/19967465">http://blog.csdn.net/wzy_1988/article/details/19967465</a> <br/>
<a href="http://testerhome.com/topics/752">http://testerhome.com/topics/752</a> <br/>
<a href="http://hily.me/blog/2013/05/github-multiple-account-and-multiple-repository/">http://hily.me/blog/2013/05/github-multiple-account-and-multiple-repository/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iDP续费]]></title>
    <link href="https://tmyam.github.io/blog/2014/03/25/idpxu-fei/"/>
    <updated>2014-03-25T10:24:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/03/25/idpxu-fei</id>
    <content type="html"><![CDATA[<p>近期续费遇到些问题，找了篇不错的文章做个记录，顺便描述下问题，及解决方案。</p>

<h2>基本流程</h2>

<p>苹果的规则是到期前 <strong>60</strong> 天内才可以续费。</p>

<h3>1. 登录</h3>

<p>登录 <a href="https://developer.apple.com/membercenter/index.action">Member Center</a></p>

<!-- more -->   


<p><img src="https://tmyam.github.io/images/2014/03/25/01.png" alt="temp" /> <br/>
如果将要过期，会有黄色的内容提醒续费。点击 <code>renew your membership(s).</code></p>

<h3>2</h3>

<p><img src="https://tmyam.github.io/images/2014/03/25/02.png" alt="temp" /></p>

<h3>3</h3>

<p><img src="https://tmyam.github.io/images/2014/03/25/03.png" alt="temp" /></p>

<h3>4</h3>

<p><img src="https://tmyam.github.io/images/2014/03/25/04.png" alt="temp" /></p>

<h3>5</h3>

<p><img src="https://tmyam.github.io/images/2014/03/25/05.png" alt="temp" /></p>

<h3>6. 申请结束</h3>

<p>提交后，如果成功，会有一个成功的页面。如果失败，会有一个失败的页面。 <br/>
但是无论成功失败，<a href="https://developer.apple.com/membercenter/index.action#progSummary">Programs &amp; Add-ons</a> 这个页面都会变成下图 <br/>
<img src="https://tmyam.github.io/images/2014/03/25/06.png" alt="temp" /> <br/>
所以以这个页面判断申请是否提交是不准确的，我就有次遇到了失败页，但这个页面是这样的，以为提交了申请，但是等了一星期也没有扣款。</p>

<p>申请提交成功是会很快收到邮件的，如下图 <br/>
<img src="https://tmyam.github.io/images/2014/03/25/07.png" alt="temp" /><br/>
所以可以以邮件判断申请是否成功，如果没收到邮件就不要傻等了，再次申请吧。</p>

<h3>7. 等待</h3>

<p>如果一切正常的话，2个工作日就能扣费成功，并且AppID的那个邮箱会收到一封邮件告知扣费成功，一封告知可以激活。可能有人会认为这就完了，其实没有，还需要一步。那就是查看邮件，找到绿色Activation Code，点击打开激活链接,输入邮箱中看到的激活码，然后状态就会立马更新，不会提示你快过期。</p>

<p>如果没有扣费成功，那检查下帐号信息是否正确，如果有误的话再重新弄一遍，即使你重复提交，苹果扣费也只有一次，如果你确认帐号信息无误，你的信用卡里面余额也够，那多等两天吧，也许是苹果网站又被黑了，如果太担心的话，可以联系苹果开发者支持客服帮你解答你的疑惑。</p>

<p>依次收到的邮件:<br/>
购买信息  <br/>
<img src="https://tmyam.github.io/images/2014/03/25/08.png" alt="temp" /></p>

<p>发票  <br/>
<img src="https://tmyam.github.io/images/2014/03/25/09.png" alt="temp" /></p>

<p>激活码  <br/>
<img src="https://tmyam.github.io/images/2014/03/25/10.png" alt="temp" /></p>

<h3>8. 激活</h3>

<p>点击邮件中的激活码，会跳转到一个链接，然后在里面输入激活码完成激活。 <br/>
<img src="https://tmyam.github.io/images/2014/03/25/11.png" alt="temp" /> <br/>
激活成功后，<a href="https://developer.apple.com/membercenter/index.action#progSummary">Programs &amp; Add-ons</a> 这个页面都会变成下图
<img src="https://tmyam.github.io/images/2014/03/25/12.png" alt="temp" /></p>

<h2>遇到的问题</h2>

<p>续费中遇到问题，可以联系苹果客服。</p>

<p>可以拨打 苹果中国 4006 701 855（Mon-Fri, 09:00-17:00 SGT） <br/>
或者发送邮件到 <a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#x63;&#104;&#105;&#110;&#97;&#x64;&#101;&#118;&#x40;&#97;&#115;&#105;&#97;&#46;&#x61;&#112;&#112;&#108;&#x65;&#x2e;&#99;&#111;&#109;">&#99;&#x68;&#105;&#x6e;&#x61;&#100;&#x65;&#118;&#x40;&#97;&#115;&#105;&#97;&#46;&#97;&#112;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#x6d;</a> (没有试过&hellip;)</p>

<ul>
<li><strong>问题：</strong> <br/>
续费选的时候是 <strong>iOS Developer Program</strong> 结果收到了苹果的邮件通知，却变成了 <strong>Mac Developer Program</strong> 。  <br/>
对于这种苹果犯的错误，我是通过打电话解决的，苹果方面不能直接转平台，只能退款，要4-7天才能到信用卡里。还得再次续费才行。。。</li>
</ul>


<h3>参考</h3>

<p><a href="http://blog.sina.com.cn/s/blog_68661bd80101nme6.html">http://blog.sina.com.cn/s/blog_68661bd80101nme6.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iDP申请[转载]]]></title>
    <link href="https://tmyam.github.io/blog/2014/03/09/idpshen-qing/"/>
    <updated>2014-03-09T20:06:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/03/09/idpshen-qing</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>当初我申请idp的一篇详细的文章，不过现在里面的图都挂了，我费了点劲才找回这些图，在这里进行一下还原，希望能帮到需要的人。</p>

<h2>正文</h2>

<p>我的iDP之路04——iDP申请,如何花出去$99,2011年6月份版 <br/>
这帖子本来应该是六月份写的，怎奈那时期末将近，小弟我搞App刚刚起步，资金全靠奖学金维持，不得不投入到准备考试的深渊中。放假期间被我娘她老人家逼着学车，第一个App搞得很是不顺。这个帖子只能一拖再拖。废话稍候再罗嗦，下面是图和解说：</p>

<!-- more -->


<h5>1</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/01.png" alt="temp" />
我是从申请过developer开始的。Apple id和developer太简单了，就不说了，不过填信息也不能乱填，下面说。这张图是登入developer的画面。</p>

<h5>2</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/02.png" alt="temp" /></p>

<h5>3</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/03.png" alt="temp" /></p>

<h5>4</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/04.png" alt="temp" />
因为已经注册过Apple id和developer了，所以我选的是红圈那项。</p>

<h5>5</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/05.png" alt="temp" />
左边是个人，右边是团队。我光杆司令一个，所以选了左边。</p>

<h5>6</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/06.png" alt="temp" />
不知是不是cookie过期了，到了这里要重新登录一次。</p>

<h5>7</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/07.png" alt="temp" />
这里的信息是信用卡(借记卡可不行)的信息：我(假如叫<strong>王五</strong>)所有名字顺序，除了在银行流留的是中英文<strong>王五</strong>，apple的各种页面上都是英文<strong>Wu Wang</strong>。</p>

<h5>8</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/08.png" alt="temp" />
这里奉上英文的地址写法一例： <br/>
Mailbox 166,Nankai University,94 WeijinRd,Nankai District,Tianjin 300072.  <br/>
这个页面上  <br/>
Street Address: Mailbox 166,Nankai University  <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;94 WeijinRd,Nankai District,Tianjin  <br/>
Postal Code: 300072  <br/>
Phone: 86 - 411 - 手机号</p>

<h5>9</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/09.png" alt="temp" /></p>

<h5>10</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/10.png" alt="temp" />
上面提到过developer申请时信息不能乱写。这图上面的信息就是从那里映射过来的，你可以看到地址有些出入，不过还好影响不大。各位填写时应尽量保持一致。</p>

<h5>11</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/11.png" alt="temp" />
这张表下下来，用PS填写各种信息，大部分是银行信息。</p>

<h5>12</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/12.png" alt="temp" />
这份邮件曾经让我望眼欲穿，等了5天吧，给亚洲苹果去了3个电话，发了3封邮件。亚洲苹果普通话服务真不是普通话&hellip;总之，把上图的<strong>Purchase Form</strong> PS完，我存成jpg发给了
<font color=red><a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x63;&#104;&#105;&#110;&#x61;&#x64;&#101;&#118;&#x40;&#x61;&#x73;&#105;&#97;&#46;&#x61;&#112;&#112;&#108;&#101;&#46;&#99;&#x6f;&#x6d;">&#99;&#x68;&#x69;&#x6e;&#x61;&#100;&#101;&#118;&#x40;&#97;&#115;&#105;&#x61;&#x2e;&#97;&#112;&#112;&#x6c;&#x65;&#46;&#x63;&#x6f;&#x6d;</a></font>。
就可以等了，不过论坛里各位前辈的经验是打电话啊发邮件啊地催。我发邮件是因为地址因为笔误写错了。</p>

<h5>13</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/13.png" alt="temp" />
收到上图邮件后就能进ituesconnect.apple.com了，进contract，tax，and banking，就能看到上图。上面的是可以申请的合同，下面是已经生效的。因为免费app合同不用申请进进来就在下面了。</p>

<h5>14</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/14.png" alt="temp" /></p>

<h5>15</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/15.png" alt="temp" /></p>

<h5>16</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/16.png" alt="temp" />
红圈子里是需要逐个填写的。</p>

<h5>17</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/17.png" alt="temp" />
<strong>contract info</strong>  <br/>
这里第一次进去会需要创建一个新人。然后高管，财务，技术，科技等等职位，都是我一个人担任。</p>

<h5>18</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/18.png" alt="temp" />
<strong>Bank info</strong></p>

<h5>19</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/19.png" alt="temp" />
<strong>CNAPS</strong>，应该是叫“联行号”不要跟银行的人说英文，他们不懂。办信用卡的时候问好，95588这种电话问不到。 <br/>
补充：这里填写的银行号为储蓄卡，千万不能填信用卡的，不然收款都到信用卡里了。 <br/>
查询CNAPS：<a href="https://e.czbank.com/CORPORBANK/query_unionBank_index.jsp">https://e.czbank.com/CORPORBANK/query_unionBank_index.jsp</a></p>

<h5>20</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/20.png" alt="temp" />
这里的信息要写的简洁，要不查不到。</p>

<h5>21</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/21.png" alt="temp" />
添加一个账户信息。</p>

<h5>22</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/22.png" alt="temp" /></p>

<h5>23</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/23.png" alt="temp" />
储蓄卡卡号，名字当然是储蓄卡开户名，比如<strong>Wu Wang</strong>。  <br/>
另外这里收款要选择<strong>USD</strong>，如果选择<strong>RMB</strong>的话，apple打款时是以美元结算的，会多一次汇率转换，白白浪费钱。</p>

<h5>24</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/24.png" alt="temp" /></p>

<h5>25</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/25.png" alt="temp" />
<strong>Tax info</strong>  <br/>
会有几个问题，照实回答，难度不大。  <br/>
给自己随便封个号，我的是chairman。</p>

<h5>26</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/26.png" alt="temp" />
完事会审核，这个很快，吃顿饭就好了。</p>

<h5>27</h5>

<p><img src="https://tmyam.github.io/images/2014/03/09/27.png" alt="temp" />
这个事我现在的状态。iAd Network的合同是不小心申请的，其实不用。
时间有点长了，有些细节我慢慢想，慢慢往上写。写的潦草，大家见谅。</p>

<h2>原始链接</h2>

<p><a href="http://watchxxx.blog.163.com/blog/static/1974232272011115112728500/">http://watchxxx.blog.163.com/blog/static/1974232272011115112728500/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C遍历数组]]></title>
    <link href="https://tmyam.github.io/blog/2014/02/28/objective-cbian-li-shu-zu/"/>
    <updated>2014-02-28T11:46:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/02/28/objective-cbian-li-shu-zu</id>
    <content type="html"><![CDATA[<p>数组的遍历有多种方式，这里介绍一下常见的方式，使用以及注意事项。</p>

<h2>常用写法简介</h2>

<h3>1. 经典写法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">count</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span> <span class="p">;</span> <span class="n">i</span> <span class="o">++</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>之所以使用count来存储数组总数，而不是写成 <strong>i &lt; array.count</strong> ,是因为循环每进行一次都会调用数组的计数方法，这将导致性能变得很差。</p>

<!-- more -->


<h3>2. NSEnumerator</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">test</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSEnumerator</span><span class="o">*</span> <span class="n">enumerator</span> <span class="o">=</span> <span class="p">[</span><span class="n">array</span> <span class="n">objectEnumerator</span><span class="p">];</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">test</span> <span class="o">=</span> <span class="p">[</span><span class="n">enumerator</span> <span class="n">nextObject</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>NSEnumerator的优势在于不需要知道数据总数，所以它适合应用在结构化数据上，比如链表，数据流等。</p>

<h3>3. 快速枚举</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSString</span><span class="o">*</span> <span class="n">test</span> <span class="k">in</span> <span class="n">array</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>快速枚举是apple推荐的方式，在使用上比经典的写法性能上更快。 <br/>
使用上如果需要反向枚举，只需要将<strong>array</strong>改成<strong>array.reverseObjectEnumerator</strong>就可以了。</p>

<h3>4. 枚举块</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">array</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span> <span class="n">obj</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>枚举块的优势在于它会返回对象和索引, 而其他的枚举方法只会返回对象.</p>

<h2>并发执行</h2>

<p>现在是多核的时代，为了发挥多核的优势，在有些时候并发执行就非常具有优势。如果在枚举中有许多事要做，但并不关心枚举顺序的情况下，使用并发就很合适。 <br/>
但是对于数组总量小一些的数组，并发执行不一定会带来性能提升，反而开销可能远多于其带来的好处。<br/>
所以具体的使用需要自己进行权衡。</p>

<h3>1. 基本的并发枚举块</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">array</span> <span class="nl">enumerateObjectsWithOptions</span><span class="p">:</span><span class="n">NSEnumerationConcurrent</span> <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span> <span class="n">obj</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式会为每一个枚举创建一个线程，等到所有的枚举都执行完毕才会进行下一步。</p>

<h3>2. 异步GCD并发</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span> <span class="n">test</span> <span class="k">in</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式会为每一个枚举创建一个线程，但是不会等待所有枚举执行完成，而是for循环完成后就会进行下一步了，是一种异步执行的方式。</p>

<h3>3. 等待GCD并发</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">dispatch_group_t</span> <span class="n">group</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span> <span class="n">test</span> <span class="k">in</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">dispatch_group_wait</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">DISPATCH_TIME_FOREVER</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dispatch_release</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式使用group将多个block组成一组以监测这些Block全部完成或者等待全部完成。这种方式的效果类似于<code>1.基本的并发枚举块</code>。</p>

<h3>4. dispatch_apply</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dispatch_apply</span><span class="p">(</span><span class="n">array</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">index</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">array</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是系统提供的一种并发执行方式，这种方式的效果同样类似于<code>1.基本的并发枚举块</code>。</p>

<p><br/></p>

<h3>参考</h3>

<p>本文只是粗略的介绍，如果想了解更详细的使用，建议阅读下面的链接。
<a href="http://www.oschina.net/translate/high-performance-collection-looping-objective-c">http://www.oschina.net/translate/high-performance-collection-looping-objective-c</a></p>

<p><a href="http://www.dreamingwish.com/dream-2012/gcd%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%A4%9A%E6%A0%B8%E5%BF%83%E7%9A%84%E6%80%A7%E8%83%BD.html">http://www.dreamingwish.com/dream-2012/gcd%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%A4%9A%E6%A0%B8%E5%BF%83%E7%9A%84%E6%80%A7%E8%83%BD.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C枚举介绍]]></title>
    <link href="https://tmyam.github.io/blog/2014/02/24/mei-ju-jie-shao/"/>
    <updated>2014-02-24T15:39:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/02/24/mei-ju-jie-shao</id>
    <content type="html"><![CDATA[<p>Objective-C枚举的使用，常见的方式总结，以便自己使用时方便查阅。</p>

<h2>1. 枚举介绍</h2>

<h3>enum only</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">enum</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这种枚举<strong>不推荐</strong>使用，因为不能用一种类型的方式表示枚举。</li>
</ul>


<!-- more -->


<h3>enum 类型</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">enum</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="n">TMEnumTest</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">enum</span> <span class="n">TMEnumTest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="n">TMEnumTest</span> <span class="n">TMEnumTest</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这两种写法，将枚举描述为一个类型<em>TMEnumTest</em>。 <br/>
但是这种写法也有局限性，在作为函数参数时，如果传入NSInteger类型的数据，则需要强制转换，否则会有类型不匹配的警告，所以这种方式也<strong>不推荐</strong>。如下图，
<img src="https://tmyam.github.io/images/2014/02/24/enum_warn.png" alt="temp" /></li>
</ul>


<h3>老式enum写法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">enum</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="bp">NSUInteger</span> <span class="n">TMEnumTest</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这种写法可以指定<em>TMEnumTest</em>的类型，并且作为函数参数时，传入的值不需要进行强制类型转换。 <br/>
但是这种写法不会检查枚举的正确性，是好是坏需要自己判断，如下图。本人<strong>推荐</strong>这种写法。
<img src="https://tmyam.github.io/images/2014/02/24/enum_no_check.png" alt="temp" /></li>
</ul>


<h3>新式enum写法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">NS_ENUM</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">,</span> <span class="n">TMEnumTest</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">NS_OPTIONS</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">,</span> <span class="n">TMEnumTest</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span>  <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span>  <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>NS_ENUM</strong>和<strong>NS_OPTIONS</strong>本质是一样的，仅仅从字面上来区分用途。<strong>NS_ENUM</strong>是通用情况，<strong>NS_OPTIONS</strong>一般用来定义位枚举。
<a href="http://blog.csdn.net/annkie/article/details/9877643">参考链接</a></li>
<li>这种写法同样作为函数参数时，传入的值不需要进行强制类型转换。但是也同样不会检查枚举的正确性，和 <strong>老式enum写法</strong> 一样，如下图。
<img src="https://tmyam.github.io/images/2014/02/24/enum_no_check.png" alt="temp" /></li>
<li>但是不同的是，<strong>新式enum写法</strong> 在使用<em>switch</em>时，会进行值的检测，如果枚举中无此值，则会弹出警告，如下图。这种方式见仁见智了。本人<strong>推荐</strong>这种写法。
<img src="https://tmyam.github.io/images/2014/02/24/enum_switch.png" alt="temp" /></li>
</ul>


<h2>2. 枚举最大值</h2>

<p>对于一般的枚举，要获取枚举的最大值是很难的，因为随着枚举的扩充，最大值在不断变化，这时推荐使用一个固定的枚举表示最大值，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">NS_ENUM</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">,</span> <span class="n">TMEnumTest</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TMEnumTestMax</span><span class="p">,</span>  <span class="c1">// 表示最大值</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以使用<em>TMEnumTestMax</em>表示枚举<em>TMEnumTest</em>的最大值了。</p>

<h2>3. 位枚举</h2>

<p>位枚举是一种特殊的枚举，在apple的类中使用的很多，例如<code>NSStringCompareOptions</code>等。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">NS_OPTIONS</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">,</span> <span class="n">TMEnumTest</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span>     <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>          <span class="c1">// 0</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span>     <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">,</span>     <span class="c1">// 1</span>
</span><span class='line'>    <span class="n">TMEnumTestThree</span>   <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">,</span>     <span class="c1">// 2</span>
</span><span class='line'>    <span class="n">TMEnumTestFour</span>    <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">,</span>     <span class="c1">// 4</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>位枚举的特点是可以使用位运算来处理枚举值，实际使用中可以用一个变量存储多个枚举值，表示互不影响的多个设置。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTest</span> <span class="n">test</span> <span class="o">=</span> <span class="n">TMEnumTestTwo</span><span class="o">|</span><span class="n">TMEnumTestThree</span><span class="p">;</span>  <span class="c1">// 3</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 添加TMEnumTestFour到test中（如test已经包含TMEnumTestFour，则test值不变）</span>
</span><span class='line'><span class="cm">    </span>
</span><span class='line'><span class="cm">       当然这里也可以使用test += TMEnumTestFour,</span>
</span><span class='line'><span class="cm">       但是注意 + 不能在test中已经包含TMEnumTestFour的情况下使用。</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="n">test</span> <span class="o">|=</span> <span class="n">TMEnumTestFour</span><span class="p">;</span>  <span class="c1">// 7</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 将TMEnumTestThree从test中去除（如test不包含TMEnumTestThree，则test值不变）</span>
</span><span class='line'><span class="cm">    </span>
</span><span class='line'><span class="cm">       当然这里也可以使用test -= TMEnumTestThree，</span>
</span><span class='line'><span class="cm">       但是注意 - 不能在test中不包含TMEnumTestThree的情况下使用。</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="n">test</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">TMEnumTestThree</span><span class="p">;</span> <span class="c1">// 5</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 判断 TMEnumTestFour枚举 是否被包含</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">test</span> <span class="o">&amp;</span> <span class="n">TMEnumTestFour</span><span class="p">)</span> <span class="o">==</span> <span class="n">TMEnumTestFour</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;YES&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 判断 TMEnumTestFour枚举 是否被包含</span>
</span><span class='line'><span class="cm">     </span>
</span><span class='line'><span class="cm">     因为 (test &amp; TMEnumTestFour) 的结果不是 0，就是TMEnumTestFour本身，</span>
</span><span class='line'><span class="cm">     而 TMEnumTestFour &gt; 0 ，所以可以使用简易的判断</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">test</span> <span class="o">&amp;</span> <span class="n">TMEnumTestFour</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;YES&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac app，创建基于文档的app]]></title>
    <link href="https://tmyam.github.io/blog/2014/02/20/chuang-jian-wen-dang-xing-ying-yong/"/>
    <updated>2014-02-20T14:24:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/02/20/chuang-jian-wen-dang-xing-ying-yong</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>基于文档的app在mac下又是比较常见的形式，但是介绍的文章比较少。为了避免少走弯路，在此进行一些简单的介绍。</p>

<!-- more -->   


<h2>创建</h2>

<p>创建一个mac app，在下图这个界面，勾选<strong>Create Document-Based Application</strong> <br/>
<img src="https://tmyam.github.io/images/2014/02/20/create.png" alt="temp" /></p>

<p>其中继承自<strong>NSDocument</strong>的<strong>Document</strong>就是文档类，区别于<strong>AppDelegate</strong>，<strong>Document</strong>不是单例，而是对应一个个文档实例。</p>

<h2>自建文档文件图标</h2>

<p>这里省略，格式为icns&hellip;</p>

<h2>关联文件类型</h2>

<ul>
<li>导入文档图标（上步创建的图标）</li>
<li>在工程的<em>Info</em>里进行设置，如下图。 <br/>
<img src="https://tmyam.github.io/images/2014/02/20/info.png" alt="temp" /> <br/>
<strong>Document Types</strong>设置文档关联的文件，<em>Identifier</em>为文档标示。 <br/>
<strong>Exported UTIs</strong>为具体的文档设置，<em>Identifier</em>必须和<strong>Document Types</strong>的一致，这里面可以设置图标，扩展名等等。 <br/>
注意图标必须设置在<strong>Document Types</strong>里面，运行之后就会立即生效。 <br/>
而且这两项都是可以设置多个关联的，关联多个文档类，关联多种格式。</li>
</ul>


<h2>运行</h2>

<p>这时，运行工程，文件关联就已经完成了。可以创建一个指定的扩展名文件，看看是不是已经变成了指定的图标样式。如果没有改变，可以重启电脑之后看看。</p>

<h2>编码</h2>

<p>在<strong>Document.m</strong>文件里已经有两个函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nf">dataOfType:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">typeName</span> <span class="nf">error:</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">**</span><span class="p">)</span><span class="nv">outError</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">typeName</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;com.tmyam.TestDocument.document&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// TODO: 这里是具体的存储文件数据</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="s">@&quot;test&quot;</span> <span class="nl">dataUsingEncoding</span><span class="p">:</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">outError</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="o">*</span><span class="n">outError</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSError</span> <span class="nl">errorWithDomain</span><span class="p">:</span><span class="s">@&quot;TestDocumentErrorDomain&quot;</span>
</span><span class='line'>                                            <span class="nl">code</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>                                        <span class="nl">userInfo</span><span class="p">:</span><span class="l">@{</span><span class="nl">NSLocalizedFailureReasonErrorKey</span><span class="p">:[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;Unsupported data type: %@&quot;</span><span class="p">,</span> <span class="n">typeName</span><span class="p">]</span><span class="l">}</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">readFromData:</span><span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span> <span class="nf">ofType:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">typeName</span> <span class="nf">error:</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">**</span><span class="p">)</span><span class="nv">outError</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">([</span><span class="n">typeName</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;com.tmyam.TestDocument.document&quot;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// TODO: 这里是具体的读取文件数据</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>示例</h2>

<p><a href="https://tmyam.github.io/files/TestDocument.zip">TestDocument示例下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac app完整的发布流程]]></title>
    <link href="https://tmyam.github.io/blog/2013/11/17/mac-app-release/"/>
    <updated>2013-11-17T10:45:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2013/11/17/mac-app-release</id>
    <content type="html"><![CDATA[<p>发布mac app网上已经很多教程了，这里只是进行一个记录，有的时候容易忘记细节。</p>

<h2>前提条件</h2>

<p>1, 一个mac developer帐号</p>

<!-- more -->


<h2>创建APP ID</h2>

<ul>
<li>登陆 <a href="https://developer.apple.com/membercenter">MemberCenter</a></li>
<li>点击 <strong>Certificates, Identifiers &amp; Profiles</strong> 进入管理界面，点击<em>Identifiers</em> -> <em>App IDs</em>.</li>
</ul>


<p>通常情况下我们会创建如 <code>com.company.*</code> 这样的通用型APP ID，可以适用于大部分程序,但是对于需要推送功能，以及app内含有其他app的程序，这样的ID就不行了。保险起见还是创建单独的APP ID。
<img src="https://tmyam.github.io/images/2013/11/18/new_appid.png" alt="temp" /></p>

<ul>
<li>点击<code>+</code> 按钮，进入创建页面。 <br/>
<em>App ID Description</em> 就是一个名称，随意输入就行，不做他用。 <br/>
<em>App Services</em> 应用将具有的能力，可以根据需要勾选。 <br/>
<em>App ID Prefix</em> 标示前缀，不用管。 <br/>
<em>App ID Suffix</em> 标示后缀，这里有两种选择 <strong>Explicit App ID</strong>这种就是一对一的ID，而<strong>Wildcard App ID</strong> 这种就是上面提到的一对多的ID。 <br/>
这里创建 <strong>Explicit App ID</strong> ，<em>Bundle ID:</em> 为类似 <code>com.company.xxx</code>这种样式，<code>company</code>为公司名，<code>xxx</code>为应用程序名，注意大小写一致。 <br/>
一路继续，创建成功。</li>
</ul>


<p> 当然也可以通过 <code>iTunes Connect添加App</code> 时，点击 <strong>You can register a new Bundle ID here.</strong> 来快速创建。</p>

<h2>在iTunes Connect添加App</h2>

<p>这一步需要在开始开发之前做，因为App Name可能已经被别的人占用了，一旦做完应用才创建，不得不面临改名的困境，所以在开发前先将应用名占着。（但是这也有一定风险，如果半年内没有提交该应用，那么你就永远用不了这个名字了&hellip;）</p>

<p><a href="http://my.oschina.net/joanfen/blog/133642">参考链接</a></p>

<ul>
<li>通过<a href="https://developer.apple.com/membercenter">MemberCenter</a> 点击进入<strong>iTunes Connect</strong>，这样可以使创建的ID快速生效。</li>
<li>点击 <strong>Manage Your Apps</strong>,然后点击<code>Add New App</code>按钮。</li>
</ul>


<p><img src="https://tmyam.github.io/images/2013/11/18/add_new_app.png" alt="temp" />  <br/>
然后是填写<strong>App Information</strong></p>

<ul>
<li>其中<em>SKU Number</em> 是区分你自己应用的标示，只要不重复就行，这里填写和App Name一样就行了。</li>
<li><em>Bundle ID</em> 选择之前创建的ID，然后继续。</li>
</ul>


<p>之后是选择价格界面，选择之后点击继续。</p>

<p> 最后是应用详细信息。</p>

<ul>
<li><p><strong>Version Information</strong> <br/>
 <em>Version Number</em>  版本号 <br/>
 <em>Copyright</em>  版权，填写<code>2014 company Inc</code> 就可以了。</p></li>
<li><p><strong>Category</strong>（app种类）<br/>
<img src="https://tmyam.github.io/images/2013/11/18/category.png" alt="temp" /><br/>
选择app所属的两种类型。</p></li>
<li><p><strong>Rating</strong>（分级） <br/>
一般根据情况选择，没有就全选<em>None</em>。</p></li>
<li><p><strong>Metadata</strong>（软件信息） <br/>
根据需要填写，也可以之后再更改。</p></li>
<li><p><strong>Contact Information</strong> <br/>
根据实际情况填写。</p></li>
<li><p><strong>Uploads</strong>（截图） <br/>
可以先选张上去，之后再更改。</p></li>
</ul>


<p>至此，开放前的准备工作就完成了。</p>

<h2>生成发布的描述文件</h2>

<p>在编写程序的时候需要对沙箱环境进行测试，这里使用通用的Mac developer证书，以及通用的描述文件即可达到目的。但是发布的话还需要专用的描述文件。</p>

<p><a href="http://my.oschina.net/joanfen/blog/133624">参考链接</a></p>

<ul>
<li><p>登陆 <a href="https://developer.apple.com/membercenter">MemberCenter</a></p></li>
<li><p>点击 <strong>Certificates, Identifiers &amp; Profiles</strong> 进入管理界面，点击<em>Identifiers</em> -> <em>Provisioning Profiles</em> -> <em>Distribution</em>, 点击 <code>+</code> 按钮。</p></li>
<li><p>根据提示一步一步前进，<em>Profile Name:</em>可以使用 <code>AppNameProfile</code>的样式，最后点击生成。</p></li>
<li><p><del>下载生成的描述文件，右键用Xcode打开，然后在工程中选择 <strong>3rd Party Mac Developer Application:&hellip;</strong> 的证书及对应的描述文件。如下图
<img src="https://tmyam.github.io/images/2013/11/18/code_sign.png" alt="temp" /></del></p></li>
<li><p>由于系统更新，现在描述文件的选择改变了地方，这里依然下载生成的描述文件，右键用Xcode打开，然后在工程中选择 <strong>3rd Party Mac Developer Application:&hellip;</strong> 的证书，描述的地方选择<strong>Automatic</strong>。</p></li>
</ul>


<h2>编写程序&hellip;</h2>

<p>这里不多赘述了&hellip;</p>

<h2>发布</h2>

<p>程序写好，测试完成就可以发布了。
还记得在 <strong>iTunes Connect</strong> 添加的app吗，现在可以进行完善工作了。 <br/>
目前状态 <strong>Prepare for Upload</strong></p>

<ul>
<li><p>对 <em>Description</em> 和 <em>Screenshots</em> 重写填写和上传新的截图，并保存。全部改完后点击<code>Ready to Upload Binary</code>。</p></li>
<li><p><em>Export Compliance</em> 的提问选择 NO 就可以了。之后继续进入 <strong>Waiting For Upload</strong> 状态。</p></li>
<li><p>回到Xcode工程，选择菜单 <em>Product</em> -> <em>Archive</em>,进入 Organizer 的 Archives 界面。</p></li>
<li><p>选择<code>validate...</code>按钮验证app是否能通过验证。 <br/>
这步是最容易发现错误的地方，错误的种类也多种多样，根据实际的错误自己修改吧。</p></li>
<li><p><del>如果没有错误，完成之后点击<code>Distribute...</code>按钮，等待一段漫长的上传之后，回到<strong>iTunes Connect</strong>，状态变成了 <strong>Upload Received</strong>。</del></p></li>
<li><p>这里现在变成了<code>Upload to App Store</code>,并且在弹出的选择框中选择描述文件，如下图
<img src="https://tmyam.github.io/images/2015/03/09/upload_app.png" alt="temp" />
等待一段漫长的上传之后，回到<strong>iTunes Connect</strong>，状态变成了 <strong>Upload Received</strong>。</p></li>
<li><p>等待一段时间，机器会进行初步审核，成功后状态会变成 <strong>Waiting For Review</strong> ，失败的话有具体的提示。</p></li>
<li><p>之后就是等待人工审核了，这里只有等了，一般2~10天不等，升级会快一些。如果想取消发布，可以点击 <strong>Binary Details</strong> ，在新页面点击右上角的 <code>Reject This Binary</code>按钮。</p></li>
<li><p>漫长的等待之后，状态会变成 <strong>In Review</strong>，如果不顺利，那么又要从头开始上传，接着是漫长的等待&hellip; <br/>
如果顺利，状态之后会变成 <strong>Processing for App Store</strong>，最后是 <strong>Ready for Sale</strong>，至此发布完成。</p></li>
</ul>


<h3>更新</h3>

<ul>
<li>2016-03-09 第一次更新，环境: <code>(mac 版本 10.11.3 ) ( Xcode 7.2.1 )</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac app开发中添加第三方framework]]></title>
    <link href="https://tmyam.github.io/blog/2013/11/05/mac-develop-add-framework/"/>
    <updated>2013-11-05T15:23:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2013/11/05/mac-develop-add-framework</id>
    <content type="html"><![CDATA[<p>环境: <code>(mac 版本 10.9 ) ( Xcode 5.0 )</code></p>

<hr />

<p><br/></p>

<h4>步骤很简单，但是总是忘记，所以在这里做个记录。</h4>

<ul>
<li>在工程目录中建个文件夹，存放将要添加的第三方framework</li>
</ul>


<!-- more -->


<ul>
<li><p>在工程的 <em>Build Phases</em> 栏点击菜单，如下图，添加 <em>Copy Files</em><br/>
<img src="https://tmyam.github.io/images/2013/11/05/add_copy_files.png" alt="temp" /></p></li>
<li><p>选择<code>Frameworks</code>,点击<code>+</code>号，然后找到存放第三方framework的文件夹，选择要添加的framework，如下图<br/>
<img src="https://tmyam.github.io/images/2013/11/05/add_framework.png" alt="temp" /></p></li>
<li><p>展开<em>Link Binary With Libraries</em> 点击<code>+</code>号，同上一步一样，找到找到存放第三方framework的文件夹，选择要使用的framework，如下图<br/>
<img src="https://tmyam.github.io/images/2013/11/05/use_framework.png" alt="temp" /></p></li>
</ul>


<p>右侧的文件管理里，刚添加的framework会位于顶端，可以稍作整理，移动到Frameworks组里，这时添加就完成了可以随意使用了。</p>

<h4>修改关联路径</h4>

<p>一般情况下，如果将framework文件放到了工程文件夹的里面，那么在移动工程文件夹后，编译工程会出现无法找到framework头文件的错误，这是因为工程默认添加的路径使用了绝对路径的关系。</p>

<ul>
<li>修改 <br/>
在Xcode的 <em>Build Settings</em> 里找到 <em>Framework Search Paths</em> 栏，修改参数为 <br/>
$(SRCROOT)/<code>当前工程名</code>/<code>第三方framework所在的文件夹</code> <br/>
例如：
<img src="https://tmyam.github.io/images/2013/11/05/change_path_framework.png" alt="temp" />
这样就算移动工程文件夹，也不会报错了。</li>
</ul>


<h4>清除冗余文件</h4>

<p>对于已经添加的第三方framework，在生成的app中可以查看到framework的头文件，出于两个目的的考虑。<br/>
1. 由于程序中已经引入了这些头文件，所以重复添加浪费了空间。<br/>
2. 出于安全性的考虑，防止被别人使用或者破解。</p>

<p><strong>清除方法：</strong></p>

<ul>
<li><p>在工程的 <em>Build Phases</em> 栏点击菜单，入最上面的图里，这次添加 <em>Run Script</em><br/>
<img src="https://tmyam.github.io/images/2013/11/05/add_copy_files.png" alt="temp" /></p></li>
<li><p>贴入如下代码</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;build path ${TARGET_BUILD_DIR}&quot;</span>
</span><span class='line'><span class="nb">cd</span> <span class="k">${</span><span class="nv">TARGET_BUILD_DIR</span><span class="k">}</span>/<span class="k">${</span><span class="nv">FULL_PRODUCT_NAME</span><span class="k">}</span>/Contents/Frameworks
</span><span class='line'>rm -rf */Headers
</span><span class='line'>rm -rf */Versions/*/Headers
</span><span class='line'>rm -rf */Versions/*/Resources/*/Contents/Headers
</span><span class='line'>rm -rf */PrivateHeaders
</span><span class='line'>rm -rf */Versions/*/PrivateHeaders
</span><span class='line'>rm -rf */Versions/*/Resources/*/Contents/PrivateHeaders
</span></code></pre></td></tr></table></div></figure>


<p>
如下图 <br/>
<img src="https://tmyam.github.io/images/2013/11/05/clean_framework.png" alt="temp" /></p>

<h4>编译问题</h4>

<p>对于编译出现签名错误的问题，可以查看<a href="http://tmyam.github.io/blog/2013/11/05/xcode5-mac-app-running-on-lion/">链接</a>。</p>

<blockquote><p>/Users/…/xxx.app: code object is not signed at all In subcomponent: /Users/…/xxx.app/Contents/Frameworks/xxx.framework Command /usr/bin/codesign failed with exit code 1</p></blockquote>

<hr />

<p><br/>
<strong>另外，由于framework中含有文件夹的快捷方式，在使用svn等版本管理软件时，新checkout的framework中的快捷方式会丢失，虽然编译运行没有问题，但是提交到mac appstore时无法通过，所以需要注意做压缩备份。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 5.0在Mavericks下创建的mac app在Lion下无法运行的问题]]></title>
    <link href="https://tmyam.github.io/blog/2013/11/05/xcode5-mac-app-running-on-lion/"/>
    <updated>2013-11-05T10:05:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2013/11/05/xcode5-mac-app-running-on-lion</id>
    <content type="html"><![CDATA[<h2>前因</h2>

<p>最近mac操作系统升级到了Mavericks(10.9)，编程工具Xcode也升级到了5.0，但是升级之后问题多多。
先是以前创建的mac app工程使用到第三方framework的地方，无法编译通过了，其次就是编译出的程序在Lion(10.7)系统下无法运行了，要做兼容的话，真是让人头疼。</p>

<!-- more -->


<h2>解决</h2>

<h3>引用第三方framework</h3>

<p>原本mac app开发使用的第三方framework是不需要签名的，但是系统升级到Mavericks，Xcode升级到5.0后，再引用无签名的第三方framework时就无法编译通过了，这对于使用资源是很不利的。</p>

<blockquote><p>/Users/&hellip;/xxx.app: code object is not signed at all
In subcomponent: /Users/&hellip;/xxx.app/Contents/Frameworks/xxx.framework
Command /usr/bin/codesign failed with exit code 1</p></blockquote>

<p>解决方案：</p>

<ul>
<li><p>方案1: 这个问题只出现在Mavericks + Xcode5.0下面，可能是一个系统bug，所以可以选择降系统。（比较麻烦）</p></li>
<li><p>方案2: 可以找到第三方framework的开源文件，自己使用签名进行编译。（不够通用）</p></li>
<li><p>方案3: 在工程的 <code>Other Code Signing Flags</code> 栏加入 <code>--deep</code> 给第三方framework签名。<a href="http://support.hockeyapp.net/discussions/problems/14709-code-sign-error-in-xcode-501-for-os-x-target">参考链接</a></p></li>
</ul>


<h3>Lion(10.7)的兼容</h3>

<p>Mavericks(10.9) + Xcode5.0创建的mac app程序无法在Lion(10.7)上面运行，就算选择了tag为10.7也不行。<br/>
究其原因发现，新创建的程序下面多了个 <em>Base.lproj</em> 文件夹，<em>MainMenu.xib</em> 文件就在里面，而在以前，<em>MainMenu.xib</em> 文件是在 <em>en.lproj</em> 文件夹下的。</p>

<p>而且系统也有相应的提示</p>

<blockquote><p>warning: Internationalization of /Users/&hellip;/Base.lproj/MainMenu.xib is not available when compiling for targets before Mac OS X 10.8</p></blockquote>

<ul>
<li>修改很简单，点击<em>MainMenu.xib</em>，找到如下图的位置，点击 <code>Base</code><br/>
<img src="https://tmyam.github.io/images/2013/11/05/xib_change.png" alt="temp" /><br/>
之后弹出对话框，如下图，点击 <code>Move</code>
<img src="https://tmyam.github.io/images/2013/11/05/xib_move.png" alt="temp" /> <br/>
工程中的<code>Base.lproj</code>文件夹已经没有用了，可以选择删除。</li>
</ul>


<p>这样编译出的app就可以兼容Lion(10.7)了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为博客添加分类和评论功能]]></title>
    <link href="https://tmyam.github.io/blog/2013/10/09/category-and-comment/"/>
    <updated>2013-10-09T15:03:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2013/10/09/category-and-comment</id>
    <content type="html"><![CDATA[<h2>1.右侧边栏分类</h2>

<ul>
<li><a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/">参考链接</a><br/>
如果想使用中文名分类，可以修改 <em>category_list.html</em> 中的<code>&lt;h1&gt;Categories&lt;/h1&gt;</code>为
<code>&lt;h1&gt;文章分类&lt;/h1&gt;</code>。</li>
</ul>


<!-- more -->


<h2>2.添加关于页面</h2>

<p><a href="http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html">参考链接</a></p>

<p>打开文件source\_includes\custom\navigation.html，默认情况下如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;main-navigation&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Blog<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>Archives<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以在此添加一个标签页，使用命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake new_page<span class="o">[</span><span class="s1">&#39;about&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建一个页面，页面路径为source\about\index.markdown;</p>

<p>修改上面的navigation.html为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;main-navigation&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>首页<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>归档<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/about&quot;</span><span class="nt">&gt;</span>关于<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2><del>3.添加disqus评论</del></h2>

<ul>
<li><p>使用第三方的评论系统，在<a href="http://www.disqus.com">disqus</a>注册一个账号，并登录。</p></li>
<li><p>参考下图，点击<code>Dashboard</code></p></li>
</ul>


<p><img src="https://tmyam.github.io/images/2013/10/09/comment_dashboard.png" alt="temp" /></p>

<ul>
<li>然后点击下图中的<code>add</code>按钮</li>
</ul>


<p><img src="https://tmyam.github.io/images/2013/10/09/comment_add.png" alt="temp" /></p>

<ul>
<li><p>之后根据提示添加信息，一步一步直到完成。</p></li>
<li><p>然后修改<strong>_config.yml</strong>文件</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Disqus Comments </span>
</span><span class='line'>disqus_short_name: tmyam   <span class="c"># tmyam为添加站点信息时的Site Shortname (注意前面必须有空格)</span>
</span><span class='line'>disqus_show_comment_count: <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4.添加多说评论</h2>

<p>disqus作为国外的评论系统，可用的登录基本都被墙了，所以选择国内的系统还是很有必要的。</p>

<ul>
<li><p>到 <a href="http://duoshuo.com">多说</a> 关联个账号,然后点击首页的<code>我要安装</code>,填写信息。</p></li>
<li><p><a href="http://havee.me/internet/2013-02/add-duoshuo-commemt-system-into-octopress.html">参考链接</a></p></li>
</ul>


<p><br/></p>

<h3>参考</h3>

<p><a href="http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html">http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac下编写blog]]></title>
    <link href="https://tmyam.github.io/blog/2013/10/09/write-blog/"/>
    <updated>2013-10-09T10:52:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2013/10/09/write-blog</id>
    <content type="html"><![CDATA[<h2>1.编写</h2>

<ul>
<li><p>下载markdown的编辑工具,<a href="http://mouapp.com">Mou</a></p></li>
<li><p>在终端的octopress目录下，输入</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake new_post<span class="o">[</span><span class="s1">&#39;article name&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后可以在source/_post/目录下找到一个.markdown文件，使用<a href="http://mouapp.com">Mou</a>打开它，写入你想写的内容。</p>

<!-- more -->


<ul>
<li><p>特殊需求 <br/>
由于markdown无法插入空格，这里可以使用html的<code>&amp;nbsp;</code>代替，同样换行可以使用<code>&lt;br/&gt;</code>。 <br/>
另外由于无法调整文字的颜色和大小，这里也需要使用html代替。 <br/>
<code>&lt;font color=green&gt;绿色&lt;/font&gt;</code>&nbsp;&nbsp; <font color=green>绿色</font> <br/>
<code>&lt;font size=+2&gt;大2号字&lt;/font&gt;</code>&nbsp;&nbsp;&nbsp;&nbsp; <font size=+2>大2号字</font>  <br/>
+表示比当前字号大，-表示比当前字号小。</p></li>
<li><p>图片<br/>
如果要在文章中使用图片，直接copy到<strong>/source/images</strong>目录下即可。在文章中可以直接使用<code>![temp](/images/temp.png)</code>。也可以选一些大的图床站点，使用链接的方式。<br/>
例如：<img src="https://tmyam.github.io/images/2013/10/09/temp.png" alt="temp" /> <br/>
如果需要调整图片大小，则需要使用html。    <br/>
<code>&lt;img src="https://tmyam.github.io/images/temp.png" alt="faild" width="100"/&gt;</code> <br/>
<img src="https://tmyam.github.io/images/2013/10/09/temp.png" alt="faild" width="100"/></p></li>
<li><p>首页缩略显示<br/>
在首页展示文章的一部分内容，而不是显示全部。<br/>
只需要在文章的markdown文件中，在需要显示在首页的文字后面添加<code>&lt;!-- more --&gt;</code>就行了。</p></li>
</ul>


<p>如果想将Read on 修改为中文，可以修改_config.yml文件<br/>
excerpt_link: &ldquo;Read on &rarr;&rdquo;  # &ldquo;Continue reading&rdquo; link text at the bottom of excerpted articles 中的<code>Read on</code> 改为 <code>阅读全文</code>。</p>

<h2>2.代码高亮</h2>

<p>octopress原生支持代码高亮，<a href="http://octopress.org/docs/blogging/code/">参考链接</a> <br/>
使用<code>Backtick</code>来实现语法高亮，<a href="http://m.blog.csdn.net/blog/trochiluses/12906265">参考链接</a></p>

<ul>
<li>语法

<blockquote><p>` ` ` [language] [title] [url] [link text] [linenos:false] [start:#] [mark:#,#-#] <br/>
code snippet <br/>
` ` `</p></blockquote></li>
</ul>


<p>language: 指明你所使用的语言 <br/>
title: 代码标题 <br/>
url: 代码链接，点击这个可以下载你的代码 <br/>
link text: 对链接的解释文本，默认是link <br/>
start:#: 行号从哪里开始 <br/>
mark:#,#-#: 标记某一行代码 <br/>
linenos:false: 对高亮代码块不添加行号</p>

<p>例如：</p>

<blockquote><p>` ` ` sh <br/>
rake new_post[&lsquo;article name&rsquo;] <br/>
` ` `</p></blockquote>

<p>显示为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake new_post<span class="o">[</span><span class="s1">&#39;article name&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
由于一旦设置了高亮格式，之后所有的代码高亮都会使用这种格式，有好处也有坏处。可以在下一个代码高亮的地方将<code>language</code>设置成<code>text</code>来取消对下面的影响。</p>

<ul>
<li>常用的高亮格式，<a href="http://vvstyle.com/blog/2013/08/13/backtick-code/">参考链接</a> <br/>
text: 无格式 <br/>
sh: shell脚本 <br/>
objc: Objective-C</li>
</ul>


<h2>3.生成</h2>

<ul>
<li>生成静态文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>rake generate
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>预览<br/>
地址 <a href="http://localhost:4000">http://localhost:4000</a> ,时时的修改markdown文件，可以刷新网页看到刚刚修改的效果。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>部署到GitHub上</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<h2>4.备份</h2>

<p>将文件更新备份到github上。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git add -A
</span><span class='line'>git commit -m <span class="s1">&#39;your message&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果遇到<strong>warning</strong></p>

<blockquote><p>warning: push.default is unset; its implicit value is changing in Git 2.0 from &lsquo;matching&rsquo; to &lsquo;simple&rsquo;. To squelch this messageand maintain the current behavior after the default changes, use:&hellip;</p></blockquote>

<p>推荐使用下面命令设置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git config --global push.default simple
</span></code></pre></td></tr></table></div></figure>


<p><br/></p>

<h3>参考</h3>

<p><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac下使用github+Octopress搭建博客]]></title>
    <link href="https://tmyam.github.io/blog/2013/10/08/the-first/"/>
    <updated>2013-10-08T18:09:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2013/10/08/the-first</id>
    <content type="html"><![CDATA[<p>我的第一篇博文 <br/>
<code>(mac 版本 10.8.5)</code></p>

<h2>1.git配置</h2>

<ul>
<li>申请<a href="https://github.com">github</a>账号</li>
<li>配置git环境</li>
</ul>


<p><strong>配置用户信息</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git config --global user.email <span class="s2">&quot;xxx@xxx.com&quot;</span>
</span><span class='line'>git config --global user.name <span class="s2">&quot;xxx&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
可以使用 <code>git config --list</code> 查看配置的信息</p>

<!-- more -->


<p><strong>生成证书</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh-keygen -t rsa -C <span class="s2">&quot;xxx@xxx.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>登录</strong><a href="https://github.com">github</a><br/>
拷贝~/.ssh/id_rsa.pub的内容，在github的<code>Account Settings</code>的<code>SSH Keys</code>里，点<code>Add SSH Keys</code>，将内容粘贴到”Key”中，并输入”Title”.</p>

<h2>2.安装ruby</h2>

<p>使用Octopress需要最低Ruby版本为1.9.3,所以必须安装ruby。</p>

<ul>
<li>如果没有安装了XCode及Command Line Tools则需要先安装apple-gcc42。</li>
<li>使用RVM安装ruby最新版本</li>
</ul>


<p><strong>安装rvm.</strong> <a href="http://stackoverflow.com/questions/3696564/how-to-update-ruby-to-1-9-x-on-mac">参考链接</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>\curl -L https://get.rvm.io | bash -s stable --ruby
</span></code></pre></td></tr></table></div></figure>


<p>由于国内被墙的缘故，可能遇见 <code>curl: (7) couldn't connect to host</code> 错误.可以使用下面的方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>\curl https://rawgithub.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash -s stable --ruby
</span></code></pre></td></tr></table></div></figure>


<p><strong>查看网络上最新的ruby版本</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rvm list known
</span></code></pre></td></tr></table></div></figure>


<p><strong>安装ruby</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rvm install ruby-2.0.0-p247
</span></code></pre></td></tr></table></div></figure>


<p>如果遇到以下错误</p>

<blockquote><p>Error running &lsquo;requirements_osx_port_libs_install autoconf automake libtool pkgconfig apple-gcc42 libiconv libyaml libffi readline libxml2 libxslt libksba openssl curl-ca-bundle sqlite3 zlib gdbm ncurses&rsquo;, please read /Users/xxx/.rvm/log/1371125385_package_install_autoconf_automake_libtool_
pkgconfig_apple-gcc42_libiconv_libyaml_libffi_readline_libxml2_libxslt_libksba_openssl_curl-ca-bundle_sqlite3_zlib_gdbm_ncurses.log</p></blockquote>

<p>可以尝试使用下面的语句解决. <a href="http://stackoverflow.com/questions/17086996/rvm-install-issue-unable-to-execute-port-autoconf">参考链接</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rvm autolibs brew
</span></code></pre></td></tr></table></div></figure>


<p>如果遇到以下错误</p>

<blockquote><p>Error running &lsquo;requirements_osx_brew_libs_install autoconf automake libtool pkg-config libyaml readline libksba openssl&rsquo;,
please read /Users/zrshz/.rvm/log/1381463190_ruby-2.0.0-p247/package_install_autoconf_automake_libtool_pkg-config_libyaml_readline_libksba_openssl.log</p>

<h4>Requirements installation failed with status: 1.</h4></blockquote>

<p>可以先安装homebrew</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo su
</span><span class='line'>curl -L http://github.com/mxcl/homebrew/tarball/master <span class="p">|</span> tar xz --strip <span class="m">1</span> -C /usr/local
</span></code></pre></td></tr></table></div></figure>


<p>修改权限</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo chown -R <span class="sb">`</span>whoami<span class="sb">`</span> /Library/Caches/Homebrew/
</span></code></pre></td></tr></table></div></figure>


<p>之后重新安装就行了。</p>

<p><strong>使用</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rvm use ruby-2.0.0-p247
</span></code></pre></td></tr></table></div></figure>


<p>可以使用 <code>rvm list</code> 查看安装的ruby的状态。</p>

<h2>3.部署blog</h2>

<ul>
<li><p>创建git的blog</p>

<ol>
<li>点击github主页的 <strong>Tab</strong> <code>Repositories</code>,点击 <code>New</code> 按钮,创建一个public的仓库。</li>
<li>仓库的名称必须为 <em>your_username.github.com</em> ,其中<strong>your_username</strong>是需要修改的地方,然后点击 <code>Create repository</code> 按钮。</li>
<li>点击右侧的 ”Settings” 图标，在 <strong>“GitHub Pages”</strong> 栏，点击 <code>Automatic Page Generator</code> 按钮。</li>
<li>内容不需要填，直接点击 <code>Continue to Layouts</code> 按钮。</li>
<li>接着是选择模板，直接点击 <code>PUBLISH</code> 按钮即可。大约十分钟之后可以看到生成的静态页面，不过这个页面是没什么用的。<br/>
<br/></li>
</ol>
</li>
<li><p>配置<a href="http://octopress.org">Octopress</a></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd </span>blog               <span class="c"># 想要安装的Octopress的文件夹</span>
</span><span class='line'>git clone https://github.com/imathis/octopress.git
</span><span class='line'><span class="nb">cd </span>octopress
</span><span class='line'>gem install bundler   <span class="c"># 安装依赖</span>
</span><span class='line'>bundle install        
</span><span class='line'>rake install          <span class="c"># 安装Octopress默认的主题</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>部署</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>执行完后会要求输入仓库地址，照着写就行了<em>git@github.com:your_username/your_username.github.com.git</em>，其中<strong>your_username</strong>是需要修改的地方。</p>

<ul>
<li>修改配置文件, <a href="http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html">参考链接</a></li>
</ul>


<p><strong>可以执行以下命令生成页面和预览博客</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake generate      <span class="c"># 生成文件(public文件夹下)</span>
</span><span class='line'>rake preview      <span class="c"># 生成本地预览，地址 http://localhost:4000</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上传到github</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake deploy        <span class="c"># 会先将public下的文件复制到_deploy下,然后将_deploy下的内容push到GitHub的master分支上</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果出现<code>ERROR: Repository not found.</code>错误，可以使用下面的方法解决。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rm -rf _deploy     <span class="c"># 在octopress目录下</span>
</span><span class='line'>git clone https://github.com/your_username/your_username.github.com.git <span class="s2">&quot;_deploy&quot;</span>       <span class="c"># 注意修改your_username</span>
</span><span class='line'>rake generate   <span class="c"># 再次执行</span>
</span><span class='line'>rake deploy       
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以看到上传的主题博客了。</p>

<h2>4.备份资源文件</h2>

<p>在octopress目录下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;your message&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<h2>更新 Octopress</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git remote add octopress git://github.com/imathis/octopress.git
</span><span class='line'>git pull octopress master     <span class="c"># Get the latest Octopress</span>
</span><span class='line'>bundle install                <span class="c"># Keep gems updated</span>
</span><span class='line'>rake update_source            <span class="c"># update the template&#39;s source</span>
</span><span class='line'>rake update_style             <span class="c"># update the template&#39;s style</span>
</span></code></pre></td></tr></table></div></figure>


<p><br/></p>

<h3>参考</h3>

<p> <a href="http://firestudio.cn/blog/2013/01/05/ru-he-tong-guo-github-yu-octopress-lai-da-jian-zi-ji-de-bo-ke/">http://firestudio.cn/blog/2013/01/05/ru-he-tong-guo-github-yu-octopress-lai-da-jian-zi-ji-de-bo-ke/</a></p>
]]></content>
  </entry>
  
</feed>
