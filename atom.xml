<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tmyam's blog]]></title>
  <link href="https://tmyam.github.io/atom.xml" rel="self"/>
  <link href="https://tmyam.github.io/"/>
  <updated>2017-06-10T14:53:21+08:00</updated>
  <id>https://tmyam.github.io/</id>
  <author>
    <name><![CDATA[tmyam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javaweb学习：Maven下使用springmvc]]></title>
    <link href="https://tmyam.github.io/blog/2017/06/11/javawebxue-xi-:mavenxia-shi-yong-springmvc/"/>
    <updated>2017-06-11T14:18:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/06/11/javawebxue-xi-:mavenxia-shi-yong-springmvc</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>对于Java web应用来说，SpringMVC已经越来越流行。这里就对SpringMVC环境的搭建做一个记录。</p>

<h3>创建Maven Java web项目</h3>

<p>这里可以参考以前的文章，这里就不多说了。</p>

<!--more-->


<h3>创建目录</h3>

<p>1、 在 <strong>src/main/</strong> 下创建 java 和 resources 目录。创建好的目录，程序是不识别的，我们需要进行一下配置：</p>

<p><img src="https://tmyam.github.io/images/2017/06/11/01.jpg" alt="" /></p>

<blockquote><p><strong>Sources</strong> 一般用于标注类似 src 这种可编译目录。有时候我们不单单项目的 src 目录要可编译，还有其他一些特别的目录也许我们也要作为可编译的目录，就需要对该目录进行此标注。只有 Sources 这种可编译目录才可以新建 Java 类和包，这一点需要牢记。</p>

<p><strong>Tests</strong> 一般用于标注可编译的单元测试目录。在规范的 maven 项目结构中，顶级目录是 src，maven 的 src 我们是不会设置为 Sources 的，而是在其子目录 main 目录下的 java 目录，我们会设置为 Sources。而单元测试的目录是 src - test - java，这里的 java 目录我们就会设置为 Tests，表示该目录是作为可编译的单元测试目录。一般这个和后面几个我们都是在 maven 项目下进行配置的，但是我这里还是会先说说。从这一点我们也可以看出 IntelliJ IDEA 对 maven 项目的支持是比较彻底的。</p>

<p><strong>Resources</strong> 一般用于标注资源文件目录。在 maven 项目下，资源目录是单独划分出来的，其目录为：src - main -resources，这里的 resources 目录我们就会设置为 Resources，表示该目录是作为资源目录。资源目录下的文件是会被编译到输出目录下的。</p>

<p><strong>Test Resources</strong> 一般用于标注单元测试的资源文件目录。在 maven 项目下，单元测试的资源目录是单独划分出来的，其目录为：src - test -resources，这里的 resources 目录我们就会设置为 Test Resources，表示该目录是作为单元测试的资源目录。资源目录下的文件是会被编译到输出目录下的。</p>

<p><strong>Excluded</strong> 一般用于标注排除目录。被排除的目录不会被 IntelliJ IDEA 创建索引，相当于被 IntelliJ IDEA 废弃，该目录下的代码文件是不具备代码检查和智能提示等常规代码功能。</p></blockquote>

<p>可以在 <strong>hellotest.iml</strong> 中看到目录被引入，可以被识别了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;content</span> <span class="na">url=</span><span class="s">&quot;file://$MODULE_DIR$&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;sourceFolder</span> <span class="na">url=</span><span class="s">&quot;file://$MODULE_DIR$/src/main/java&quot;</span> <span class="na">isTestSource=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;sourceFolder</span> <span class="na">url=</span><span class="s">&quot;file://$MODULE_DIR$/src/main/resources&quot;</span> <span class="na">type=</span><span class="s">&quot;java-resource&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;excludeFolder</span> <span class="na">url=</span><span class="s">&quot;file://$MODULE_DIR$/target&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/content&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>2、 添加依赖库
可以开始在 Maven 提供的 pom 文件(pom.xml) 添加我们spring的依赖，设置 pom.xml 前，需要到项目设置中 Maven autoload 勾选，否则无法自动下载 maven 依赖库(这是Intellij的坑)。</p>

<p><img src="https://tmyam.github.io/images/2017/06/11/02.jpg" alt="" /></p>

<p>在 pom.xml 添加 dependencies, plugins，以下是 pom.xml 设置后的完整文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>com.zhl.hellotest<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>hellotest<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>hellotest Maven Webapp<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;url&gt;</span>http://maven.apache.org<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>    <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- spring版本号 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;spring.version&gt;</span>4.3.8.RELEASE<span class="nt">&lt;/spring.version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--单元测试依赖 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>3.8.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- 表示开发的时候引入，发布的时候不会加载此包 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-orm<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-context-support<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!--spring单元测试依赖 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-test<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- spring核心包 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-web<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- SpringMVC核心包 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-webmvc<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-aop<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-beans<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>    <span class="nt">&lt;finalName&gt;</span>hellotest<span class="nt">&lt;/finalName&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加完成后，系统会自动下载所列出的依赖包，如果没有自动下载，可以在pom.xml文件中右键，选择Maven->Reimport载入。如下图：
<img src="https://tmyam.github.io/images/2017/06/11/03.jpg" alt="" /></p>

<p>3、 进行SpringMVC配置
    * 首先在resource目录下新建一个spring的配置文件springmvc.xml，文件图片和内容如下：
<img src="https://tmyam.github.io/images/2017/06/11/04.jpg" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:context=</span><span class="s">&quot;http://www.springframework.org/schema/context&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- 扫描指定包带@Controller注解的类--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&quot;com.zhl.hellotest.controller&quot;</span><span class="nt">&gt;&lt;/context:component-scan&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--视图解析器--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：如果没有加下面的内容，会导致错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
</span><span class='line'>http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在web.xml配置前端控制器，并加载springmvc.xml的配置文件，内容如下：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;!DOCTYPE web-app PUBLIC</span>
</span><span class='line'><span class="cp"> &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span>
</span><span class='line'><span class="cp"> &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;web-app&gt;</span>
</span><span class='line'>  <span class="nt">&lt;display-name&gt;</span>Archetype Created Web Application<span class="nt">&lt;/display-name&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!--springMvc前端控制器--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-name&gt;</span>SpringMVC<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器、适配器等）--&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--如果不配置，则默认加载/WEB-INFO/servlet名称-servlet.xml(springmvc-servlet.xml)--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>      <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;param-value&gt;</span>classpath:springmvc.xml<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-name&gt;</span>SpringMVC<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url-pattern&gt;</span>/<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'><span class="nt">&lt;/web-app&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>至此，文件配置完毕，下面我们用注解写一个方法测试一下，测试类放在springmvc.xml配置的扫描的包中，此处包名要与配置文件中扫描的包名一致。</li>
</ul>


<p>创建包<strong>com.zhl.hellotest.controller</strong>,java文件<strong>TestController</strong>。
<img src="https://tmyam.github.io/images/2017/06/11/05.jpg" alt="" /></p>

<p><strong>TestController</strong>内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">zhl</span><span class="o">.</span><span class="na">hellotest</span><span class="o">.</span><span class="na">controller</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 注意不加下面的import，会导致出现找不到符号 Controller等的错误 */</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ResponseBody</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by zhl on 2017/6/5.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestController</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/admin&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@ResponseBody</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">testSpring</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;My testSpring&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此代码需要说明一下：
注解 @Controller 表示这是一个控制器，当请求来时将会扫描是否有匹配的RequestMapping。
注解 @RequestMapping 表示映射的路由，这里表示的是 /admin。
注解 @ResponseBody 表示返回的响应数据。</p>

<h3>运行</h3>

<ul>
<li>编译，会出现如下错误：
<img src="https://tmyam.github.io/images/2017/06/11/06.jpg" alt="" /></li>
</ul>


<p>这里重新设置项目的java版本。
<img src="https://tmyam.github.io/images/2017/06/11/07.jpg" alt="" /></p>

<p><img src="https://tmyam.github.io/images/2017/06/11/08.jpg" alt="" /></p>

<p>点击运行，打开浏览器后输入<a href="http://localhost:8080/admin">http://localhost:8080/admin</a>，可以看到 <strong>My testSpring</strong>。
<img src="https://tmyam.github.io/images/2017/06/11/09.jpg" alt="" /></p>

<h4>参考</h4>

<p><a href="http://www.tuicool.com/articles/aMzM7jR">http://www.tuicool.com/articles/aMzM7jR</a>
<a href="http://blog.csdn.net/yege2006/article/details/51377674">http://blog.csdn.net/yege2006/article/details/51377674</a>
<a href="http://blog.csdn.net/chunleixiahe/article/details/55001989">http://blog.csdn.net/chunleixiahe/article/details/55001989</a>
<a href="http://blog.csdn.net/u011275152/article/details/45242201">http://blog.csdn.net/u011275152/article/details/45242201</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javaweb学习：创建Maven项目]]></title>
    <link href="https://tmyam.github.io/blog/2017/06/10/javawebxue-xi-:chuang-jian-mavenxiang-mu/"/>
    <updated>2017-06-10T14:12:17+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/06/10/javawebxue-xi-:chuang-jian-mavenxiang-mu</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>做项目开发，前期最重要的就是规范和整体架构，<strong>Maven</strong>正好可以规范这些方面，它是一个项目管理工具，是做java开发的不二之选。</p>

<!--more-->


<h3>Maven的作用</h3>

<ol>
<li>在开发中，为了保证编译通过，我们会到处去寻找jar包，当编译通过了，运行的时候，却发现"ClassNotFoundException"，我们想到的是，难道还差jar包？</li>
<li>每个Java项目的目录结构都没有一个统一的标准，配置文件到处都是，单元测试代码到底应该放在那里也没有一个权威的规范。</li>
<li>Maven主要做了两件事：

<ul>
<li>统一开发规范与工具</li>
<li>统一管理jar包</li>
</ul>
</li>
</ol>


<h3>搭建项目</h3>

<p>Maven的具体目录结构，不是本文的重点，这里就不做介绍了。可以 <a href="http://www.cnblogs.com/hongwz/p/5456578.html">参考链接</a></p>

<p>这里介绍如何搭建项目：</p>

<p>1、 配置Maven，参考下图：
<img src="https://tmyam.github.io/images/2017/06/10/01.jpg" alt="" /></p>

<ul>
<li>如上图标注 1 所示，Import Maven projects automatically 表示 IntelliJ IDEA 会实时监控项目的 pom.xml 文件，进行项目变动设置。</li>
<li>如上图标注2 所示，在 Maven 导入依赖包的时候是否自动下载源码和文档。默认是没有勾选的，也不建议勾选，原因是这样可以加快项目从外网导入依赖包的速度，如果我们需要源码和文档的时候我们到时候再针对某个依赖包进行联网下载即可。IntelliJ IDEA 支持直接从公网下载源码和文档的。</li>
</ul>


<p>2、 创建java web项目</p>

<p>创建<strong>Project</strong>，如下图：
<img src="https://tmyam.github.io/images/2017/06/10/02.jpg" alt="" /></p>

<p><img src="https://tmyam.github.io/images/2017/06/10/03.jpg" alt="" />
<strong>GroupId</strong> 是项目组织唯一的标识符，实际对应JAVA的包的结构，是main目录里java的目录结构。</p>

<p><strong>ArtifactId</strong> 就是项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。一般GroupId就是填com.zhl.hellotest这样子。</p>

<p><strong>Version</strong> 1.0.0-SNAPSHOT 表示还在开发中。</p>

<p>一步一步创建完成之后，会创建成功，如果缺少jar包则会去自动下载。</p>

<blockquote><p>[INFO] BUILD SUCCESS
[INFO] &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
[INFO] Total time: 9.553 s
[INFO] Finished at: 2017-06-05T10:10:35+08:00
[INFO] Final Memory: 12M/126M
[INFO] &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
[INFO] Maven execution finished</p></blockquote>

<p>创建成功的项目目录如下：
<img src="https://tmyam.github.io/images/2017/06/10/04.jpg" alt="" /></p>

<h3>Java web 启动配置</h3>

<p>1、 配置 Facets</p>

<p><img src="https://tmyam.github.io/images/2017/06/10/05.jpg" alt="" /></p>

<p><img src="https://tmyam.github.io/images/2017/06/10/06.jpg" alt="" /></p>

<p>2、 配置 Artifacts</p>

<p><img src="https://tmyam.github.io/images/2017/06/10/07.jpg" alt="" /></p>

<p><img src="https://tmyam.github.io/images/2017/06/10/08.jpg" alt="" /></p>

<p>3、 配置 Edit Configurations</p>

<p><img src="https://tmyam.github.io/images/2017/06/10/09.jpg" alt="" /></p>

<p><img src="https://tmyam.github.io/images/2017/06/10/10.jpg" alt="" /></p>

<p><img src="https://tmyam.github.io/images/2017/06/10/11.jpg" alt="" /></p>

<h3>运行项目</h3>

<p><img src="https://tmyam.github.io/images/2017/06/10/12.jpg" alt="" />
之后会自动打开浏览器的 <a href="http://localhost:8080">http://localhost:8080</a> 看到 <strong>Hello World!</strong>。</p>

<h3>创建java war发布包</h3>

<p>war包放入Tomcat后会自动解压部署，非常适合于线上环境的部署。</p>

<p>1、 配置 war包的Artifacts</p>

<p>选择从已经存在的项目打包。
<img src="https://tmyam.github.io/images/2017/06/10/13.jpg" alt="" /></p>

<p>单独为war包配置Tomcat也是可以的，这里配置在已经存在的运行环境里。
在运行 <strong>hellotest:war exploded</strong>里，配置build <strong>hellotest:war</strong>。
<img src="https://tmyam.github.io/images/2017/06/10/14.jpg" alt="" /></p>

<p>这样在运行Tomcat之后，会在 <strong>out</strong> 目录内生成 <strong>hellotest_war.war</strong> 的发布包。</p>

<h4>参考</h4>

<p><a href="http://www.cnblogs.com/hongwz/p/5456578.html">http://www.cnblogs.com/hongwz/p/5456578.html</a>
<a href="http://blog.csdn.net/myarrow/article/details/50824793">http://blog.csdn.net/myarrow/article/details/50824793</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装InteliJ IDEA]]></title>
    <link href="https://tmyam.github.io/blog/2017/06/10/an-zhuang-intelij-idea/"/>
    <updated>2017-06-10T14:05:50+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/06/10/an-zhuang-intelij-idea</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>InteliJ IDEA作为java开发工具，有其优越性存在。作为一位java初学者，选择IDE非常重要，考虑到Android Studio是在社区版的IDEA上开发的，为了减少以后的学习成本，IDEA是一个不错的选择。</p>

<h3>安装</h3>

<p>1、 在官网下载软件安装包 <a href="http://www.jetbrains.com/idea/download">下载地址</a></p>

<p> <strong>Ultimate</strong>（旗舰版），<strong>Community</strong>（社区版，开源版）</p>

<!-- more -->


<p>2、 安装
细节就不说了，很简单。</p>

<h3>目录结构</h3>

<p>网上关于IDEA创建的工程，目录结构总是和Eclipse作对比，对于没用过Eclipse的人来说，仍是一头雾水。
我的理解是<strong>Project</strong>是一个完整的项目，<strong>Module</strong>是项目中的模块，模块可以是包，可以是分层等。</p>

<h3>配置</h3>

<ul>
<li>安装最新的JDK <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">下载地址</a></li>
</ul>


<p>注意是安装 <strong>Java SE Development Kit</strong>，不是 <strong>Java SE Runtime Environment</strong>。</p>

<p>终端输入命令:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>java -version
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<blockquote><p>java version &ldquo;1.8.0_131&rdquo;
Java&trade; SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot&trade; 64-Bit Server VM (build 25.131-b11, mixed mode)</p></blockquote>

<ul>
<li>安装Tomcat</li>
</ul>


<p>1、 下载最新的Tomcat <a href="http://tomcat.apache.org">下载地址</a></p>

<p>将下载的Tomcat压缩包解压缩，得到Tomcat文件夹，文件夹可以修改名称。
然后将文件夹放入一个目录当中，这个目录可以由自己选择。这里我将内容放在：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>~/Library/Tomcat/8.5.15/
</span></code></pre></td></tr></table></div></figure>


<p>2、 修改权限
启动终端：输入下面代码，以使shell文件可以正常运行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo chmod <span class="m">755</span> ~/Library/Tomcat/8.5.15/bin/*.sh
</span></code></pre></td></tr></table></div></figure>


<p>3、 验证
在终端输入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>~/Library/Tomcat/8.5.15/bin/startup.sh
</span></code></pre></td></tr></table></div></figure>


<p>输出结果没有错误，表示安装成功，打开 <a href="http://localhost:8080/">http://localhost:8080/</a> 可以看到主页。</p>

<p>4、 关闭</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>~/Library/Tomcat/8.5.15/bin/shutdown.sh
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>配置Tomcat</li>
</ul>


<p>启动IDEA，打开<strong>Build,Execution,Deployment</strong>，参考下图设置：
<img src="https://tmyam.github.io/images/2017/06/10/idea_01.jpg" alt="temp" /></p>

<h4>参考</h4>

<p><a href="http://blog.csdn.net/u013673242/article/details/72243066">http://blog.csdn.net/u013673242/article/details/72243066</a>
<a href="http://blog.csdn.net/qq_15096707/article/details/51142509">http://blog.csdn.net/qq_15096707/article/details/51142509</a>
<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a>
<a href="http://www.jianshu.com/p/bd5b3ece8158">http://www.jianshu.com/p/bd5b3ece8158</a>
<a href="http://blog.csdn.net/huyisu/article/details/38372663">http://blog.csdn.net/huyisu/article/details/38372663</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux安装SVN服务]]></title>
    <link href="https://tmyam.github.io/blog/2017/04/15/linuxan-zhuang-svnfu-wu/"/>
    <updated>2017-04-15T15:49:26+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/04/15/linuxan-zhuang-svnfu-wu</id>
    <content type="html"><![CDATA[<h3>安装SVN软件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install subversion
</span></code></pre></td></tr></table></div></figure>


<h3>创建目录</h3>

<ul>
<li>新建仓库目录</li>
</ul>


<!--more-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo mkdir -p /home/svn/projects
</span></code></pre></td></tr></table></div></figure>


<p>一般来说，可以创建在任何位置</p>

<ul>
<li>生成svn仓库</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo svnadmin create /home/svn/projects
</span></code></pre></td></tr></table></div></figure>


<h3>配置</h3>

<ul>
<li>修改仓库配置</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> /home/svn/projects/conf/ <span class="c"># 进入配置文件夹</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>svnserve.conf 配置服务器文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo nano svnserve.conf
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>general<span class="o">]</span>
</span><span class='line'><span class="c"># 匿名访问的权限，可以是read,write,none,默认为read</span>
</span><span class='line'>anon-access <span class="o">=</span> none
</span><span class='line'><span class="c"># 认证用户的权限，可以是read,write,none,默认为write</span>
</span><span class='line'>auth-access <span class="o">=</span> write
</span><span class='line'><span class="c"># 密码数据库的路径，去掉前面的#</span>
</span><span class='line'>password-db <span class="o">=</span> passwd
</span><span class='line'><span class="c"># 配置权限文件</span>
</span><span class='line'>authz-db <span class="o">=</span> authz
</span><span class='line'><span class="c"># 仓库名 - 根据自己情况修改</span>
</span><span class='line'><span class="nv">realm</span> <span class="o">=</span> projects
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意</strong>：所有的行都必须顶格，否则报错。</p>

<ul>
<li>authz 配置权限</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo nano authz
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>groups<span class="o">]</span>
</span><span class='line'><span class="c"># harry_and_sally = harry,sally</span>
</span><span class='line'><span class="c"># harry_sally_and_joe = harry,sally,&amp;joe</span>
</span><span class='line'><span class="nv">admin</span> <span class="o">=</span> tmyam <span class="c"># admin是用户组，tmyam是用户</span>
</span><span class='line'><span class="nb">test</span> <span class="o">=</span> one，two
</span><span class='line'>
</span><span class='line'><span class="o">[</span>projects:/<span class="o">]</span>
</span><span class='line'>@admin <span class="o">=</span> rw  <span class="c"># admin用户组的所有用户，对仓库有读写权限</span>
</span><span class='line'>@test <span class="o">=</span> r    <span class="c"># test 用户组的所有用户，对仓库有只读权限</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>projects:/test<span class="o">]</span>
</span><span class='line'><span class="nv">one</span> <span class="o">=</span> rw    <span class="c"># one用户对仓库下的test文件夹有读写权限</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>passwd 配置密码</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo nano passwd
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>users<span class="o">]</span>
</span><span class='line'><span class="c"># harry = harryssecret</span>
</span><span class='line'><span class="c"># sally = sallyssecret</span>
</span><span class='line'><span class="nv">tmyam</span> <span class="o">=</span> 1234
</span><span class='line'><span class="nv">one</span> <span class="o">=</span> 1234
</span><span class='line'><span class="nv">two</span> <span class="o">=</span> 1234
</span></code></pre></td></tr></table></div></figure>


<h3>启动服务</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>killall svnserve
</span><span class='line'>svnserve -d -r /home/svn
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 查看启动情况</span>
</span><span class='line'>ps aux <span class="p">|</span> grep svn
</span><span class='line'>
</span><span class='line'><span class="c"># 查看端口使用情况，SVN默认端口：3690</span>
</span><span class='line'>netstat -tln
</span></code></pre></td></tr></table></div></figure>


<h3>设置开机自启动</h3>

<ul>
<li>查看svnserve位置</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>whereis svnserve
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意</strong>：我们用终端操作的时候，可以直接使用svnserve命令，
但是在/etc/rc.local 文件中必须写上完整的路径！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo nano /etc/rc.local
</span></code></pre></td></tr></table></div></figure>


<p>在<code>exit 0</code>之前添加：</p>

<blockquote><p>/usr/bin/svnserve -d -r /home/svn</p></blockquote>

<h3>连接</h3>

<p>你的电脑使用 <code>svn://你的域名/projects</code> 进行连接。</p>

<h4>参考</h4>

<p><a href="http://shumeipai.nxez.com/2013/08/27/building-svn-come-in-raspberry.html">http://shumeipai.nxez.com/2013/08/27/building-svn-come-in-raspberry.html</a> <br/>
<a href="http://www.cnblogs.com/LusYoHo/p/6056377.html">http://www.cnblogs.com/LusYoHo/p/6056377.html</a> <br/>
<a href="http://blog.csdn.net/testcs_dn/article/details/45395645">http://blog.csdn.net/testcs_dn/article/details/45395645</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVN仓库备份和迁移]]></title>
    <link href="https://tmyam.github.io/blog/2017/03/28/svncang-ku-qian-yi-he-he-bing/"/>
    <updated>2017-03-28T15:09:11+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/03/28/svncang-ku-qian-yi-he-he-bing</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>本文主要是讲如何将多个不同地址的SVN仓库进行备份，和根据需要进行合并。</p>

<h3>仓库备份</h3>

<ul>
<li><strong>svnadmin dump</strong></li>
</ul>


<p>1、备份方式多样 <br/>
2、如果版本数过多，dump的过程将非常慢 <br/>
3、备份耗时，恢复更耗时 <br/>
4、备份时数据变大，恢复后数据可能会变小 <br/>
5、库下的<code>passwd</code>和<code>authz</code>不会备份</p>

<!--more-->


<ul>
<li>全备份</li>
</ul>


<p>在需要备份SVN仓库的服务器上，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 压缩备份</span>
</span><span class='line'>sudo svnadmin dump /path/repository <span class="p">|</span> sudo gzip &gt; /path/repository-backup.gz.2017-03-28
</span><span class='line'>
</span><span class='line'><span class="c"># 不压缩备份</span>
</span><span class='line'>sudo svnadmin dump /path/repository &gt; /path/repository-backup.2017-03-28
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>只备份指定的子目录</li>
</ul>


<p>1、导出整个库的内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>svnadmin dump /path/repository &gt; /path/repository-backup.2017-03-28
</span></code></pre></td></tr></table></div></figure>


<p>2、从备份文件中过滤出要导出的目录(可以过滤多个目录)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cat /path/repository-backup.2017-03-28 <span class="p">|</span> svndumpfilter  include /projects &gt; /path/projects-backup.2017-03-28
</span></code></pre></td></tr></table></div></figure>


<p>3、选择是否压缩</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gzip /path/projects-backup.2017-03-28
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意</strong>: <code>projects</code>目录必须是没有<strong>rename</strong>的目录，如果是<strong>rename</strong>后的目录，则导出的文件都是空记录，使用<strong>rename</strong>前的目录名导出的备份还是<strong>rename</strong>前的。 <br/>
为了正确导出<strong>rename</strong>后的文件，假如<strong>rename</strong>前的目录名为<code>apple</code>，步骤2改为<code>include /projects /apple</code>，这样就可以导出<strong>rename</strong>后的文件了。</p>

<h3>仓库迁移</h3>

<ul>
<li>使用FTP等工具，将备份的文件传输到目的服务器上，例如 <code>/home</code>目录下</li>
</ul>


<h3>仓库合并</h3>

<ul>
<li>在目的服务器上创建一个主仓库 <code>/path/main_repository</code></li>
<li><p>在本地checkout目的服务器的主仓库</p></li>
<li><p>如果需要将迁移的仓库存储到SVN中指定的目录 <code>A</code> 下，则在本地创建这个指定的目录 <code>A</code>，并用svn工具提交到目的服务器。然后登录目的服务器：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 解压缩合并</span>
</span><span class='line'>sudo zcat /home/repository-backup.gz.2017-03-28 <span class="p">|</span> sudo svnadmin load /path/main_repository --parent-dir A
</span><span class='line'>
</span><span class='line'><span class="c"># 不解压缩合并</span>
</span><span class='line'>sudo svnadmin load /path/main_repository --parent-dir A  &lt; /home/repository-backup.2017-03-28
</span></code></pre></td></tr></table></div></figure>


<p>参数 <code>--parent-dir</code> 是指定版本库<code>main_repository</code>下的具体路径，这里是第一级目录<code>A</code>.</p>

<ul>
<li>如果不用迁移到指定目录下，只需要迁移到根目录下，则登录目的服务器：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 解压缩合并</span>
</span><span class='line'>sudo zcat /home/repository-backup.gz.2017-03-28 <span class="p">|</span> sudo svnadmin load /path/main_repository
</span><span class='line'>
</span><span class='line'><span class="c"># 不解压缩合并</span>
</span><span class='line'>sudo svnadmin load /path/main_repository &lt; /home/repository-backup.2017-03-28
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以将多个仓库合并成一个仓库了。</p>

<h3>仓库恢复</h3>

<ul>
<li>如果仓库遇到不可修复的问题或者内容够乱，需要恢复到以前备份的仓库。</li>
<li>使用FTP等工具，将备份的文件传输到需要恢复的服务器上，例如 <code>/home</code>目录下</li>
<li>登录需要恢复的服务器</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 建立新的svn仓库</span>
</span><span class='line'>sudo svnadmin create /path/new_repository
</span><span class='line'>
</span><span class='line'><span class="c"># check</span>
</span><span class='line'>ls -l /path/new_repository
</span><span class='line'>
</span><span class='line'><span class="c"># 赋予组成员对所有新加入文件仓库的文件拥有相应的权限</span>
</span><span class='line'>sudo chmod -R g+rws /path/new_repository
</span><span class='line'>
</span><span class='line'><span class="c"># 导入没压缩数据</span>
</span><span class='line'>sudo svnadmin load /path/new_repository &lt; /home/repository-backup.2017-03-28
</span><span class='line'>
</span><span class='line'><span class="c"># 导入被压缩数据</span>
</span><span class='line'>sudo zcat /home/repository-backup.gz.2017-03-28 <span class="p">|</span> sudo svnadmin load /path/new_repository
</span><span class='line'>
</span><span class='line'><span class="c"># 删除旧仓库</span>
</span><span class='line'>sudo rm -r /path/main_repository
</span><span class='line'>
</span><span class='line'><span class="c"># 修改新仓库名</span>
</span><span class='line'>sudo mv /path/new_repository /path/main_repository
</span><span class='line'>
</span><span class='line'><span class="c"># 修改权限</span>
</span><span class='line'>sudo chown -R www-data:subversion /path/main_repository
</span></code></pre></td></tr></table></div></figure>


<p>如果是清空svn仓库，则只要去掉导入的步骤就可以了。</p>

<p><br/></p>

<h4>参考</h4>

<p><a href="http://www.jianshu.com/p/295b423d50ad">http://www.jianshu.com/p/295b423d50ad</a> <br/>
<a href="http://blog.chinaunix.net/uid-10449864-id-3048714.html">http://blog.chinaunix.net/uid-10449864-id-3048714.html</a> <br/>
<a href="http://blog.chinaunix.net/uid-725717-id-3147440.html">http://blog.chinaunix.net/uid-725717-id-3147440.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下搭建可以http访问的SVN服务]]></title>
    <link href="https://tmyam.github.io/blog/2017/03/28/linuxxia-da-jian-svnfu-wu/"/>
    <updated>2017-03-28T11:40:39+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/03/28/linuxxia-da-jian-svnfu-wu</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>最近打算迁移自己项目的SVN代码，这里对搭建SVN服务进行一下回顾。</p>

<h3>相关软件安装</h3>

<ul>
<li>使用SSH远程登录服务器</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh pi@192.168.1.201 <span class="c"># 例如</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<ul>
<li>安装软件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install subversion
</span><span class='line'>sudo apt-get install apache2
</span><span class='line'>sudo apt-get install libapache2-svn
</span></code></pre></td></tr></table></div></figure>


<p>其中subversion是SVN必须的，apache2和libapache2-svn是为了配置SVN服务器支持通过HTTP访问</p>

<h3>配置</h3>

<h4>相关用户、组的设定</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo addgroup subversion
</span><span class='line'>sudo usermod -G subversion -a www-data
</span></code></pre></td></tr></table></div></figure>


<h4>创建项目的目录</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo mkdir /home/svn
</span></code></pre></td></tr></table></div></figure>


<h4>配置 Subversion</h4>

<ul>
<li>配置dav_svn.conf文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo nano /etc/apache2/mods-available/dav_svn.conf
</span></code></pre></td></tr></table></div></figure>


<p>按照下面的步骤进行配置即可</p>

<p>1、删除<Location /svn>和DAV svn这两行前面的注释
<img src="https://tmyam.github.io/images/2017/03/28/svn_01.png" alt="temp" /></p>

<p>2、删除<code>SVNParentPath ...</code>前面的注释，并且把后面的路径替换成创建的SVN的项目路径<code>/home/svn</code>
<img src="https://tmyam.github.io/images/2017/03/28/svn_02.png" alt="temp" /></p>

<p>3、删除AuthType Basic、AuthName “Subversion Repository”前面的注释，去掉AuthUserFile所在行前面的注释，并且修改后面的路径为<code>/etc/subversion/dav_svn.passwd</code>，去掉AuthzSVNAccessFile所在行前面的注释，并且修改后面的路径为<code>/etc/subversion/dav_svn.authz</code>,删除Require valid-user和</Location>前面的注释，具体如下所示：
<img src="https://tmyam.github.io/images/2017/03/28/svn_03.png" alt="temp" /></p>

<p>其中：</p>

<p><code>/etc/subversion/dav_svn.passwd</code>文件是SVN用户名和密码的配置，指定基本用户验证的密码文件存放的位置</p>

<p><code>/etc/subversion/dav_svn.authz</code>文件是访问权限配置</p>

<ul>
<li>重启Apache2 WEB服务器</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo /etc/init.d/apache2 restart
</span></code></pre></td></tr></table></div></figure>


<h4>创建SVN文件仓库</h4>

<p>1、创建指定的项目存放路径</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> /home/svn
</span><span class='line'>mkdir projects
</span></code></pre></td></tr></table></div></figure>


<p>2、更改版本库所示的用户、组</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo chown -R www-data:subversion projects
</span></code></pre></td></tr></table></div></figure>


<p>3、创建SVN仓库</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo svnadmin create /home/svn/projects
</span></code></pre></td></tr></table></div></figure>


<p>4、赋予组成员对所有新加入文件仓库的文件拥有相应的权限</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo chmod -R g+rws projects
</span></code></pre></td></tr></table></div></figure>


<h4>用户和权限配置</h4>

<p>1、创建dav_svn.passwd文件并添加用户admin001，执行命令后会提示要输入密码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo htpasswd -c /etc/subversion/dav_svn.passwd admin001
</span></code></pre></td></tr></table></div></figure>


<p>继续添加新用户，去掉-c，否则会覆盖本文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo htpasswd /etc/subversion/dav_svn.passwd admin002
</span></code></pre></td></tr></table></div></figure>


<p>2、创建授权文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo nano /etc/subversion/dav_svn.authz
</span></code></pre></td></tr></table></div></figure>


<p>里面加入projects的权限配置，如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[groups]
</span><span class='line'>administrator=admin001,admin002
</span><span class='line'>
</span><span class='line'>[projects:/]
</span><span class='line'>@administrator=rw
</span></code></pre></td></tr></table></div></figure>


<h4>重启SVN服务器</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>killall svnserve
</span><span class='line'>svnserve -d -r /home/svn/
</span></code></pre></td></tr></table></div></figure>


<p>至此SVN服务器搭建完成，可以在终端执行来下面代码checkout项目了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>svn checkout http://hostname/svn/projects projects --username 用户名 --password 密码
</span></code></pre></td></tr></table></div></figure>


<h4>参考</h4>

<p><a href="http://blog.devzeng.com/blog/aliyun-ubuntu-svn-server.html">http://blog.devzeng.com/blog/aliyun-ubuntu-svn-server.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apt-get小记]]></title>
    <link href="https://tmyam.github.io/blog/2017/03/27/apt-getxiao-ji/"/>
    <updated>2017-03-27T15:20:08+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/03/27/apt-getxiao-ji</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>&emsp;&emsp;入门Linux的同志，刚开始最迫切想知道的，大概一个是中文输入法，另一个就是怎么安装软件。</p>

<p>&emsp;&emsp;在Windows下安装软件，我们只需要有exe文件，然后双击，下一步直接OK就可以了。但在Linux下，不是这样的。每个Linux的发行版，比如Debian，都会维护一个自己的软件仓库，我们常用的几乎所有软件都在这里面。这里面的软件绝对安全，而且绝对的能正常安装。</p>

<p>&emsp;&emsp;那我们要怎么安装呢？在Debian下，我们维护一个源列表，源列表里面都是一些网址信息，这每一条网址就是一个源，这个地址指向的数据标识着这台源服务器上有哪些软件可以安装使用。</p>

<!-- more -->


<h3>更新软件源</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get update
</span></code></pre></td></tr></table></div></figure>


<p>这个命令，会同步源服务器的源列表（APT服务器的RPM索引清单置于base资料夹内，使用者端电脑取得base资料夹内的bz2 RPM索引清单压缩档后，会将其解压置放于/var/state/apt/lists/）。</p>

<p>使用者使用apt-get install 或apt-get dist-upgrade 指令的时候，就会将这个资料夹内的资料和使用者端电脑内的RPM资料库比对，如此一来就可以知道那些RPM已安装、未安装、或是可以升级的。</p>

<h3>更新软件(upgrade)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get upgrade
</span></code></pre></td></tr></table></div></figure>


<p>这个命令，会把本地已安装的软件，与刚下载的软件源里对应软件的版本进行对比，如果发现已安装的软件版本太低，就会提示你更新。</p>

<h3>更新软件(dist-upgrade)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get dist-upgrade
</span></code></pre></td></tr></table></div></figure>


<p>如果这个包没有发布更新，就不管它；如果发布了更新，就把包下载到电脑上，并安装。</p>

<h3>upgrade与dist-upgrade的关系</h3>

<p>由于包与包之间存在各种依赖关系。upgrade只是简单的更新包，不管这些依赖，它不添加包，或是删除包。而dist-upgrade可以根据依赖关系的变化，添加包，删除包。</p>

<ul>
<li><p>upgrade:系统将现有的Package升级,如果有相依性的问题,而此相依性需要安装其它新的Package或影响到其它Package的相依性时,此Package就不会被升级,会保留下来。</p></li>
<li><p>dist-upgrade:可以聪明的解决相依性的问题,如果有相依性问题,需要安装/移除新的Package,就会试着去安装/移除它. (所以通常这个会被认为是有点风险的升级) 。</p></li>
</ul>


<p>例如软件包 a 原先依赖 b c d，但是在源里面可能已经升级了，现在是 a 依赖 b c e。这种情况下，dist-upgrade 会删除 d 安装 e，并把 a 软件包升级，而 upgrade 会认为依赖关系改变而拒绝升级 a 软件包。</p>

<h3>常用命令</h3>

<ul>
<li>安装软件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install package1 package2 package3……
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>卸载软件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get remove package1 package2 package3……
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>卸载并清除配置</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get remove --purge package1
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>删除包及其依赖的软件包+配置文件等</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get autoremove --purge package1
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>搜索软件包</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-cache search package1 package2 package3……
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用 dselect 升级</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get dselect-upgrade
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>了解使用依赖</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-cache depends package1
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看该包被哪些包依赖</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-cache rdepends package1
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>下载该包的源代码</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get <span class="nb">source </span>package1
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>清理下载文件的存档</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get clean
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>清理过时的包</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get autoclean
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>检查是否有损坏的依赖</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get check
</span></code></pre></td></tr></table></div></figure>


<h3>更换软件源</h3>

<p>如果使用 apt-get 遇到速度慢或者源不存在等错误，可能需要更换源，<a href="http://shumeipai.nxez.com/2013/08/31/raspbian-chinese-software-source.html">参考</a>。</p>

<h3>树莓派命令</h3>

<ul>
<li><p>树莓派固件 <br/>
可以理解为树莓派的BIOS，引导程序之类的，这一部分博通不开源，给树莓派增加新功能主要通过固件来实现。</p></li>
<li><p>安装rpi-update</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo curl -L --output /usr/bin/rpi-update https://raw.githubusercontent.com/Hexxeh/rpi-update/master/rpi-update<span class="se">\</span>
</span><span class='line'> <span class="o">&amp;&amp;</span> sudo chmod +x /usr/bin/rpi-update
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>升级firmware</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo rpi-update
</span></code></pre></td></tr></table></div></figure>


<h4>参考</h4>

<p><a href="http://www.baiyuxiong.com/?p=529">http://www.baiyuxiong.com/?p=529</a> <br/>
<a href="http://blog.csdn.net/tiankongtiankong01/article/details/53869975">http://blog.csdn.net/tiankongtiankong01/article/details/53869975</a> <br/>
<a href="http://blog.csdn.net/huayucong/article/details/54178049">http://blog.csdn.net/huayucong/article/details/54178049</a> <br/>
<a href="https://item.congci.com/-/content/shumeipai-raspbian-gujian-shengji-rpi-update">https://item.congci.com/-/content/shumeipai-raspbian-gujian-shengji-rpi-update</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识树莓派]]></title>
    <link href="https://tmyam.github.io/blog/2017/03/07/chu-shi-shu-mei-pai/"/>
    <updated>2017-03-07T20:39:37+08:00</updated>
    <id>https://tmyam.github.io/blog/2017/03/07/chu-shi-shu-mei-pai</id>
    <content type="html"><![CDATA[<p>环境: <code>(Mac 版本 10.11 )</code></p>

<h3>前言</h3>

<p>&emsp;&emsp;现在的计算机硬件已经很发达了，成本也在不断的降低。树莓派就是一个价格低廉的单板计算机，它拥有计算机的功能，还有许多扩展接口，无论是学习还是DIY都是不错的选择。到了树莓派3b，性能也有了很大的提升。 <br/>
&emsp;&emsp;学习Linux有很多种方式，虚拟机无疑是一种简单的方式，使用树莓派是另外一种方式，而且可以任意折腾，还有许多虚拟机办不到的事（比如集群）。由于树莓派使用的是ARM架构的CPU，Windows系统是装不了（虽然有Win10 IOT，但是基本没啥用）。尽管可以安装Linux，但是和桌面版相比，系统的支持还是弱了点。 <br/>
&emsp;&emsp;我选择树莓派，一是看中了它可以安装完整的Linux系统，无论是学习还是教别人都说不错的选择，二是看中了它的低功耗，据网友估算树莓派3b的功耗不连屏幕，U盘大概在2.5w左右，三是看中了它的DIY功能，谁小时候没有想要动手DIY的心情，只是那时候没有这个条件，现在年龄大了又玩不动了，如果有好的想法还是可以玩玩，毕竟设备就在手上。</p>

<!-- more -->


<p> <img src="https://tmyam.github.io/images/2017/03/08/raspbianpi3b.jpg" alt="temp" /></p>

<h3>制作系统</h3>

<ul>
<li><p>下载系统包 <a href="https://www.raspberrypi.org/downloads/">(下载地址)</a>  ,下载完成后解压缩，得到 <code>2017-03-02-raspbian-jessie-lite.img</code>系统镜像文件。 <br/>
这里使用的镜像是 <code>2017-03-02-raspbian-jessie-lite</code>版本，lite是精简版，没有GUI图形界面，可以更省空间，也更省内存。</p></li>
<li><p>制作镜像 <br/>
以下步骤适用于Mac OS X: <br/>
1、打开终端 <code>cd</code> 到<code>2017-03-02-raspbian-jessie-lite.img</code>镜像所在目录  <br/>
2、插入你的TF卡，运行 <code>df –h</code> 会发现多了一个<strong>/dev/disk2s1</strong>的设备(disk2s1不同的机器名称可能不同) <br/>
3、卸载TF卡，输入<code>sudo diskutil unmount /dev/disk2s1</code> <br/>
4、写入镜像： <br/>
输入 <code>sudo dd bs=4m if=2017-03-02-raspbian-jessie-lite.img of=/dev/rdisk2</code> <br/>
这里的<strong>rdisk2</strong>是根据<strong>disk2s1</strong>来的，根据自己的数字修改。 <br/>
5、写入的过程需要一点时间，大概4分钟左右。当dd完成了它的工作以后，将TF卡安全移除。可以输入<code>diskutil unmountdisk /dev/disk2</code>来移除。</p></li>
</ul>


<h3>修改密码</h3>

<ul>
<li>经过上面的步骤系统已经写进了卡里，但是还无法直接应ssh登录。因为树莓派2016-11-25更新版本时，ssh默认关闭了。
要使用ssh，则需要在TF卡<strong>/root</strong>目录下新建一个ssh文件。
电脑上插上TF卡</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> /Volumes/boot
</span><span class='line'>sudo touch ssh
</span></code></pre></td></tr></table></div></figure>


<p>这样，树莓派开机时默认启动ssh。</p>

<ul>
<li>准备路由器，网线，将树莓派接入路由器，查看路由器中树莓派的IP，然后使用</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh pi@192.168.1.111
</span></code></pre></td></tr></table></div></figure>


<p>登录，默认密码为<code>raspberry</code>。</p>

<ul>
<li>修改pi密码</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo passwd pi
</span></code></pre></td></tr></table></div></figure>


<p>重新开启root账号，可由pi用户登录后，在终端执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo passwd root
</span></code></pre></td></tr></table></div></figure>


<p>执行此命令后系统会提示输入两遍的root密码，输入你想设的密码即可，然后在执行解锁root账户。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo passwd --unlock root
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>切换用户</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>su root
</span><span class='line'>su pi
</span></code></pre></td></tr></table></div></figure>


<h3>配置网络</h3>

<ul>
<li>这里打算让树莓派作为服务器使用，所以要配置静态IP，为了携带方便，还要满足这些条件。 <br/>
1、没有WIFI时，插上网线可以连接，有线网卡地址为静态IP。 <br/>
2、没插网线，有WIFI时，连接WIFI，WIFI网卡地址为静态IP。 <br/>
3、多个WIFI信号时，优先连接优先级高的信号。</li>
<li>编辑网络配置文件</li>
</ul>


<p><strong>方法 1</strong>（不推荐）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo nano /etc/network/interfaces
</span></code></pre></td></tr></table></div></figure>


<p>我的初始显示是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>
</span><span class='line'>iface eth0 inet manual
</span><span class='line'>
</span><span class='line'>allow-hotplug wlan0
</span><span class='line'>iface wlan0 inet manual
</span><span class='line'>    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
</span><span class='line'>
</span><span class='line'>allow-hotplug wlan1
</span><span class='line'>iface wlan1 inet manual
</span><span class='line'>    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></td></tr></table></div></figure>


<p>这里进行修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>
</span><span class='line'>#auto eth0
</span><span class='line'>iface eth0 inet static      # 使用静态IP
</span><span class='line'>address 192.168.1.200       # 有线网卡的静态IP
</span><span class='line'>netmask 255.255.255.0       # 有线网卡的子网掩码
</span><span class='line'>gateway 192.168.1.1         # 有线网卡的网关
</span><span class='line'>#dns-nameservers 192.168.1.1
</span><span class='line'>
</span><span class='line'>auto wlan0                  # 自动连接WIFI
</span><span class='line'>allow-hotplug wlan0         # WIFI允许热插拔
</span><span class='line'>iface wlan0 inet static     # 使用静态IP
</span><span class='line'>address 192.168.1.201       # WIFI网卡的静态IP
</span><span class='line'>netmask 255.255.255.0       # WIFI网卡的子网掩码
</span><span class='line'>gateway 192.168.1.1         # WIFI网卡的网关
</span><span class='line'>#dns-nameservers 192.168.1.1
</span><span class='line'>#wap-essid not-telling-you
</span><span class='line'>#wap-psk not telling-you-this-either
</span><span class='line'>wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></td></tr></table></div></figure>


<p>这里 注释掉auto eth0，是因为它会导致树莓派开机时等待有线网卡动态分配IP，但实际上你的有线网口并没有连接到路由器，这里会让内核等待更长的时间，从而拖慢开机速度。</p>

<p><strong>方法 2</strong>（推荐）
由于方法1，有些时候并不总是生效，并且在插入网线，开启无线的时候，系统会优先使用无线，显然速度会受限，应该优先使用有线。这里就要使用方法2了，也是官方推荐的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo nano /etc/dhcpcd.conf
</span></code></pre></td></tr></table></div></figure>


<p>最末尾添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>interface eth0
</span><span class='line'>static <span class="nv">ip_address</span><span class="o">=</span>192.168.1.200
</span><span class='line'>static <span class="nv">netmask</span><span class="o">=</span>255.255.255.0
</span><span class='line'>static <span class="nv">routers</span><span class="o">=</span>192.168.1.1
</span><span class='line'>static <span class="nv">domain_name_servers</span><span class="o">=</span>192.168.1.1
</span><span class='line'>
</span><span class='line'>interface wlan0
</span><span class='line'>static <span class="nv">ip_address</span><span class="o">=</span>192.168.1.201
</span><span class='line'>static <span class="nv">netmask</span><span class="o">=</span>255.255.255.0
</span><span class='line'>static <span class="nv">routers</span><span class="o">=</span>192.168.1.1
</span><span class='line'>static <span class="nv">domain_name_servers</span><span class="o">=</span>192.168.1.1
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以了。</p>

<ul>
<li>添加WIFI信息</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></td></tr></table></div></figure>


<p>修改为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
</span><span class='line'>update_config=1
</span><span class='line'>
</span><span class='line'>network={
</span><span class='line'> ssid=&quot;TP-Link1234&quot;     # 信号名
</span><span class='line'> psk=&quot;xxxx&quot;             # 密码
</span><span class='line'> priority=5             # 优先级
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>network={
</span><span class='line'> ssid=&quot;Tenda_1234&quot;
</span><span class='line'> psk=&quot;xxxx&quot;
</span><span class='line'> priority=1
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>上面的信号名，密码，优先级均需要根据自己的情况进行更改。</p>

<ul>
<li>重启</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo reboot
</span></code></pre></td></tr></table></div></figure>


<p>ifconfig 查看各网卡信息
iwconfig 查看当前联网的信息
<strong>注意：</strong>每次切换网络（有线变无线，无线变有线）均需要重新启动。</p>

<h3>安装vim</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get update             <span class="c"># 更新软件源列表</span>
</span><span class='line'>sudo apt-get upgrade            <span class="c"># 更新系统 </span>
</span><span class='line'>sudo apt-get remove vim-common  <span class="c"># 删除vim   </span>
</span><span class='line'>sudo apt-get install vim        <span class="c">#安装vim </span>
</span></code></pre></td></tr></table></div></figure>


<h3>安装中文字体</h3>

<p>树莓派系统默认不支持中文，需要自己安装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy
</span></code></pre></td></tr></table></div></figure>


<h3>备份系统</h3>

<p>我想大部分人都不想折腾同样的东西吧，有备无患。</p>

<ul>
<li>Windows系统下官方推荐的工具 Win32DiskImager <a href="http://sqdownb.onlinedown.net/down/Win32DiskImager-0.9.5-binary.zip">下载地址</a></li>
<li>在Windows系统下插上你的TF卡，新建一个文本，文件扩展名改为<code>.img</code>。</li>
<li>打开win32Diskimager</li>
<li>Image File 选择刚才你创建的.img文件路径</li>
<li>Device 选择你的TF卡盘符</li>
<li>然后点Read</li>
</ul>


<h3>恢复TF卡容量</h3>

<p>写入系统后，TF卡只能显示40M的容量，如果要恢复TF卡，仅靠格式化是不行的。</p>

<ul>
<li><p>下载 bootsector.img<a href="http://www.alexpage.de/download/usbit/bootsector.img">下载地址</a></p></li>
<li><p>打开win32Diskimager，将下载的 bootsector.img 写入（Write）TF卡</p></li>
<li>在windows资源管理器下格式化TF卡（一般格式化成FAT32）</li>
</ul>


<p>这样TF卡就恢复了原始容量。</p>

<h3>关机命令</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo poweroff       <span class="c">#关机</span>
</span></code></pre></td></tr></table></div></figure>


<h3>查看系统信息</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>hostnamectl
</span></code></pre></td></tr></table></div></figure>


<h3>测试TF卡速度</h3>

<ul>
<li>安装测试磁盘速度的软件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install hdparm
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>测速（读）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo hdparm -Tt /dev/mmcblk0
</span></code></pre></td></tr></table></div></figure>


<p>显示结果</p>

<blockquote><p>/dev/mmcblk0: <br/>
 Timing cached reads:   1280 MB in  2.00 seconds = 640.05 MB/sec <br/>
 Timing buffered disk reads:  66 MB in  3.04 seconds =  21.70 MB/sec</p></blockquote>

<ul>
<li>测试（写）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">time </span>dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>~/test.img <span class="nv">bs</span><span class="o">=</span>4k <span class="nv">count</span><span class="o">=</span>100000
</span><span class='line'>rm ~/test.img
</span></code></pre></td></tr></table></div></figure>


<p>显示结果</p>

<blockquote><p>100000+0 records in <br/>
100000+0 records out <br/>
409600000 bytes (410 MB) copied, 23.1721 s, 17.7 MB/s</p></blockquote>

<p><br/></p>

<h4>参考</h4>

<p><a href="http://www.jianshu.com/p/c0b589b380a1">http://www.jianshu.com/p/c0b589b380a1</a>
<a href="http://blog.csdn.net/u014271612/article/details/53767669">http://blog.csdn.net/u014271612/article/details/53767669</a>
<a href="http://blog.csdn.net/shaopengf/article/details/52411926">http://blog.csdn.net/shaopengf/article/details/52411926</a>
<a href="http://blog.csdn.net/shooter32/article/details/45126525">http://blog.csdn.net/shooter32/article/details/45126525</a>
<a href="http://blog.163.com/ch3c_am/blog/static/18963721320168911852245/?t=1474203973809">http://blog.163.com/ch3c_am/blog/static/18963721320168911852245/?t=1474203973809</a>
<a href="http://shumeipai.nxez.com/2014/03/31/raspberry-pi-disk-speed-problem-solving.html">http://shumeipai.nxez.com/2014/03/31/raspberry-pi-disk-speed-problem-solving.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cocoa binding]]></title>
    <link href="https://tmyam.github.io/blog/2016/04/08/cocoa-binding/"/>
    <updated>2016-04-08T10:17:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2016/04/08/cocoa-binding</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>cocoa binding一项可以让开发变得更加便捷的技能，网上的资料非常有限，所以在这里进行一下记录。概念约定:  <br/>
正向操作(转换) &mdash;> 代码控制的操作(转换)  <br/>
反向操作(转换) &mdash;> 用户界面操作控制(转换)</p>

<h3>简单的使用</h3>

<p>比如，有这样一个需求，监控 <strong>NSPopUpButton</strong> 的选择下标的变化：  <br/>
1. 可以用代码改变选择的下标  <br/>
2. 当用户在界面上选择改变下标时，可以监测到这种改变</p>

<!-- more -->  


<h6>1. 一般的做法</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 在xib中使用 IBOutlet 绑定控件，这样可以满足需求1</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span> <span class="p">,</span><span class="k">strong</span><span class="p">,</span><span class="n">nonnull</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">NSPopUpButton</span><span class="o">*</span>   <span class="n">popupButton</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 需求1</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">popupButton</span><span class="p">.</span><span class="n">indexOfSelectedItem</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用 IBAction 绑定action，可以满足需求2</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span> <span class="nf">popupButtonChangeIndex:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%ld&quot;</span><span class="p">,[</span><span class="n">sender</span> <span class="n">indexOfSelectedItem</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样虽然满足了需求，但是需要使用两个绑定，IBOutlet，IBAction，代码量较多。</p>

<h6>2. 使用bind</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">写法</span> <span class="mi">1</span> <span class="p">(</span><span class="err">定义属性</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 定义选择下标属性</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span> <span class="p">,</span><span class="k">assign</span><span class="p">)</span> <span class="bp">NSInteger</span>   <span class="n">index</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 主要是需要写这个set函数 // 需求2</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">setIndex:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">index</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">_Index</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%ld&quot;</span><span class="p">,</span><span class="n">index</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//需求1</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">写法</span> <span class="mi">2</span> <span class="p">(</span><span class="err">不定义属性</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 需求2 // 不定义属性，则需要一个值来保存选择的下标，并写出get方法</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">setIndex</span><span class="p">:(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="n">index</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">xx</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%ld&quot;</span><span class="p">,</span><span class="n">index</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span> <span class="n">index</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">xx</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//需求1</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">写法</span><span class="mi">1</span><span class="err">的好处是简便，写法</span><span class="mi">2</span><span class="err">的好处是不受限于属性的类型，比如</span><span class="n">xx</span><span class="err">可以自定义为</span><span class="bp">NSNumber</span><span class="err">类型。</span>
</span></code></pre></td></tr></table></div></figure>


<p>界面绑定，如下图  <br/>
<img src="https://tmyam.github.io/images/2016/04/08/bind_selectindex.png" alt="temp" />  <br/>
第一个红线标注的是选择绑定的对象，第二个标注的是绑定对象的属性，即<code>index</code>。
当然也可以不使用界面绑定，使用代码绑定。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">popupButton</span> <span class="nl">bind</span><span class="p">:</span><span class="s">@&quot;selectedIndex&quot;</span> <span class="nl">toObject</span><span class="p">:</span><span class="nb">self</span> <span class="nl">withKeyPath</span><span class="p">:</span><span class="s">@&quot;index&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">dealloc</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">unbind</span><span class="p">:</span><span class="s">@&quot;selectedIndex&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="s">@&quot;selectedIndex&quot;</span><span class="err">可以用</span><span class="n">NSSelectedIndexBinding</span><span class="err">代替</span>
</span></code></pre></td></tr></table></div></figure>


<h3>进阶</h3>

<h6>1. 绑定NSTextField</h6>

<p>输入变化是经常遇到的监测对象，绑定的方式可以实现限制输入内容的功能。</p>

<p>例如，下面是一个输入框，限定输入0~99。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 绑定的文本</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span> <span class="p">,</span><span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span><span class="o">*</span>     <span class="n">number</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 监听变化</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">setNumber:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">number</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">number</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">number</span> <span class="o">=</span> <span class="s">@&quot;0&quot;</span><span class="p">;</span> <span class="c1">//默认值</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">number</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_number</span> <span class="o">=</span> <span class="n">number</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在界面上绑定<strong>NSTextField</strong>的<strong>value</strong>。注意勾选红色标注      <br/>
<img src="https://tmyam.github.io/images/2016/04/08/bind_textfield.png" alt="temp" />   <br/>
当然，这样仅仅只是可以检测文本的输入变化，并不能限制输入的内容。还需要创建一个Formatter继承自系统的NSFormatter，并重写里面的函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">TMNumFormatter</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span> <span class="nf">stringForObjectValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">object</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">getObjectValue:</span><span class="p">(</span><span class="k">out</span> <span class="kt">id</span><span class="o">*</span><span class="p">)</span><span class="nv">object</span>
</span><span class='line'>              <span class="nf">forString:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">string</span>
</span><span class='line'>       <span class="nf">errorDescription:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">**</span><span class="p">)</span><span class="nv">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">object</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithString</span><span class="p">:</span><span class="n">string</span><span class="p">];</span><span class="c1">//必须这样写，否则bind会失效</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isPartialStringValid:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">partialString</span>
</span><span class='line'>            <span class="nf">newEditingString:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">**</span><span class="p">)</span><span class="nv">newString</span>
</span><span class='line'>            <span class="nf">errorDescription:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">**</span><span class="p">)</span><span class="nv">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">partialString</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="nb">self</span> <span class="nl">isInteger</span><span class="p">:</span><span class="n">partialString</span><span class="p">])</span> <span class="c1">// 判断是否为纯数字</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">partialString</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span>   <span class="c1">// 限制长度，最多两位</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="bp">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">partialString</span><span class="p">.</span><span class="n">length</span> <span class="p">;</span> <span class="n">i</span> <span class="o">++</span> <span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">unichar</span> <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="n">partialString</span> <span class="nl">characterAtIndex</span><span class="p">:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 限制大小</span>
</span><span class='line'>            <span class="bp">NSInteger</span> <span class="n">num</span> <span class="o">=</span> <span class="p">[</span><span class="n">partialString</span> <span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="mi">99</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 判断文本是否为数字</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> @param string 输入的文本</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> @return 是否是纯数字</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">isInteger:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">string</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSScanner</span><span class="o">*</span> <span class="n">scan</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSScanner</span> <span class="nl">scannerWithString</span><span class="p">:</span><span class="n">string</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">val</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">scan</span> <span class="nl">scanInteger</span><span class="p">:</span><span class="o">&amp;</span><span class="n">val</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">scan</span><span class="p">.</span><span class="n">isAtEnd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在xib中创建一个Formatter，并关联<strong>Outlets</strong>中的formatter，如下图：  <br/>
<img src="https://tmyam.github.io/images/2016/04/08/bind_formatter.png" alt="temp" /></p>

<h6>2. Value Transformer类型变换</h6>

<p>比如上边的例子，我想要的是一个数字类型，但是bind的默认类型却是NSString类型，这时就可以使用类型转换了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span> <span class="p">,</span><span class="k">strong</span><span class="p">)</span> <span class="bp">NSNumber</span><span class="o">*</span>     <span class="n">inter</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">setInter:</span><span class="p">(</span><span class="bp">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="nv">inter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_inter</span> <span class="o">=</span> <span class="n">inter</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">inter</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要创建一个继承自<strong>NSValueTransformer</strong>的类，重写里面的函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 正向：NSNumber --&gt; NSString</span>
</span><span class='line'><span class="c1">// 反向：NSString --&gt; NSNumber</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">TMValueTransformer</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 正向操作时，输出的类型（控件接收的类型）</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">Class</span><span class="p">)</span> <span class="nf">transformedValueClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="bp">NSString</span> <span class="k">class</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 是否允许反向操作，只有允许反向，reverseTransformedValue:函数才有用</span>
</span><span class='line'><span class="c1">// 如果为NO，则用户无法在界面上输入内容</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">allowsReverseTransformation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 正向输出，NSNumber --&gt; NSString</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">nullable</span> <span class="kt">id</span><span class="p">)</span><span class="nf">transformedValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">value</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">value</span> <span class="n">stringValue</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 反向输出，NSString --&gt; NSNumber</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">nullable</span> <span class="kt">id</span><span class="p">)</span><span class="nf">reverseTransformedValue:</span><span class="p">(</span><span class="n">nullable</span> <span class="kt">id</span><span class="p">)</span><span class="nv">value</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="l">@(</span><span class="p">[</span><span class="n">value</span> <span class="n">integerValue</span><span class="p">]</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>xib里面的绑定设置，如下图：  <br/>
<img src="https://tmyam.github.io/images/2016/04/08/bind_valuetransformer.png" alt="temp" /></p>

<h3>注意</h3>

<h6>1. Read-Only 的绑定</h6>

<p>有些bind类型，是Read-Only的，这时有些需求就无法满足了，需要注意。  <br/>
比如<strong>NSImageView</strong>的<strong>valuePath</strong>是Read-Only的，只满足正向的操作，即可以通过代码修改路径，显示不同的图片，但是界面操作拖入一张图片的时候，绑定的属性不能获取到这张图片的路径。  <br/>
所以对于Read-Only属性，只适合正向操作，即禁止用户进行修改的选项。  <br/>
对于哪些bind属性是Read-Only的，可以查询<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CocoaBindingsRef/CocoaBindingsRef.html">参考链接</a></p>

<p><br/></p>

<h4>参考</h4>

<p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CocoaBindingsRef/CocoaBindingsRef.html">https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CocoaBindingsRef/CocoaBindingsRef.html</a>
<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CocoaBindingsRef/Concepts/BindingTypes.html">https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CocoaBindingsRef/Concepts/BindingTypes.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac app的开机自启动]]></title>
    <link href="https://tmyam.github.io/blog/2014/06/10/sha-he-kai-ji-zi-qi-dong/"/>
    <updated>2014-06-10T14:15:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/06/10/sha-he-kai-ji-zi-qi-dong</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>在出现沙盒以前，mac下设置开机自启动是很容易的，使用 LSSharedFileListRef 很容易做到开机自启动。但自从沙盒出现之后，就变得麻烦了点，这里进行一下详细的使用描述。</p>

<h3>非沙盒下的开机自启动</h3>

<p>简单的说只需要两个函数就可以了。而且这种开机自启动和app所在的文件夹无关，并且可以在"系统偏好设置"->&ldquo;用户与群组&rdquo;->&ldquo;登录项"里面看到，并进行设置。</p>

<!-- more -->  




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">isStartAtLogin</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">BOOL</span>  <span class="n">isHaveAdd</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSString</span><span class="o">*</span> <span class="n">appPath</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">bundlePath</span><span class="p">];</span>
</span><span class='line'>    <span class="n">LSSharedFileListRef</span> <span class="n">loginItems</span> <span class="o">=</span> <span class="n">LSSharedFileListCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kLSSharedFileListSessionLoginItems</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">UInt32</span> <span class="n">seedValue</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSArray</span><span class="o">*</span> <span class="n">loginItemsArray</span> <span class="o">=</span> <span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="n">LSSharedFileListCopySnapshot</span><span class="p">(</span><span class="n">loginItems</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">seedValue</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFURLRef</span> <span class="n">tempUrl</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFURLRef</span><span class="p">)[</span><span class="bp">NSURL</span> <span class="nl">fileURLWithPath</span><span class="p">:</span><span class="n">appPath</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="bp">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="p">[</span><span class="n">loginItemsArray</span> <span class="n">count</span><span class="p">];</span> <span class="n">i</span> <span class="o">++</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">LSSharedFileListItemRef</span> <span class="n">itemRef</span> <span class="o">=</span> <span class="p">(</span><span class="n">LSSharedFileListItemRef</span><span class="p">)[</span><span class="n">loginItemsArray</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">LSSharedFileListItemResolve</span><span class="p">(</span><span class="n">itemRef</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tempUrl</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="n">noErr</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="bp">NSString</span> <span class="o">*</span> <span class="n">urlPath</span> <span class="o">=</span> <span class="p">[(</span><span class="bp">NSURL</span><span class="o">*</span><span class="p">)</span><span class="n">tempUrl</span> <span class="n">path</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">([</span><span class="n">urlPath</span> <span class="nl">compare</span><span class="p">:</span><span class="n">appPath</span><span class="p">]</span> <span class="o">==</span> <span class="n">NSOrderedSame</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">isHaveAdd</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">loginItemsArray</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">loginItems</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">isHaveAdd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">setStartAtLogin:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">startAtLogin</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSString</span><span class="o">*</span> <span class="n">appPath</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">bundlePath</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">result</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">startAtLogin</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="nb">self</span> <span class="n">isStartAtLogin</span><span class="p">])</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">CFURLRef</span> <span class="n">url</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFURLRef</span><span class="p">)[</span><span class="bp">NSURL</span> <span class="nl">fileURLWithPath</span><span class="p">:</span><span class="n">appPath</span><span class="p">];</span>
</span><span class='line'>            <span class="n">LSSharedFileListRef</span> <span class="n">newloginItems</span> <span class="o">=</span> <span class="n">LSSharedFileListCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kLSSharedFileListSessionLoginItems</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>            <span class="n">LSSharedFileListItemRef</span> <span class="n">item</span> <span class="o">=</span> <span class="n">LSSharedFileListInsertItemURL</span><span class="p">(</span><span class="n">newloginItems</span><span class="p">,</span> <span class="n">kLSSharedFileListItemLast</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">result</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>                <span class="n">CFRelease</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">newloginItems</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">CFRelease</span><span class="p">(</span><span class="n">newloginItems</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">LSSharedFileListRef</span> <span class="n">loginItems</span> <span class="o">=</span> <span class="n">LSSharedFileListCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">kLSSharedFileListSessionLoginItems</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">UInt32</span> <span class="n">seedValue</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="bp">NSArray</span><span class="o">*</span> <span class="n">loginItemsArray</span> <span class="o">=</span> <span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="n">LSSharedFileListCopySnapshot</span><span class="p">(</span><span class="n">loginItems</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">seedValue</span><span class="p">);</span>
</span><span class='line'>        <span class="n">CFURLRef</span> <span class="n">tempUrl</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFURLRef</span><span class="p">)[</span><span class="bp">NSURL</span> <span class="nl">fileURLWithPath</span><span class="p">:</span><span class="n">appPath</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="bp">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">[</span><span class="n">loginItemsArray</span> <span class="n">count</span><span class="p">];</span> <span class="n">i</span> <span class="o">++</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">LSSharedFileListItemRef</span> <span class="n">itemRef</span> <span class="o">=</span> <span class="p">(</span><span class="n">LSSharedFileListItemRef</span><span class="p">)[</span><span class="n">loginItemsArray</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">LSSharedFileListItemResolve</span><span class="p">(</span><span class="n">itemRef</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">tempUrl</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="n">noErr</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="bp">NSString</span> <span class="o">*</span> <span class="n">urlPath</span> <span class="o">=</span> <span class="p">[(</span><span class="bp">NSURL</span><span class="o">*</span><span class="p">)</span><span class="n">tempUrl</span> <span class="n">path</span><span class="p">];</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">([</span><span class="n">urlPath</span> <span class="nl">compare</span><span class="p">:</span><span class="n">appPath</span><span class="p">]</span> <span class="o">==</span> <span class="n">NSOrderedSame</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">OSStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">LSSharedFileListItemRemove</span><span class="p">(</span><span class="n">loginItems</span><span class="p">,</span><span class="n">itemRef</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">noErr</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="n">loginItemsArray</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'>        <span class="n">CFRelease</span><span class="p">(</span><span class="n">loginItems</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>沙盒下的开机自启动</h3>

<p>沙盒下的自启动会比较麻烦，步骤比较多。这里以程序 test 为例，进行详细阐述。</p>

<h4>1. 添加Helper程序</h4>

<p>沙盒下，app是无法自己做到开机自启动的，需要另外一个app协助才行。这里就创建这样一个app，为了便于区分起名testHelper。
<img src="https://tmyam.github.io/images/2014/06/10/01.jpg" alt="temp" /></p>

<h4>2. 设置Helper</h4>

<p>test和testHelper都需要设置，这里先进行testHelper的设置.</p>

<ul>
<li>修改build Configuration 为 Release 。
<img src="https://tmyam.github.io/images/2014/06/10/02.jpg" alt="temp" /></li>
<li>修改Info.plist文件，使app在运行时不显示到前端。
<img src="https://tmyam.github.io/images/2014/06/10/03.jpg" alt="temp" /></li>
<li>删除MainMenu.xib中的window窗口，  <br/>
并且删除 AppDelegate.h 中的<code>@property (assign) IBOutlet NSWindow *window;</code>。  <br/>
这些都是确保app在运行时不显示到前端。
<img src="https://tmyam.github.io/images/2014/06/10/04.jpg" alt="temp" /></li>
<li>修改 Build Settings 的 <strong>Skip Install</strong> 为 YES。
<img src="https://tmyam.github.io/images/2014/06/10/05.jpg" alt="temp" /></li>
<li>设置沙盒环境，证书，描述文件。  <br/>
这里设置的发布证书，如果需要测试，可以设置开发者证书进行测试。
<img src="https://tmyam.github.io/images/2014/06/10/06.jpg" alt="temp" /></li>
</ul>


<h4>3. 添加Helper的代码</h4>

<p>参照下面的函数，复制到testHelper的AppDelegate中，注意修改identifier和appName为自己主app的信息。这段代码的意义是启动主app。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">applicationDidFinishLaunching:</span><span class="p">(</span><span class="bp">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">aNotification</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">runMainApp</span><span class="p">:</span><span class="s">@&quot;com.tmyam.test&quot;</span> <span class="nl">appName</span><span class="p">:</span><span class="s">@&quot;test&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 运行开机自启动的app</span>
</span><span class='line'>
</span><span class='line'><span class="cm"> @param identifier 主app的标识符</span>
</span><span class='line'><span class="cm"> @param appName 主app的名称（在MacOS文件夹下的名称）</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">runMainApp:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">identifier</span> <span class="nf">appName:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">appName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Check if main app is already running; if yes, do nothing and terminate helper app</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">alreadyRunning</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">running</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSWorkspace</span> <span class="n">sharedWorkspace</span><span class="p">]</span> <span class="n">runningApplications</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSRunningApplication</span> <span class="o">*</span><span class="n">app</span> <span class="k">in</span> <span class="n">running</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([[</span><span class="n">app</span> <span class="n">bundleIdentifier</span><span class="p">]</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="n">identifier</span><span class="p">])</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">alreadyRunning</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">alreadyRunning</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSString</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">bundlePath</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSArray</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">path</span> <span class="n">pathComponents</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">pathComponents</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="nl">arrayWithArray</span><span class="p">:</span><span class="n">p</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">pathComponents</span> <span class="n">removeLastObject</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">pathComponents</span> <span class="n">removeLastObject</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">pathComponents</span> <span class="n">removeLastObject</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">pathComponents</span> <span class="nl">addObject</span><span class="p">:</span><span class="s">@&quot;MacOS&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">pathComponents</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">appName</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSString</span> <span class="o">*</span><span class="n">newPath</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">pathWithComponents</span><span class="p">:</span><span class="n">pathComponents</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">NSWorkspace</span> <span class="n">sharedWorkspace</span><span class="p">]</span> <span class="nl">launchApplication</span><span class="p">:</span><span class="n">newPath</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">NSApp</span> <span class="nl">terminate</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>4. 设置主程序</h4>

<ul>
<li>test添加Copy Files 。
<img src="https://tmyam.github.io/images/2014/06/10/07.jpg" alt="temp" /></li>
<li>设置 Copy Files 。Destination为"Wrapper"，Subpath为"Contents/Library/LoginItems"，添加"testHelper.app"如下图。 <br/>
<img src="https://tmyam.github.io/images/2014/06/10/08.jpg" alt="temp" /></li>
<li>设置依赖，如下图。<br/>
<img src="https://tmyam.github.io/images/2014/06/10/09.jpg" alt="temp" /></li>
<li>设置 Build Settings -> &ldquo;Strip Debug Symbols During Copy&rdquo; 为 NO 。
<img src="https://tmyam.github.io/images/2014/06/10/10.jpg" alt="temp" /></li>
<li>设置沙盒环境，证书，描述文件。  <br/>
这里设置的发布证书，如果需要测试，可以设置开发者证书进行测试。
<img src="https://tmyam.github.io/images/2014/06/10/11.jpg" alt="temp" /></li>
</ul>


<h4>5. 主程序添加代码</h4>

<ul>
<li><p>test首先导入两个文件，StartAtLoginController.h和StartAtLoginController.m，<a href="https://tmyam.github.io/files/StartAtLoginController.zip">StartAtLoginController下载</a></p></li>
<li><p>添加 ServiceManagement.framework
<img src="https://tmyam.github.io/images/2014/06/10/12.jpg" alt="temp" /></p></li>
<li><p>创建一个管理文件例如 TMStartAtLogin，负责管理开机自启动状态，并在里面粘贴以下代码。   <br/>
别忘了 #import &ldquo;StartAtLoginController.h&rdquo;  <br/>
这里的 Identifier是testHelper的标识符。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">isStartAtLogin</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">StartAtLoginController</span><span class="o">*</span> <span class="n">loginController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">StartAtLoginController</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithIdentifier</span><span class="p">:</span><span class="s">@&quot;com.tmyam.testHelper&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">startedAtLogin</span> <span class="o">=</span> <span class="p">[</span><span class="n">loginController</span> <span class="n">startAtLogin</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">loginController</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">startedAtLogin</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">setStartAtLogin:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">isStartLogin</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">StartAtLoginController</span><span class="o">*</span> <span class="n">loginController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">StartAtLoginController</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithIdentifier</span><span class="p">:</span><span class="s">@&quot;com.tmyam.testHelper&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">loginController</span><span class="p">.</span><span class="n">startAtLogin</span> <span class="o">=</span> <span class="n">isStartLogin</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">result</span> <span class="o">=</span> <span class="n">loginController</span><span class="p">.</span><span class="n">enabled</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">loginController</span> <span class="k">release</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>结尾</h4>

<p>至此，所有的设置已经完成，可以通过主程序的 TMStartAtLogin 管理自启动的状态。
还有要注意的地方，如果要测试沙盒下的开机自启动，<em>需要将编译出的app放入系统的应用程序目录下</em>，否则不会生效。</p>

<p>另外，在发布app时，会遇到因为使用了testHelper证书而导致上传到app store时的错误，这时需要深入到<em>&ldquo;&hellip;/Products/Applications/test.app/Contents/Library/LoginItems/testHelper.app/Contents&rdquo;</em>目录下，删除embedded.provisionprofile文件，就可以正确上传了。</p>

<h3>示例</h3>

<p><a href="https://tmyam.github.io/files/StartAtLoginController.zip">StartAtLoginController下载</a> <br/>
<a href="https://tmyam.github.io/files/test-startatlogin.zip">test示例下载</a></p>

<h4>参考</h4>

<p><a href="http://blog.timschroeder.net/2012/07/03/the-launch-at-login-sandbox-project/">http://blog.timschroeder.net/2012/07/03/the-launch-at-login-sandbox-project/</a>
<a href="http://stackoverflow.com/questions/11230168/submit-an-osx-app-with-helper-app-in-its-bundle">http://stackoverflow.com/questions/11230168/submit-an-osx-app-with-helper-app-in-its-bundle</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个客户端设置多个github账号]]></title>
    <link href="https://tmyam.github.io/blog/2014/05/07/duo-githubzhang-hu-she-zhi/"/>
    <updated>2014-05-07T21:48:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/05/07/duo-githubzhang-hu-she-zhi</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>最近遇到了这样的需求，需要在一台电脑上同时使用两个github账号，负责不同的用途，所以搜索了一些文章，进行了一下实践。</p>

<h3>1.前期工作</h3>

<ul>
<li>至少有两个<a href="https://github.com">github</a>账号 (假设有两个账号 一个为 <em>one</em> ，另一个为 <em>two</em>)</li>
<li>取消git全局设置</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git config --global --unset user.name
</span><span class='line'>git config --global --unset user.email
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h3>2.SSH配置</h3>

<ul>
<li>生成 id_rsa 私钥 , id_rsa.pub 公钥    <br/>
one可以直接回车，默认生成id_rsa和id_rsa.pub。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh-keygen -t rsa -C <span class="s2">&quot;one@126.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是two会出现提示输入文件名，输入与默认配置不一样的文件名，比如: id_rsa_two。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> ~/.ssh
</span><span class='line'>ssh-keygen -t rsa -C <span class="s2">&quot;two@126.com&quot;</span>  <span class="c"># 之后会提示输入文件名</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><a href="https://github.com">github</a>添加公钥 id_rsa.pub , id_rsa_two.pub <br/>
分别登陆<em>one</em>,<em>two</em>的账号，在 <code>Account Settings</code> 的 <code>SSH Keys</code> 里，点 <code>Add SSH Keys</code> ，将公钥(.pub文件)中的内容粘贴到”Key”中，并输入”Title”.</p></li>
<li><p>添加 ssh key</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh-add -K ~/.ssh/id_rsa        <span class="c"># 使用-K可以将私钥添加到钥匙串，不用每次开机后还要再次输入这条命令了</span>
</span><span class='line'>ssh-add -K ~/.ssh/id_rsa_two
</span></code></pre></td></tr></table></div></figure>


<p>可以在添加前使用下面命令删除所有的key</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh-add -D
</span></code></pre></td></tr></table></div></figure>


<p>最后可以通过下面命令，查看key的设置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh-add -l
</span></code></pre></td></tr></table></div></figure>


<h3>修改ssh config文件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> ~/.ssh/
</span><span class='line'>touch config
</span></code></pre></td></tr></table></div></figure>


<p>打开.ssh文件夹下的config文件，进行配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># default</span>
</span><span class='line'>Host github.com
</span><span class='line'>HostName github.com
</span><span class='line'>User git
</span><span class='line'>IdentityFile ~/.ssh/id_rsa
</span><span class='line'>
</span><span class='line'><span class="c"># two</span>
</span><span class='line'>Host two.github.com  <span class="c"># 前缀名可以任意设置</span>
</span><span class='line'>HostName github.com
</span><span class='line'>User git
</span><span class='line'>IdentityFile ~/.ssh/id_rsa_two
</span></code></pre></td></tr></table></div></figure>


<p>这里必须采用这样的方式设置，否则push时会出现以下错误:</p>

<blockquote><p>ERROR: Permission to two/two.github.com.git denied to one.</p></blockquote>

<p>简单分析下原因，我们可以发现 ssh 客户端是通过类似:  <br/>
<strong>git@github.com:one/one.github.com.git</strong> <br/>
这样的 git 地址中的 User 和 Host 来识别使用哪个本地私钥的。 <br/>
很明显，如果 User 和 Host 始终为 git 和 github.com，那么就只能使用一个私钥。 <br/>
所以需要上面的方式配置，每个账号使用了自己的 Host，每个 Host 的域名做 CNAME 解析到 github.com，这样 ssh 在连接时就可以区别不同的账号了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh -T git@github.com        <span class="c"># 测试one ssh连接</span>
</span><span class='line'><span class="c">#Hi ***! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span>
</span><span class='line'>ssh -T git@two.github.com    <span class="c"># 测试two ssh连接</span>
</span><span class='line'><span class="c">#Hi ***! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这样还没有完，下面还有关联的设置。</p>

<h3>新建git项目或者clone已有的项目</h3>

<ul>
<li>可以用 git init 或者 git clone 创建本地项目</li>
<li>分别在<em>one</em>和<em>two</em>的git项目目录下，使用下面的命令设置账号关联</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git config user.name <span class="s2">&quot;__name__&quot;</span>            <span class="c"># __name__ 例如 one</span>
</span><span class='line'>git config user.email <span class="s2">&quot;__email__&quot;</span>          <span class="c"># __email__ 例如 one@126.com</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看git项目的配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git config --list
</span></code></pre></td></tr></table></div></figure>


<p>查看<em>one</em>的remote.origin.url=git@github.com:one/one.github.com.git <br/>
查看<em>two</em>的remote.origin.url=git@github.com:two/two.github.com.git <br/>
由于<em>one</em>使用的是默认的Host，所以不需要修改，但是two使用的是<em>two.github.com</em>，则需要进行修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git remote rm origin
</span><span class='line'>git remote add origin git@two.github.com:two/two.github.com.git
</span></code></pre></td></tr></table></div></figure>


<h3>上传更改</h3>

<ul>
<li>上面所有的设置无误后，可以修改代码，然后上传了。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git add -A
</span><span class='line'>git commit -m <span class="s2">&quot;your comments&quot;</span>
</span><span class='line'>git push
</span></code></pre></td></tr></table></div></figure>


<p>如果遇到warning</p>

<blockquote><p>warning: push.default is unset; its implicit value is changing in Git 2.0 from ‘matching’ to ‘simple’. To squelch this messageand maintain the current behavior after the default changes, use&hellip;</p></blockquote>

<p>推荐使用下面命令设置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git config --global push.default simple
</span></code></pre></td></tr></table></div></figure>


<h4>参考</h4>

<p><a href="http://blog.csdn.net/wzy_1988/article/details/19967465">http://blog.csdn.net/wzy_1988/article/details/19967465</a> <br/>
<a href="http://testerhome.com/topics/752">http://testerhome.com/topics/752</a> <br/>
<a href="http://hily.me/blog/2013/05/github-multiple-account-and-multiple-repository/">http://hily.me/blog/2013/05/github-multiple-account-and-multiple-repository/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iDP续费]]></title>
    <link href="https://tmyam.github.io/blog/2014/03/25/idpxu-fei/"/>
    <updated>2014-03-25T10:24:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/03/25/idpxu-fei</id>
    <content type="html"><![CDATA[<p>近期续费遇到些问题，找了篇不错的文章做个记录，顺便描述下问题，及解决方案。</p>

<h3>基本流程</h3>

<p>苹果的规则是到期前 <strong>60</strong> 天内才可以续费。</p>

<h4>1. 登录</h4>

<p>登录 <a href="https://developer.apple.com/membercenter/index.action">Member Center</a></p>

<!-- more -->   


<p><img src="https://tmyam.github.io/images/2014/03/25/01.png" alt="temp" /> <br/>
如果将要过期，会有黄色的内容提醒续费。点击 <code>renew your membership(s).</code></p>

<h4>2</h4>

<p><img src="https://tmyam.github.io/images/2014/03/25/02.png" alt="temp" /></p>

<h4>3</h4>

<p><img src="https://tmyam.github.io/images/2014/03/25/03.png" alt="temp" /></p>

<h4>4</h4>

<p><img src="https://tmyam.github.io/images/2014/03/25/04.png" alt="temp" /></p>

<h4>5</h4>

<p><img src="https://tmyam.github.io/images/2014/03/25/05.png" alt="temp" /></p>

<h4>6. 申请结束</h4>

<p>提交后，如果成功，会有一个成功的页面。如果失败，会有一个失败的页面。 <br/>
但是无论成功失败，<a href="https://developer.apple.com/membercenter/index.action#progSummary">Programs &amp; Add-ons</a> 这个页面都会变成下图 <br/>
<img src="https://tmyam.github.io/images/2014/03/25/06.png" alt="temp" /> <br/>
所以以这个页面判断申请是否提交是不准确的，我就有次遇到了失败页，但这个页面是这样的，以为提交了申请，但是等了一星期也没有扣款。</p>

<p>申请提交成功是会很快收到邮件的，如下图 <br/>
<img src="https://tmyam.github.io/images/2014/03/25/07.png" alt="temp" /><br/>
所以可以以邮件判断申请是否成功，如果没收到邮件就不要傻等了，再次申请吧。</p>

<h4>7. 等待</h4>

<p>如果一切正常的话，2个工作日就能扣费成功，并且AppID的那个邮箱会收到一封邮件告知扣费成功，一封告知可以激活。可能有人会认为这就完了，其实没有，还需要一步。那就是查看邮件，找到绿色Activation Code，点击打开激活链接,输入邮箱中看到的激活码，然后状态就会立马更新，不会提示你快过期。</p>

<p>如果没有扣费成功，那检查下帐号信息是否正确，如果有误的话再重新弄一遍，即使你重复提交，苹果扣费也只有一次，如果你确认帐号信息无误，你的信用卡里面余额也够，那多等两天吧，也许是苹果网站又被黑了，如果太担心的话，可以联系苹果开发者支持客服帮你解答你的疑惑。</p>

<p>依次收到的邮件:<br/>
购买信息  <br/>
<img src="https://tmyam.github.io/images/2014/03/25/08.png" alt="temp" /></p>

<p>发票  <br/>
<img src="https://tmyam.github.io/images/2014/03/25/09.png" alt="temp" /></p>

<p>激活码  <br/>
<img src="https://tmyam.github.io/images/2014/03/25/10.png" alt="temp" /></p>

<h4>8. 激活</h4>

<p>点击邮件中的激活码，会跳转到一个链接，然后在里面输入激活码完成激活。 <br/>
<img src="https://tmyam.github.io/images/2014/03/25/11.png" alt="temp" /> <br/>
激活成功后，<a href="https://developer.apple.com/membercenter/index.action#progSummary">Programs &amp; Add-ons</a> 这个页面都会变成下图
<img src="https://tmyam.github.io/images/2014/03/25/12.png" alt="temp" /></p>

<h3>遇到的问题</h3>

<p>续费中遇到问题，可以联系苹果客服。</p>

<p>可以拨打 苹果中国 4006 701 855（Mon-Fri, 09:00-17:00 SGT） <br/>
或者发送邮件到 <a href="&#109;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x63;&#x68;&#x69;&#x6e;&#97;&#100;&#x65;&#x76;&#64;&#97;&#x73;&#x69;&#x61;&#46;&#97;&#112;&#x70;&#108;&#x65;&#46;&#99;&#x6f;&#x6d;">&#x63;&#x68;&#x69;&#x6e;&#97;&#100;&#x65;&#x76;&#x40;&#97;&#115;&#105;&#97;&#x2e;&#x61;&#x70;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#109;</a> (没有试过&hellip;)</p>

<ul>
<li><strong>问题：</strong> <br/>
续费选的时候是 <strong>iOS Developer Program</strong> 结果收到了苹果的邮件通知，却变成了 <strong>Mac Developer Program</strong> 。  <br/>
对于这种苹果犯的错误，我是通过打电话解决的，苹果方面不能直接转平台，只能退款，要4-7天才能到信用卡里。还得再次续费才行。。。</li>
</ul>


<h4>参考</h4>

<p><a href="http://blog.sina.com.cn/s/blog_68661bd80101nme6.html">http://blog.sina.com.cn/s/blog_68661bd80101nme6.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iDP申请[转载]]]></title>
    <link href="https://tmyam.github.io/blog/2014/03/09/idpshen-qing/"/>
    <updated>2014-03-09T20:06:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/03/09/idpshen-qing</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>当初我申请idp的一篇详细的文章，不过现在里面的图都挂了，我费了点劲才找回这些图，在这里进行一下还原，希望能帮到需要的人。</p>

<h3>正文</h3>

<p>我的iDP之路04——iDP申请,如何花出去$99,2011年6月份版 <br/>
这帖子本来应该是六月份写的，怎奈那时期末将近，小弟我搞App刚刚起步，资金全靠奖学金维持，不得不投入到准备考试的深渊中。放假期间被我娘她老人家逼着学车，第一个App搞得很是不顺。这个帖子只能一拖再拖。废话稍候再罗嗦，下面是图和解说：</p>

<!-- more -->


<h6># 1</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/01.png" alt="temp" />
我是从申请过developer开始的。Apple id和developer太简单了，就不说了，不过填信息也不能乱填，下面说。这张图是登入developer的画面。</p>

<h6># 2</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/02.png" alt="temp" /></p>

<h6># 3</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/03.png" alt="temp" /></p>

<h6># 4</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/04.png" alt="temp" />
因为已经注册过Apple id和developer了，所以我选的是红圈那项。</p>

<h6># 5</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/05.png" alt="temp" />
左边是个人，右边是团队。我光杆司令一个，所以选了左边。</p>

<h6># 6</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/06.png" alt="temp" />
不知是不是cookie过期了，到了这里要重新登录一次。</p>

<h6># 7</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/07.png" alt="temp" />
这里的信息是信用卡(借记卡可不行)的信息：我(假如叫<strong>王五</strong>)所有名字顺序，除了在银行流留的是中英文<strong>王五</strong>，apple的各种页面上都是英文<strong>Wu Wang</strong>。</p>

<h6># 8</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/08.png" alt="temp" />
这里奉上英文的地址写法一例： <br/>
Mailbox 166,Nankai University,94 WeijinRd,Nankai District,Tianjin 300072.  <br/>
这个页面上  <br/>
Street Address: Mailbox 166,Nankai University  <br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;94 WeijinRd,Nankai District,Tianjin  <br/>
Postal Code: 300072  <br/>
Phone: 86 - 411 - 手机号</p>

<h6># 9</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/09.png" alt="temp" /></p>

<h6># 10</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/10.png" alt="temp" />
上面提到过developer申请时信息不能乱写。这图上面的信息就是从那里映射过来的，你可以看到地址有些出入，不过还好影响不大。各位填写时应尽量保持一致。</p>

<h6># 11</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/11.png" alt="temp" />
这张表下下来，用PS填写各种信息，大部分是银行信息。</p>

<h6># 12</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/12.png" alt="temp" />
这份邮件曾经让我望眼欲穿，等了5天吧，给亚洲苹果去了3个电话，发了3封邮件。亚洲苹果普通话服务真不是普通话&hellip;总之，把上图的<strong>Purchase Form</strong> PS完，我存成jpg发给了
<font color=red><a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#58;&#x63;&#104;&#x69;&#110;&#x61;&#100;&#x65;&#x76;&#64;&#x61;&#115;&#105;&#x61;&#46;&#97;&#112;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#109;">&#x63;&#x68;&#105;&#x6e;&#x61;&#x64;&#x65;&#x76;&#x40;&#97;&#x73;&#x69;&#x61;&#x2e;&#x61;&#112;&#112;&#108;&#x65;&#46;&#99;&#x6f;&#109;</a></font>。
就可以等了，不过论坛里各位前辈的经验是打电话啊发邮件啊地催。我发邮件是因为地址因为笔误写错了。</p>

<h6># 13</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/13.png" alt="temp" />
收到上图邮件后就能进ituesconnect.apple.com了，进contract，tax，and banking，就能看到上图。上面的是可以申请的合同，下面是已经生效的。因为免费app合同不用申请进进来就在下面了。</p>

<h6># 14</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/14.png" alt="temp" /></p>

<h6># 15</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/15.png" alt="temp" /></p>

<h6># 16</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/16.png" alt="temp" />
红圈子里是需要逐个填写的。</p>

<h6># 17</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/17.png" alt="temp" />
<strong>contract info</strong>  <br/>
这里第一次进去会需要创建一个新人。然后高管，财务，技术，科技等等职位，都是我一个人担任。</p>

<h6># 18</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/18.png" alt="temp" />
<strong>Bank info</strong></p>

<h6># 19</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/19.png" alt="temp" />
<strong>CNAPS</strong>，应该是叫“联行号”不要跟银行的人说英文，他们不懂。办信用卡的时候问好，95588这种电话问不到。 <br/>
补充：这里填写的银行号为储蓄卡，千万不能填信用卡的，不然收款都到信用卡里了。 <br/>
查询CNAPS：<a href="https://e.czbank.com/CORPORBANK/query_unionBank_index.jsp">https://e.czbank.com/CORPORBANK/query_unionBank_index.jsp</a></p>

<h6># 20</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/20.png" alt="temp" />
这里的信息要写的简洁，要不查不到。</p>

<h6># 21</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/21.png" alt="temp" />
添加一个账户信息。</p>

<h6># 22</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/22.png" alt="temp" /></p>

<h6># 23</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/23.png" alt="temp" />
储蓄卡卡号，名字当然是储蓄卡开户名，比如<strong>Wu Wang</strong>。  <br/>
另外这里收款要选择<strong>USD</strong>，如果选择<strong>RMB</strong>的话，apple打款时是以美元结算的，会多一次汇率转换，白白浪费钱。</p>

<h6># 24</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/24.png" alt="temp" /></p>

<h6># 25</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/25.png" alt="temp" />
<strong>Tax info</strong>  <br/>
会有几个问题，照实回答，难度不大。  <br/>
给自己随便封个号，我的是chairman。</p>

<h6># 26</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/26.png" alt="temp" />
完事会审核，这个很快，吃顿饭就好了。</p>

<h6># 27</h6>

<p><img src="https://tmyam.github.io/images/2014/03/09/27.png" alt="temp" />
这个事我现在的状态。iAd Network的合同是不小心申请的，其实不用。
时间有点长了，有些细节我慢慢想，慢慢往上写。写的潦草，大家见谅。</p>

<h3>原始链接</h3>

<p><a href="http://watchxxx.blog.163.com/blog/static/1974232272011115112728500/">http://watchxxx.blog.163.com/blog/static/1974232272011115112728500/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C遍历数组]]></title>
    <link href="https://tmyam.github.io/blog/2014/02/28/objective-cbian-li-shu-zu/"/>
    <updated>2014-02-28T11:46:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/02/28/objective-cbian-li-shu-zu</id>
    <content type="html"><![CDATA[<p>数组的遍历有多种方式，这里介绍一下常见的方式，使用以及注意事项。</p>

<h3>常用写法简介</h3>

<h4>1. 经典写法</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">count</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span> <span class="p">;</span> <span class="n">i</span> <span class="o">++</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>之所以使用count来存储数组总数，而不是写成 <strong>i &lt; array.count</strong> ,是因为循环每进行一次都会调用数组的计数方法，这将导致性能变得很差。</p>

<!-- more -->


<h4>2. NSEnumerator</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">test</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSEnumerator</span><span class="o">*</span> <span class="n">enumerator</span> <span class="o">=</span> <span class="p">[</span><span class="n">array</span> <span class="n">objectEnumerator</span><span class="p">];</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">test</span> <span class="o">=</span> <span class="p">[</span><span class="n">enumerator</span> <span class="n">nextObject</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>NSEnumerator的优势在于不需要知道数据总数，所以它适合应用在结构化数据上，比如链表，数据流等。</p>

<h4>3. 快速枚举</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSString</span><span class="o">*</span> <span class="n">test</span> <span class="k">in</span> <span class="n">array</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>快速枚举是apple推荐的方式，在使用上比经典的写法性能上更快。 <br/>
使用上如果需要反向枚举，只需要将<strong>array</strong>改成<strong>array.reverseObjectEnumerator</strong>就可以了。</p>

<h4>4. 枚举块</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">array</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span> <span class="n">obj</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>枚举块的优势在于它会返回对象和索引, 而其他的枚举方法只会返回对象.</p>

<h3>并发执行</h3>

<p>现在是多核的时代，为了发挥多核的优势，在有些时候并发执行就非常具有优势。如果在枚举中有许多事要做，但并不关心枚举顺序的情况下，使用并发就很合适。 <br/>
但是对于数组总量小一些的数组，并发执行不一定会带来性能提升，反而开销可能远多于其带来的好处。<br/>
所以具体的使用需要自己进行权衡。</p>

<h4>1. 基本的并发枚举块</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">array</span> <span class="nl">enumerateObjectsWithOptions</span><span class="p">:</span><span class="n">NSEnumerationConcurrent</span> <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span> <span class="n">obj</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式会为每一个枚举创建一个线程，等到所有的枚举都执行完毕才会进行下一步。</p>

<h4>2. 异步GCD并发</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span> <span class="n">test</span> <span class="k">in</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式会为每一个枚举创建一个线程，但是不会等待所有枚举执行完成，而是for循环完成后就会进行下一步了，是一种异步执行的方式。</p>

<h4>3. 等待GCD并发</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">dispatch_group_t</span> <span class="n">group</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span> <span class="n">test</span> <span class="k">in</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">dispatch_group_wait</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">DISPATCH_TIME_FOREVER</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dispatch_release</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式使用group将多个block组成一组以监测这些Block全部完成或者等待全部完成。这种方式的效果类似于<code>1.基本的并发枚举块</code>。</p>

<h4>4. dispatch_apply</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test:</span><span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dispatch_apply</span><span class="p">(</span><span class="n">array</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">index</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">array</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是系统提供的一种并发执行方式，这种方式的效果同样类似于<code>1.基本的并发枚举块</code>。</p>

<p><br/></p>

<h4>参考</h4>

<p>本文只是粗略的介绍，如果想了解更详细的使用，建议阅读下面的链接。
<a href="http://www.oschina.net/translate/high-performance-collection-looping-objective-c">http://www.oschina.net/translate/high-performance-collection-looping-objective-c</a></p>

<p><a href="http://www.dreamingwish.com/dream-2012/gcd%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%A4%9A%E6%A0%B8%E5%BF%83%E7%9A%84%E6%80%A7%E8%83%BD.html">http://www.dreamingwish.com/dream-2012/gcd%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%A4%9A%E6%A0%B8%E5%BF%83%E7%9A%84%E6%80%A7%E8%83%BD.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C枚举介绍]]></title>
    <link href="https://tmyam.github.io/blog/2014/02/24/mei-ju-jie-shao/"/>
    <updated>2014-02-24T15:39:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/02/24/mei-ju-jie-shao</id>
    <content type="html"><![CDATA[<p>Objective-C枚举的使用，常见的方式总结，以便自己使用时方便查阅。</p>

<h3>1. 枚举介绍</h3>

<h4>enum only</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">enum</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这种枚举<strong>不推荐</strong>使用，因为不能用一种类型的方式表示枚举。</li>
</ul>


<!-- more -->


<h4>enum 类型</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">enum</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="n">TMEnumTest</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">enum</span> <span class="n">TMEnumTest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="n">TMEnumTest</span> <span class="n">TMEnumTest</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这两种写法，将枚举描述为一个类型<em>TMEnumTest</em>。 <br/>
但是这种写法也有局限性，在作为函数参数时，如果传入NSInteger类型的数据，则需要强制转换，否则会有类型不匹配的警告，所以这种方式也<strong>不推荐</strong>。如下图，
<img src="https://tmyam.github.io/images/2014/02/24/enum_warn.png" alt="temp" /></li>
</ul>


<h4>老式enum写法</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">enum</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="bp">NSUInteger</span> <span class="n">TMEnumTest</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这种写法可以指定<em>TMEnumTest</em>的类型，并且作为函数参数时，传入的值不需要进行强制类型转换。 <br/>
但是这种写法不会检查枚举的正确性，是好是坏需要自己判断，如下图。本人<strong>推荐</strong>这种写法。
<img src="https://tmyam.github.io/images/2014/02/24/enum_no_check.png" alt="temp" /></li>
</ul>


<h4>新式enum写法</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">NS_ENUM</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">,</span> <span class="n">TMEnumTest</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">NS_OPTIONS</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">,</span> <span class="n">TMEnumTest</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span>  <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span>  <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>NS_ENUM</strong>和<strong>NS_OPTIONS</strong>本质是一样的，仅仅从字面上来区分用途。<strong>NS_ENUM</strong>是通用情况，<strong>NS_OPTIONS</strong>一般用来定义位枚举。
<a href="http://blog.csdn.net/annkie/article/details/9877643">参考链接</a></li>
<li>这种写法同样作为函数参数时，传入的值不需要进行强制类型转换。但是也同样不会检查枚举的正确性，和 <strong>老式enum写法</strong> 一样，如下图。
<img src="https://tmyam.github.io/images/2014/02/24/enum_no_check.png" alt="temp" /></li>
<li>但是不同的是，<strong>新式enum写法</strong> 在使用<em>switch</em>时，会进行值的检测，如果枚举中无此值，则会弹出警告，如下图。这种方式见仁见智了。本人<strong>推荐</strong>这种写法。
<img src="https://tmyam.github.io/images/2014/02/24/enum_switch.png" alt="temp" /></li>
</ul>


<h3>2. 枚举最大值</h3>

<p>对于一般的枚举，要获取枚举的最大值是很难的，因为随着枚举的扩充，最大值在不断变化，这时推荐使用一个固定的枚举表示最大值，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">NS_ENUM</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">,</span> <span class="n">TMEnumTest</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TMEnumTestMax</span><span class="p">,</span>  <span class="c1">// 表示最大值</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以使用<em>TMEnumTestMax</em>表示枚举<em>TMEnumTest</em>的最大值了。</p>

<h3>3. 位枚举</h3>

<p>位枚举是一种特殊的枚举，在apple的类中使用的很多，例如<code>NSStringCompareOptions</code>等。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">NS_OPTIONS</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">,</span> <span class="n">TMEnumTest</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTestOne</span>     <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>          <span class="c1">// 0</span>
</span><span class='line'>    <span class="n">TMEnumTestTwo</span>     <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">,</span>     <span class="c1">// 1</span>
</span><span class='line'>    <span class="n">TMEnumTestThree</span>   <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">,</span>     <span class="c1">// 2</span>
</span><span class='line'>    <span class="n">TMEnumTestFour</span>    <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">,</span>     <span class="c1">// 4</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>位枚举的特点是可以使用位运算来处理枚举值，实际使用中可以用一个变量存储多个枚举值，表示互不影响的多个设置。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TMEnumTest</span> <span class="n">test</span> <span class="o">=</span> <span class="n">TMEnumTestTwo</span><span class="o">|</span><span class="n">TMEnumTestThree</span><span class="p">;</span>  <span class="c1">// 3</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 添加TMEnumTestFour到test中（如test已经包含TMEnumTestFour，则test值不变）</span>
</span><span class='line'><span class="cm">    </span>
</span><span class='line'><span class="cm">       当然这里也可以使用test += TMEnumTestFour,</span>
</span><span class='line'><span class="cm">       但是注意 + 不能在test中已经包含TMEnumTestFour的情况下使用。</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="n">test</span> <span class="o">|=</span> <span class="n">TMEnumTestFour</span><span class="p">;</span>  <span class="c1">// 7</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 将TMEnumTestThree从test中去除（如test不包含TMEnumTestThree，则test值不变）</span>
</span><span class='line'><span class="cm">    </span>
</span><span class='line'><span class="cm">       当然这里也可以使用test -= TMEnumTestThree，</span>
</span><span class='line'><span class="cm">       但是注意 - 不能在test中不包含TMEnumTestThree的情况下使用。</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="n">test</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">TMEnumTestThree</span><span class="p">;</span> <span class="c1">// 5</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 判断 TMEnumTestFour枚举 是否被包含</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">test</span> <span class="o">&amp;</span> <span class="n">TMEnumTestFour</span><span class="p">)</span> <span class="o">==</span> <span class="n">TMEnumTestFour</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;YES&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 判断 TMEnumTestFour枚举 是否被包含</span>
</span><span class='line'><span class="cm">     </span>
</span><span class='line'><span class="cm">     因为 (test &amp; TMEnumTestFour) 的结果不是 0，就是TMEnumTestFour本身，</span>
</span><span class='line'><span class="cm">     而 TMEnumTestFour &gt; 0 ，所以可以使用简易的判断</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">test</span> <span class="o">&amp;</span> <span class="n">TMEnumTestFour</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;YES&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac app，创建基于文档的app]]></title>
    <link href="https://tmyam.github.io/blog/2014/02/20/chuang-jian-wen-dang-xing-ying-yong/"/>
    <updated>2014-02-20T14:24:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2014/02/20/chuang-jian-wen-dang-xing-ying-yong</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<p>基于文档的app在mac下又是比较常见的形式，但是介绍的文章比较少。为了避免少走弯路，在此进行一些简单的介绍。</p>

<!-- more -->   


<h3>创建</h3>

<p>创建一个mac app，在下图这个界面，勾选<strong>Create Document-Based Application</strong> <br/>
<img src="https://tmyam.github.io/images/2014/02/20/create.png" alt="temp" /></p>

<p>其中继承自<strong>NSDocument</strong>的<strong>Document</strong>就是文档类，区别于<strong>AppDelegate</strong>，<strong>Document</strong>不是单例，而是对应一个个文档实例。</p>

<h3>自建文档文件图标</h3>

<p>这里省略，格式为icns&hellip;</p>

<h3>关联文件类型</h3>

<ul>
<li>导入文档图标（上步创建的图标）</li>
<li>在工程的<em>Info</em>里进行设置，如下图。 <br/>
<img src="https://tmyam.github.io/images/2014/02/20/info.png" alt="temp" /> <br/>
<strong>Document Types</strong>设置文档关联的文件，<em>Identifier</em>为文档标示。 <br/>
<strong>Exported UTIs</strong>为具体的文档设置，<em>Identifier</em>必须和<strong>Document Types</strong>的一致，这里面可以设置图标，扩展名等等。 <br/>
注意图标必须设置在<strong>Document Types</strong>里面，运行之后就会立即生效。 <br/>
而且这两项都是可以设置多个关联的，关联多个文档类，关联多种格式。</li>
</ul>


<h3>运行</h3>

<p>这时，运行工程，文件关联就已经完成了。可以创建一个指定的扩展名文件，看看是不是已经变成了指定的图标样式。如果没有改变，可以重启电脑之后看看。</p>

<h3>编码</h3>

<p>在<strong>Document.m</strong>文件里已经有两个函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nf">dataOfType:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">typeName</span> <span class="nf">error:</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">**</span><span class="p">)</span><span class="nv">outError</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">typeName</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;com.tmyam.TestDocument.document&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// TODO: 这里是具体的存储文件数据</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="s">@&quot;test&quot;</span> <span class="nl">dataUsingEncoding</span><span class="p">:</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">outError</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="o">*</span><span class="n">outError</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSError</span> <span class="nl">errorWithDomain</span><span class="p">:</span><span class="s">@&quot;TestDocumentErrorDomain&quot;</span>
</span><span class='line'>                                            <span class="nl">code</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>                                        <span class="nl">userInfo</span><span class="p">:</span><span class="l">@{</span><span class="nl">NSLocalizedFailureReasonErrorKey</span><span class="p">:[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;Unsupported data type: %@&quot;</span><span class="p">,</span> <span class="n">typeName</span><span class="p">]</span><span class="l">}</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">readFromData:</span><span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span> <span class="nf">ofType:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">typeName</span> <span class="nf">error:</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">**</span><span class="p">)</span><span class="nv">outError</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">([</span><span class="n">typeName</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;com.tmyam.TestDocument.document&quot;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// TODO: 这里是具体的读取文件数据</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>示例</h3>

<p><a href="https://tmyam.github.io/files/TestDocument.zip">TestDocument示例下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac app完整的发布流程]]></title>
    <link href="https://tmyam.github.io/blog/2013/11/17/mac-app-release/"/>
    <updated>2013-11-17T10:45:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2013/11/17/mac-app-release</id>
    <content type="html"><![CDATA[<p>发布mac app网上已经很多教程了，这里只是进行一个记录，有的时候容易忘记细节。</p>

<h3>前提条件</h3>

<p>1, 一个mac developer帐号</p>

<!-- more -->


<h3>创建APP ID</h3>

<ul>
<li>登陆 <a href="https://developer.apple.com/membercenter">MemberCenter</a></li>
<li>点击 <strong>Certificates, Identifiers &amp; Profiles</strong> 进入管理界面，点击<em>Identifiers</em> -> <em>App IDs</em>.</li>
</ul>


<p>通常情况下我们会创建如 <code>com.company.*</code> 这样的通用型APP ID，可以适用于大部分程序,但是对于需要推送功能，以及app内含有其他app的程序，这样的ID就不行了。保险起见还是创建单独的APP ID。
<img src="https://tmyam.github.io/images/2013/11/18/new_appid.png" alt="temp" /></p>

<ul>
<li>点击<code>+</code> 按钮，进入创建页面。 <br/>
<em>App ID Description</em> 就是一个名称，随意输入就行，不做他用。 <br/>
<em>App Services</em> 应用将具有的能力，可以根据需要勾选。 <br/>
<em>App ID Prefix</em> 标示前缀，不用管。 <br/>
<em>App ID Suffix</em> 标示后缀，这里有两种选择 <strong>Explicit App ID</strong>这种就是一对一的ID，而<strong>Wildcard App ID</strong> 这种就是上面提到的一对多的ID。 <br/>
这里创建 <strong>Explicit App ID</strong> ，<em>Bundle ID:</em> 为类似 <code>com.company.xxx</code>这种样式，<code>company</code>为公司名，<code>xxx</code>为应用程序名，注意大小写一致。 <br/>
一路继续，创建成功。</li>
</ul>


<p> 当然也可以通过 <code>iTunes Connect添加App</code> 时，点击 <strong>You can register a new Bundle ID here.</strong> 来快速创建。</p>

<h3>在iTunes Connect添加App</h3>

<p>这一步需要在开始开发之前做，因为App Name可能已经被别的人占用了，一旦做完应用才创建，不得不面临改名的困境，所以在开发前先将应用名占着。（但是这也有一定风险，如果半年内没有提交该应用，那么你就永远用不了这个名字了&hellip;）</p>

<p><a href="http://my.oschina.net/joanfen/blog/133642">参考链接</a></p>

<ul>
<li>通过<a href="https://developer.apple.com/membercenter">MemberCenter</a> 点击进入<strong>iTunes Connect</strong>，这样可以使创建的ID快速生效。</li>
<li>点击 <strong>Manage Your Apps</strong>,然后点击<code>Add New App</code>按钮。</li>
</ul>


<p><img src="https://tmyam.github.io/images/2013/11/18/add_new_app.png" alt="temp" />  <br/>
然后是填写<strong>App Information</strong></p>

<ul>
<li>其中<em>SKU Number</em> 是区分你自己应用的标示，只要不重复就行，这里填写和App Name一样就行了。</li>
<li><em>Bundle ID</em> 选择之前创建的ID，然后继续。</li>
</ul>


<p>之后是选择价格界面，选择之后点击继续。</p>

<p> 最后是应用详细信息。</p>

<ul>
<li><p><strong>Version Information</strong> <br/>
 <em>Version Number</em>  版本号 <br/>
 <em>Copyright</em>  版权，填写<code>2014 company Inc</code> 就可以了。</p></li>
<li><p><strong>Category</strong>（app种类）<br/>
<img src="https://tmyam.github.io/images/2013/11/18/category.png" alt="temp" /><br/>
选择app所属的两种类型。</p></li>
<li><p><strong>Rating</strong>（分级） <br/>
一般根据情况选择，没有就全选<em>None</em>。</p></li>
<li><p><strong>Metadata</strong>（软件信息） <br/>
根据需要填写，也可以之后再更改。</p></li>
<li><p><strong>Contact Information</strong> <br/>
根据实际情况填写。</p></li>
<li><p><strong>Uploads</strong>（截图） <br/>
可以先选张上去，之后再更改。</p></li>
</ul>


<p>至此，开放前的准备工作就完成了。</p>

<h3>生成发布的描述文件</h3>

<p>在编写程序的时候需要对沙箱环境进行测试，这里使用通用的Mac developer证书，以及通用的描述文件即可达到目的。但是发布的话还需要专用的描述文件。</p>

<p><a href="http://my.oschina.net/joanfen/blog/133624">参考链接</a></p>

<ul>
<li><p>登陆 <a href="https://developer.apple.com/membercenter">MemberCenter</a></p></li>
<li><p>点击 <strong>Certificates, Identifiers &amp; Profiles</strong> 进入管理界面，点击<em>Identifiers</em> -> <em>Provisioning Profiles</em> -> <em>Distribution</em>, 点击 <code>+</code> 按钮。</p></li>
<li><p>根据提示一步一步前进，<em>Profile Name:</em>可以使用 <code>AppNameProfile</code>的样式，最后点击生成。</p></li>
<li><p><del>下载生成的描述文件，右键用Xcode打开，然后在工程中选择 <strong>3rd Party Mac Developer Application:&hellip;</strong> 的证书及对应的描述文件。如下图
<img src="https://tmyam.github.io/images/2013/11/18/code_sign.png" alt="temp" /></del></p></li>
<li><p>由于系统更新，现在描述文件的选择改变了地方，这里依然下载生成的描述文件，右键用Xcode打开，然后在工程中选择 <strong>3rd Party Mac Developer Application:&hellip;</strong> 的证书，描述的地方选择<strong>Automatic</strong>。</p></li>
</ul>


<h3>编写程序&hellip;</h3>

<p>这里不多赘述了&hellip;</p>

<h3>发布</h3>

<p>程序写好，测试完成就可以发布了。
还记得在 <strong>iTunes Connect</strong> 添加的app吗，现在可以进行完善工作了。 <br/>
目前状态 <strong>Prepare for Upload</strong></p>

<ul>
<li><p>对 <em>Description</em> 和 <em>Screenshots</em> 重写填写和上传新的截图，并保存。全部改完后点击<code>Ready to Upload Binary</code>。</p></li>
<li><p><em>Export Compliance</em> 的提问选择 NO 就可以了。之后继续进入 <strong>Waiting For Upload</strong> 状态。</p></li>
<li><p>回到Xcode工程，选择菜单 <em>Product</em> -> <em>Archive</em>,进入 Organizer 的 Archives 界面。</p></li>
<li><p>选择<code>validate...</code>按钮验证app是否能通过验证。 <br/>
这步是最容易发现错误的地方，错误的种类也多种多样，根据实际的错误自己修改吧。</p></li>
<li><p><del>如果没有错误，完成之后点击<code>Distribute...</code>按钮，等待一段漫长的上传之后，回到<strong>iTunes Connect</strong>，状态变成了 <strong>Upload Received</strong>。</del></p></li>
<li><p>这里现在变成了<code>Upload to App Store</code>,并且在弹出的选择框中选择描述文件，如下图
<img src="https://tmyam.github.io/images/2015/03/09/upload_app.png" alt="temp" />
等待一段漫长的上传之后，回到<strong>iTunes Connect</strong>，状态变成了 <strong>Upload Received</strong>。</p></li>
<li><p>等待一段时间，机器会进行初步审核，成功后状态会变成 <strong>Waiting For Review</strong> ，失败的话有具体的提示。</p></li>
<li><p>之后就是等待人工审核了，这里只有等了，一般2~10天不等，升级会快一些。如果想取消发布，可以点击 <strong>Binary Details</strong> ，在新页面点击右上角的 <code>Reject This Binary</code>按钮。</p></li>
<li><p>漫长的等待之后，状态会变成 <strong>In Review</strong>，如果不顺利，那么又要从头开始上传，接着是漫长的等待&hellip; <br/>
如果顺利，状态之后会变成 <strong>Processing for App Store</strong>，最后是 <strong>Ready for Sale</strong>，至此发布完成。</p></li>
</ul>


<h4>更新</h4>

<ul>
<li>2016-03-09 第一次更新，环境: <code>(mac 版本 10.11.3 ) ( Xcode 7.2.1 )</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac app开发中添加第三方framework]]></title>
    <link href="https://tmyam.github.io/blog/2013/11/05/mac-develop-add-framework/"/>
    <updated>2013-11-05T15:23:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2013/11/05/mac-develop-add-framework</id>
    <content type="html"><![CDATA[<p>环境: <code>(Mac 版本 10.9 ) ( Xcode 5.0 )</code></p>

<hr />

<p><br/></p>

<h3>步骤很简单，但是总是忘记，所以在这里做个记录。</h3>

<ul>
<li>在工程目录中建个文件夹，存放将要添加的第三方framework</li>
</ul>


<!-- more -->


<ul>
<li><p>在工程的 <em>Build Phases</em> 栏点击菜单，如下图，添加 <em>Copy Files</em><br/>
<img src="https://tmyam.github.io/images/2013/11/05/add_copy_files.png" alt="temp" /></p></li>
<li><p>选择<code>Frameworks</code>,点击<code>+</code>号，然后找到存放第三方framework的文件夹，选择要添加的framework，如下图<br/>
<img src="https://tmyam.github.io/images/2013/11/05/add_framework.png" alt="temp" /></p></li>
<li><p>展开<em>Link Binary With Libraries</em> 点击<code>+</code>号，同上一步一样，找到找到存放第三方framework的文件夹，选择要使用的framework，如下图<br/>
<img src="https://tmyam.github.io/images/2013/11/05/use_framework.png" alt="temp" /></p></li>
</ul>


<p>右侧的文件管理里，刚添加的framework会位于顶端，可以稍作整理，移动到Frameworks组里，这时添加就完成了可以随意使用了。</p>

<h3>修改关联路径</h3>

<p>一般情况下，如果将framework文件放到了工程文件夹的里面，那么在移动工程文件夹后，编译工程会出现无法找到framework头文件的错误，这是因为工程默认添加的路径使用了绝对路径的关系。</p>

<ul>
<li>修改 <br/>
在Xcode的 <em>Build Settings</em> 里找到 <em>Framework Search Paths</em> 栏，修改参数为 <br/>
$(SRCROOT)/<code>当前工程名</code>/<code>第三方framework所在的文件夹</code> <br/>
例如：
<img src="https://tmyam.github.io/images/2013/11/05/change_path_framework.png" alt="temp" />
这样就算移动工程文件夹，也不会报错了。</li>
</ul>


<h3>清除冗余文件</h3>

<p>对于已经添加的第三方framework，在生成的app中可以查看到framework的头文件，出于两个目的的考虑。<br/>
1. 由于程序中已经引入了这些头文件，所以重复添加浪费了空间。<br/>
2. 出于安全性的考虑，防止被别人使用或者破解。</p>

<p><strong>清除方法：</strong></p>

<ul>
<li><p>在工程的 <em>Build Phases</em> 栏点击菜单，入最上面的图里，这次添加 <em>Run Script</em><br/>
<img src="https://tmyam.github.io/images/2013/11/05/add_copy_files.png" alt="temp" /></p></li>
<li><p>贴入如下代码</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;build path ${TARGET_BUILD_DIR}&quot;</span>
</span><span class='line'><span class="nb">cd</span> <span class="k">${</span><span class="nv">TARGET_BUILD_DIR</span><span class="k">}</span>/<span class="k">${</span><span class="nv">FULL_PRODUCT_NAME</span><span class="k">}</span>/Contents/Frameworks
</span><span class='line'>rm -rf */Headers
</span><span class='line'>rm -rf */Versions/*/Headers
</span><span class='line'>rm -rf */Versions/*/Resources/*/Contents/Headers
</span><span class='line'>rm -rf */PrivateHeaders
</span><span class='line'>rm -rf */Versions/*/PrivateHeaders
</span><span class='line'>rm -rf */Versions/*/Resources/*/Contents/PrivateHeaders
</span></code></pre></td></tr></table></div></figure>


<p>
如下图 <br/>
<img src="https://tmyam.github.io/images/2013/11/05/clean_framework.png" alt="temp" /></p>

<h3>编译问题</h3>

<p>对于编译出现签名错误的问题，可以查看<a href="http://tmyam.github.io/blog/2013/11/05/xcode5-mac-app-running-on-lion/">链接</a>。</p>

<blockquote><p>/Users/…/xxx.app: code object is not signed at all In subcomponent: /Users/…/xxx.app/Contents/Frameworks/xxx.framework Command /usr/bin/codesign failed with exit code 1</p></blockquote>

<hr />

<p><br/>
<strong>另外，由于framework中含有文件夹的快捷方式，在使用svn等版本管理软件时，新checkout的framework中的快捷方式会丢失，虽然编译运行没有问题，但是提交到mac appstore时无法通过，所以需要注意做压缩备份。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 5.0在Mavericks下创建的mac app在Lion下无法运行的问题]]></title>
    <link href="https://tmyam.github.io/blog/2013/11/05/xcode5-mac-app-running-on-lion/"/>
    <updated>2013-11-05T10:05:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2013/11/05/xcode5-mac-app-running-on-lion</id>
    <content type="html"><![CDATA[<h3>前因</h3>

<p>最近mac操作系统升级到了Mavericks(10.9)，编程工具Xcode也升级到了5.0，但是升级之后问题多多。
先是以前创建的mac app工程使用到第三方framework的地方，无法编译通过了，其次就是编译出的程序在Lion(10.7)系统下无法运行了，要做兼容的话，真是让人头疼。</p>

<!-- more -->


<h3>解决</h3>

<h4>引用第三方framework</h4>

<p>原本mac app开发使用的第三方framework是不需要签名的，但是系统升级到Mavericks，Xcode升级到5.0后，再引用无签名的第三方framework时就无法编译通过了，这对于使用资源是很不利的。</p>

<blockquote><p>/Users/&hellip;/xxx.app: code object is not signed at all
In subcomponent: /Users/&hellip;/xxx.app/Contents/Frameworks/xxx.framework
Command /usr/bin/codesign failed with exit code 1</p></blockquote>

<p>解决方案：</p>

<ul>
<li><p>方案1: 这个问题只出现在Mavericks + Xcode5.0下面，可能是一个系统bug，所以可以选择降系统。（比较麻烦）</p></li>
<li><p>方案2: 可以找到第三方framework的开源文件，自己使用签名进行编译。（不够通用）</p></li>
<li><p>方案3: 在工程的 <code>Other Code Signing Flags</code> 栏加入 <code>--deep</code> 给第三方framework签名。<a href="http://support.hockeyapp.net/discussions/problems/14709-code-sign-error-in-xcode-501-for-os-x-target">参考链接</a></p></li>
</ul>


<h4>Lion(10.7)的兼容</h4>

<p>Mavericks(10.9) + Xcode5.0创建的mac app程序无法在Lion(10.7)上面运行，就算选择了tag为10.7也不行。<br/>
究其原因发现，新创建的程序下面多了个 <em>Base.lproj</em> 文件夹，<em>MainMenu.xib</em> 文件就在里面，而在以前，<em>MainMenu.xib</em> 文件是在 <em>en.lproj</em> 文件夹下的。</p>

<p>而且系统也有相应的提示</p>

<blockquote><p>warning: Internationalization of /Users/&hellip;/Base.lproj/MainMenu.xib is not available when compiling for targets before Mac OS X 10.8</p></blockquote>

<ul>
<li>修改很简单，点击<em>MainMenu.xib</em>，找到如下图的位置，点击 <code>Base</code><br/>
<img src="https://tmyam.github.io/images/2013/11/05/xib_change.png" alt="temp" /><br/>
之后弹出对话框，如下图，点击 <code>Move</code>
<img src="https://tmyam.github.io/images/2013/11/05/xib_move.png" alt="temp" /> <br/>
工程中的<code>Base.lproj</code>文件夹已经没有用了，可以选择删除。</li>
</ul>


<p>这样编译出的app就可以兼容Lion(10.7)了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为博客添加分类和评论功能]]></title>
    <link href="https://tmyam.github.io/blog/2013/10/09/category-and-comment/"/>
    <updated>2013-10-09T15:03:00+08:00</updated>
    <id>https://tmyam.github.io/blog/2013/10/09/category-and-comment</id>
    <content type="html"><![CDATA[<h3>1.右侧边栏分类</h3>

<ul>
<li><a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/">参考链接</a><br/>
如果想使用中文名分类，可以修改 <em>category_list.html</em> 中的<code>&lt;h1&gt;Categories&lt;/h1&gt;</code>为
<code>&lt;h1&gt;文章分类&lt;/h1&gt;</code>。</li>
</ul>


<!-- more -->


<h3>2.添加关于页面</h3>

<p><a href="http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html">参考链接</a></p>

<p>打开文件source\_includes\custom\navigation.html，默认情况下如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;main-navigation&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Blog<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>Archives<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以在此添加一个标签页，使用命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake new_page<span class="o">[</span><span class="s1">&#39;about&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建一个页面，页面路径为source\about\index.markdown;</p>

<p>修改上面的navigation.html为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;main-navigation&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>首页<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>归档<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/about&quot;</span><span class="nt">&gt;</span>关于<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3><del>3.添加disqus评论</del></h3>

<ul>
<li><p>使用第三方的评论系统，在<a href="http://www.disqus.com">disqus</a>注册一个账号，并登录。</p></li>
<li><p>参考下图，点击<code>Dashboard</code></p></li>
</ul>


<p><img src="https://tmyam.github.io/images/2013/10/09/comment_dashboard.png" alt="temp" /></p>

<ul>
<li>然后点击下图中的<code>add</code>按钮</li>
</ul>


<p><img src="https://tmyam.github.io/images/2013/10/09/comment_add.png" alt="temp" /></p>

<ul>
<li><p>之后根据提示添加信息，一步一步直到完成。</p></li>
<li><p>然后修改<strong>_config.yml</strong>文件</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Disqus Comments </span>
</span><span class='line'>disqus_short_name: tmyam   <span class="c"># tmyam为添加站点信息时的Site Shortname (注意前面必须有空格)</span>
</span><span class='line'>disqus_show_comment_count: <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.添加多说评论</h3>

<p>disqus作为国外的评论系统，可用的登录基本都被墙了，所以选择国内的系统还是很有必要的。</p>

<ul>
<li><p>到 <a href="http://duoshuo.com">多说</a> 关联个账号,然后点击首页的<code>我要安装</code>,填写信息。</p></li>
<li><p>具体安装 <a href="http://havee.me/internet/2013-02/add-duoshuo-commemt-system-into-octopress.html">参考链接</a><br/>
<strong>注意：</strong> 为了让多说支持https，添加<strong>source/_includes/post/duoshuo.html</strong>文件时，需要将<code>ds.src = 'http://static.duoshuo.com/embed.js';</code>这句改为<code>ds.src = 'https://static.duoshuo.com/embed.js';</code> <br/>
这样，多说就同时支持https了。</p></li>
</ul>


<p><br/></p>

<h4>参考</h4>

<p><a href="http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html">http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html</a></p>
]]></content>
  </entry>
  
</feed>
