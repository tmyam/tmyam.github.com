<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tmyam的个人博客]]></title>
  <link href="http://tmyam.github.io/atom.xml" rel="self"/>
  <link href="http://tmyam.github.io/"/>
  <updated>2013-11-05T16:27:22+08:00</updated>
  <id>http://tmyam.github.io/</id>
  <author>
    <name><![CDATA[tmyam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mac app开发中添加第三方framework]]></title>
    <link href="http://tmyam.github.io/blog/2013/11/05/mac-develop-add-framework/"/>
    <updated>2013-11-05T15:23:00+08:00</updated>
    <id>http://tmyam.github.io/blog/2013/11/05/mac-develop-add-framework</id>
    <content type="html"><![CDATA[<p>环境: <code>(mac 版本 10.9 ) ( Xcode 5.0 )</code></p>

<hr />

<br/>


<h4>步骤很简单，但是总是忘记，所以在这里做个记录。</h4>

<ul>
<li>在工程目录中建个文件夹，存放将要添加的第三方framework</li>
</ul>


<!-- more -->


<ul>
<li><p>在工程的 <em>Build Phases</em> 栏点击菜单，如下图，添加 <em>Copy Files</em><br/>
<img src="http://tmyam.github.io/images/2013/11/05/add_copy_files.png" alt="temp" /></p></li>
<li><p>选择<code>Frameworks</code>,点击<code>+</code>号，然后找到存放第三方framework的文件夹，选择要添加的framework，如下图<br/>
<img src="http://tmyam.github.io/images/2013/11/05/add_framework.png" alt="temp" /></p></li>
<li><p>展开<em>Link Binary With Libraries</em> 点击<code>+</code>号，同上一步一样，找到找到存放第三方framework的文件夹，选择要使用的framework，如下图<br/>
<img src="http://tmyam.github.io/images/2013/11/05/use_framework.png" alt="temp" /></p></li>
</ul>


<p>右侧的文件管理里，刚添加的framework会位于顶端，可以稍作整理，移动到Frameworks组里，这时添加就完成了可以随意使用了。</p>

<h4>清除冗余文件</h4>

<p>对于已经添加的第三方framework，在生成的app中可以查看到framework的头文件，出于两个目的的考虑。<br/>
1. 由于程序中已经引入了这些头文件，所以重复添加浪费了空间。<br/>
2. 出于安全性的考虑，防止被别人使用或者破解。</p>

<p><strong>清除方法：</strong></p>

<ul>
<li><p>在工程的 <em>Build Phases</em> 栏点击菜单，入最上面的图里，这次添加 <em>Run Script</em><br/>
<img src="http://tmyam.github.io/images/2013/11/05/add_copy_files.png" alt="temp" /></p></li>
<li><p>贴入如下代码</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;build path ${TARGET_BUILD_DIR}&quot;</span>
</span><span class='line'><span class="nb">cd</span> <span class="k">${</span><span class="nv">TARGET_BUILD_DIR</span><span class="k">}</span>/<span class="k">${</span><span class="nv">FULL_PRODUCT_NAME</span><span class="k">}</span>/Contents/Frameworks
</span><span class='line'>rm -rf */Headers
</span><span class='line'>rm -rf */Versions/*/Headers
</span><span class='line'>rm -rf */Versions/*/PrivateHeaders
</span><span class='line'>rm -rf */Versions/*/Resources/*/Contents/Headers
</span></code></pre></td></tr></table></div></figure>


<p>
如图下 <br/>
<img src="http://tmyam.github.io/images/2013/11/05/clean_framework.png" alt="temp" /></p>

<h4>编译问题</h4>

<p>对于编译出现签名错误的问题，可以查看<a href="http://tmyam.github.io/blog/2013/11/05/xcode5-mac-app-running-on-lion/">链接</a>。</p>

<blockquote><p>/Users/…/xxx.app: code object is not signed at all In subcomponent: /Users/…/xxx.app/Contents/Frameworks/xxx.framework Command /usr/bin/codesign failed with exit code 1</p></blockquote>

<hr />

<br/>


<p><strong>另外，由于framework中含有文件夹的快捷方式，在使用svn等版本管理软件时，新checkout的framework中的快捷方式会丢失，虽然编译运行没有问题，但是提交到mac appstore时无法通过，所以需要注意做压缩备份。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mavericks(10.9) 下 Xcode 5 创建的mac app在Lion(10.7)无法运行的问题]]></title>
    <link href="http://tmyam.github.io/blog/2013/11/05/xcode5-mac-app-running-on-lion/"/>
    <updated>2013-11-05T10:05:00+08:00</updated>
    <id>http://tmyam.github.io/blog/2013/11/05/xcode5-mac-app-running-on-lion</id>
    <content type="html"><![CDATA[<h2>前因</h2>

<p>最近mac操作系统升级到了Mavericks(10.9)，编程工具Xcode也升级到了5.0，但是升级之后问题多多。
先是以前创建的mac app工程使用到第三方framework的地方，无法编译通过了，其次就是编译出的程序在Lion(10.7)系统下无法运行了，要做兼容的话，真是让人头疼。</p>

<!-- more -->


<h2>解决</h2>

<h3>引用第三方framework</h3>

<p>原本mac app开发使用的第三方framework是不需要签名的，但是系统升级到Mavericks，Xcode升级到5.0后，再引用无签名的第三方framework时就无法编译通过了，这对于使用资源是很不利的。</p>

<blockquote><p>/Users/&hellip;/xxx.app: code object is not signed at all
In subcomponent: /Users/&hellip;/xxx.app/Contents/Frameworks/xxx.framework
Command /usr/bin/codesign failed with exit code 1</p></blockquote>

<p>解决方案：</p>

<ul>
<li><p>方案1: 这个问题只出现在Mavericks + Xcode5.0下面，可能是一个系统bug，所以可以选择降系统。（比较麻烦）</p></li>
<li><p>方案2: 可以找到第三方framework的开源文件，自己使用签名进行编译。（不够通用）</p></li>
<li><p>方案3: 在工程的 <code>Other Code Signing Flags</code> 栏加入 <code>--deep</code> 给第三方framework签名。<a href="http://support.hockeyapp.net/discussions/problems/14709-code-sign-error-in-xcode-501-for-os-x-target">参考链接</a></p></li>
</ul>


<h3>Lion(10.7)的兼容</h3>

<p>Mavericks(10.9) + Xcode5.0创建的mac app程序无法在Lion(10.7)上面运行，就算选择了tag为10.7也不行。<br/>
究其原因发现，新创建的程序下面多了个 <em>Base.lproj</em> 文件夹，<em>MainMenu.xib</em> 文件就在里面，而在以前，<em>MainMenu.xib</em> 文件是在 <em>en.lproj</em> 文件夹下的。</p>

<p>而且系统也有相应的提示</p>

<blockquote><p>warning: Internationalization of /Users/&hellip;/Base.lproj/MainMenu.xib is not available when compiling for targets before Mac OS X 10.8</p></blockquote>

<ul>
<li>修改很简单，点击<em>MainMenu.xib</em>，找到如下图的位置，点击 <code>Base</code><br/>
<img src="http://tmyam.github.io/images/2013/11/05/xib_change.png" alt="temp" /><br/>
之后弹出对话框，如下图，点击 <code>Move</code>
<img src="http://tmyam.github.io/images/2013/11/05/xib_move.png" alt="temp" /> <br/>
工程中的<code>Base.lproj</code>文件夹已经没有用了，可以选择删除。</li>
</ul>


<p>这样编译出的app就可以兼容Lion(10.7)了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为博客添加分类和评论功能]]></title>
    <link href="http://tmyam.github.io/blog/2013/10/09/category-and-comment/"/>
    <updated>2013-10-09T15:03:00+08:00</updated>
    <id>http://tmyam.github.io/blog/2013/10/09/category-and-comment</id>
    <content type="html"><![CDATA[<h2>1.右侧边栏分类</h2>

<ul>
<li><a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/">参考链接</a><br/>
如果想使用中文名分类，可以修改 <em>category_list.html</em> 中的<code>&lt;h1&gt;Categories&lt;/h1&gt;</code>为
<code>&lt;h1&gt;文章分类&lt;/h1&gt;</code>。</li>
</ul>


<!-- more -->


<h2><del>2.添加disqus评论</del></h2>

<ul>
<li><p>使用第三方的评论系统，在<a href="http://www.disqus.com">disqus</a>注册一个账号，并登录。</p></li>
<li><p>参考下图，点击<code>Dashboard</code></p></li>
</ul>


<p><img src="http://tmyam.github.io/images/2013/10/09/comment_dashboard.png" alt="temp" /></p>

<ul>
<li>然后点击下图中的<code>add</code>按钮</li>
</ul>


<p><img src="http://tmyam.github.io/images/2013/10/09/comment_add.png" alt="temp" /></p>

<ul>
<li><p>之后根据提示添加信息，一步一步直到完成。</p></li>
<li><p>然后修改<strong>_config.yml</strong>文件</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Disqus Comments </span>
</span><span class='line'>disqus_short_name: tmyam   <span class="c"># tmyam为添加站点信息时的Site Shortname (注意前面必须有空格)</span>
</span><span class='line'>disqus_show_comment_count: <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3.添加多说评论</h2>

<p>disqus作为国外的评论系统，可用的登录基本都被墙了，所以选择国内的系统还是很有必要的。</p>

<ul>
<li><p>到 <a href="http://duoshuo.com">多说</a> 关联个账号,然后点击首页的<code>我要安装</code>,填写信息。</p></li>
<li><p><a href="http://havee.me/internet/2013-02/add-duoshuo-commemt-system-into-octopress.html">参考链接</a></p></li>
</ul>


<br/>


<h3>参考</h3>

<p><a href="http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html">http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac下编写blog]]></title>
    <link href="http://tmyam.github.io/blog/2013/10/09/write-blog/"/>
    <updated>2013-10-09T10:52:00+08:00</updated>
    <id>http://tmyam.github.io/blog/2013/10/09/write-blog</id>
    <content type="html"><![CDATA[<h2>1.编写</h2>

<ul>
<li><p>下载markdown的编辑工具,<a href="http://mouapp.com">Mou</a></p></li>
<li><p>在终端的octopress目录下，输入</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake new_post<span class="o">[</span><span class="s1">&#39;article name&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后可以在source/_post/目录下找到一个.markdown文件，使用<a href="http://mouapp.com">Mou</a>打开它，写入你想写的内容。</p>

<!-- more -->


<ul>
<li><p>图片<br/>
如果要在文章中使用图片，直接copy到<strong>/source/images</strong>目录下即可。在文章中可以直接使用<code>![temp](/images/temp.png)</code>。也可以选一些大的图床站点，使用链接的方式。<br/>
例如：<img src="http://tmyam.github.io/images/2013/10/09/temp.png" alt="temp" /></p></li>
<li><p>首页缩略显示<br/>
在首页展示文章的一部分内容，而不是显示全部。<br/>
只需要在文章的markdown文件中，在需要显示在首页的文字后面添加<code>&lt;!-- more --&gt;</code>就行了。</p></li>
</ul>


<p>如果想将Read on 修改为中文，可以修改_config.yml文件<br/>
excerpt_link: &ldquo;Read on &rarr;&rdquo;  # &ldquo;Continue reading&rdquo; link text at the bottom of excerpted articles 中的<code>Read on</code> 改为 <code>阅读全文</code>。</p>

<h2>2.代码高亮</h2>

<p>octopress原生支持代码高亮，<a href="http://octopress.org/docs/blogging/code/">参考链接</a> <br/>
使用<code>Backtick</code>来实现语法高亮，<a href="http://m.blog.csdn.net/blog/trochiluses/12906265">参考链接</a></p>

<ul>
<li>语法

<blockquote><p>` ` ` [language] [title] [url] [link text] [linenos:false] [start:#] [mark:#,#&ndash;#] <br/>
code snippet <br/>
` ` `</p></blockquote></li>
</ul>


<p>language: 指明你所使用的语言 <br/>
title: 代码标题 <br/>
url: 代码链接，点击这个可以下载你的代码 <br/>
link text: 对链接的解释文本，默认是link <br/>
start:#: 行号从哪里开始 <br/>
mark:#,#&ndash;#: 标记某一行代码 <br/>
linenos:false: 对高亮代码块不添加行号</p>

<p>例如：</p>

<blockquote><p>` ` ` sh <br/>
rake new_post[&lsquo;article name&rsquo;] <br/>
` ` `</p></blockquote>

<p>显示为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake new_post<span class="o">[</span><span class="s1">&#39;article name&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
由于一旦设置了高亮格式，之后所有的代码高亮都会使用这种格式，有好处也有坏处。可以在下一个代码高亮的地方将<code>language</code>设置成<code>text</code>来取消对下面的影响。</p>

<ul>
<li>常用的高亮格式，<a href="http://vvstyle.com/blog/2013/08/13/backtick-code/">参考链接</a> <br/>
text: 无格式 <br/>
sh: shell脚本 <br/>
objective-c: Objective-C</li>
</ul>


<h2>3.生成</h2>

<ul>
<li>生成静态文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>rake generate
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>预览<br/>
地址 <a href="http://localhost:4000">http://localhost:4000</a> ,时时的修改markdown文件，可以刷新网页看到刚刚修改的效果。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>部署到GitHub上</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<h2>4.备份</h2>

<p>将文件更新备份到github上。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git add -A
</span><span class='line'>git commit -m <span class="s1">&#39;your message&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果遇到<strong>warning</strong></p>

<blockquote><p>warning: push.default is unset; its implicit value is changing in Git 2.0 from &lsquo;matching&rsquo; to &lsquo;simple&rsquo;. To squelch this messageand maintain the current behavior after the default changes, use:&hellip;</p></blockquote>

<p>推荐使用下面命令设置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git config --global push.default simple
</span></code></pre></td></tr></table></div></figure>




<br/>


<h3>参考</h3>

<p><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac下使用github+Octopresss搭建博客]]></title>
    <link href="http://tmyam.github.io/blog/2013/10/08/the-first/"/>
    <updated>2013-10-08T18:09:00+08:00</updated>
    <id>http://tmyam.github.io/blog/2013/10/08/the-first</id>
    <content type="html"><![CDATA[<p>我的第一篇博文 <br/>
<code>(mac 版本 10.8.5)</code></p>

<h2>1.git配置</h2>

<ul>
<li>申请<a href="https://github.com">github</a>账号</li>
<li>配置git环境</li>
</ul>


<p><strong>配置用户信息</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git config --global user.email <span class="s2">&quot;xxx@xxx.com&quot;</span>
</span><span class='line'>git config --global user.name <span class="s2">&quot;xxx&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
可以使用 <code>git config --list</code> 查看配置的信息</p>

<!-- more -->


<p><strong>生成证书</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh-keygen -t rsa -C <span class="s2">&quot;xxx@xxx.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>登录</strong><a href="https://github.com">github</a><br/>
拷贝~/.ssh/id_rsa.pub的内容，在github的<code>Account Settings</code>的<code>SSH Keys</code>里，点<code>Add SSH Keys</code>，将内容粘贴到”Key”中，并输入”Title”.</p>

<h2>2.安装ruby</h2>

<p>使用Octopress需要最低Ruby版本为1.9.3,所以必须安装ruby。</p>

<ul>
<li>如果没有安装了XCode及Command Line Tools则需要先安装apple-gcc42。</li>
<li>使用RVM安装ruby最新版本</li>
</ul>


<p><strong>安装rvm.</strong> <a href="http://stackoverflow.com/questions/3696564/how-to-update-ruby-to-1-9-x-on-mac">参考链接</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>\curl -L https://get.rvm.io | bash -s stable --ruby
</span></code></pre></td></tr></table></div></figure>


<p>由于国内被墙的缘故，可能遇见 <code>curl: (7) couldn't connect to host</code> 错误.可以使用下面的方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>\curl https://rawgithub.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash -s stable --ruby
</span></code></pre></td></tr></table></div></figure>


<p><strong>查看网络上最新的ruby版本</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rvm list known
</span></code></pre></td></tr></table></div></figure>


<p><strong>安装ruby</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rvm install ruby-2.0.0-p247
</span></code></pre></td></tr></table></div></figure>


<p>如果遇到以下错误</p>

<blockquote><p>Error running &lsquo;requirements_osx_port_libs_install autoconf automake libtool pkgconfig apple-gcc42 libiconv libyaml libffi readline libxml2 libxslt libksba openssl curl-ca-bundle sqlite3 zlib gdbm ncurses&rsquo;, please read /Users/xxx/.rvm/log/1371125385_package_install_autoconf_automake_libtool_
pkgconfig_apple-gcc42_libiconv_libyaml_libffi_readline_libxml2_libxslt_libksba_openssl_curl-ca-bundle_sqlite3_zlib_gdbm_ncurses.log</p></blockquote>

<p>可以尝试使用下面的语句解决. <a href="http://stackoverflow.com/questions/17086996/rvm-install-issue-unable-to-execute-port-autoconf">参考链接</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rvm autolibs brew
</span></code></pre></td></tr></table></div></figure>


<p>如果遇到以下错误</p>

<blockquote><p>Error running &lsquo;requirements_osx_brew_libs_install autoconf automake libtool pkg-config libyaml readline libksba openssl&rsquo;,
please read /Users/zrshz/.rvm/log/1381463190_ruby-2.0.0-p247/package_install_autoconf_automake_libtool_pkg-config_libyaml_readline_libksba_openssl.log</p>

<h4>Requirements installation failed with status: 1.</h4></blockquote>

<p>可以先安装homebrew</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo su
</span><span class='line'>curl -L http://github.com/mxcl/homebrew/tarball/master | tar xz --strip 1 -C /usr/local
</span></code></pre></td></tr></table></div></figure>


<p>修改权限</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo chown -R <span class="sb">`</span>whoami<span class="sb">`</span> /Library/Caches/Homebrew/
</span></code></pre></td></tr></table></div></figure>


<p>之后重新安装就行了。</p>

<p><strong>使用</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rvm use ruby-2.0.0-p247
</span></code></pre></td></tr></table></div></figure>


<p>可以使用 <code>rvm list</code> 查看安装的ruby的状态。</p>

<h2>3.部署blog</h2>

<ul>
<li>创建git的blog

<ol>
<li> 点击github主页的 <strong>Tab</strong> <code>Repositories</code>,点击 <code>New</code> 按钮,创建一个public的仓库。</li>
<li> 仓库的名称必须为 <em>your_username.github.com</em> ,其中<strong>your_username</strong>是需要修改的地方,然后点击 <code>Create repository</code> 按钮。</li>
<li> 点击右侧的 ”Settings” 图标，在 <strong>“GitHub Pages”</strong> 栏，点击 <code>Automatic Page Generator</code> 按钮。</li>
<li> 内容不需要填，直接点击 <code>Continue to Layouts</code> 按钮。</li>
<li> 接着是选择模板，直接点击 <code>PUBLISH</code> 按钮即可。大约十分钟之后可以看到生成的静态页面，不过这个页面是没什么用的。</li>
</ol>
</li>
</ul>


<br/>


<ul>
<li>配置<a href="http://octopress.org">Octopress</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd </span>blog               <span class="c"># 想要安装的Octopress的文件夹</span>
</span><span class='line'>git clone https://github.com/imathis/octopress.git
</span><span class='line'><span class="nb">cd </span>octopress
</span><span class='line'>gem install bundler   <span class="c"># 安装依赖</span>
</span><span class='line'>bundle install        
</span><span class='line'>rake install          <span class="c"># 安装Octopress默认的主题</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>部署</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>执行完后会要求输入仓库地址，照着写就行了<em>git@github.com:your_username/your_username.github.com.git</em>，其中<strong>your_username</strong>是需要修改的地方。</p>

<ul>
<li>修改配置文件, <a href="http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html">参考链接</a></li>
</ul>


<p><strong>可以执行以下命令生成页面和预览博客</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake generate      <span class="c"># 生成文件(public文件夹下)</span>
</span><span class='line'>rake preview      <span class="c"># 生成本地预览，地址 http://localhost:4000</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>上传到github</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake deploy        <span class="c"># 会先将public下的文件复制到_deploy下,然后将_deploy下的内容push到GitHub的master分支上</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果出现<code>ERROR: Repository not found.</code>错误，可以使用下面的方法解决。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rm -rf _deploy     <span class="c"># 在octopress目录下</span>
</span><span class='line'>git clone https://github.com/your_username/your_username.github.com.git <span class="s2">&quot;_deploy&quot;</span>       <span class="c"># 注意修改your_username</span>
</span><span class='line'>rake generate   <span class="c"># 再次执行</span>
</span><span class='line'>rake deploy       
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以看到上传的主题博客了。</p>

<h2>4.备份资源文件</h2>

<p>在octopress目录下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;your message&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<h3>参考</h3>

<p> <a href="http://firestudio.cn/blog/2013/01/05/ru-he-tong-guo-github-yu-octopress-lai-da-jian-zi-ji-de-bo-ke/">http://firestudio.cn/blog/2013/01/05/ru-he-tong-guo-github-yu-octopress-lai-da-jian-zi-ji-de-bo-ke/</a></p>
]]></content>
  </entry>
  
</feed>
